// required for old g++ to compile PRId64 macros, see
// https://github.com/pytorch/pytorch/issues/3571
// for context
#define __STDC_FORMAT_MACROS

#include <ATen/Type.h>

// @generated by aten/src/ATen/gen.py

#include <TH/TH.h>
#include <TH/THTensor.hpp>
#include <THNN/THNN.h>
#undef THNN_
#include <c10/core/Allocator.h>
#include <ATen/DeviceGuard.h>
#include <ATen/NativeFunctions.h>
#include <ATen/Utils.h>
#include <ATen/ExpandUtils.h>
#include <ATen/CPUGenerator.h>
#include <ATen/Context.h>
#include <ATen/CheckGenerator.h>
#include <ATen/WrapDimUtils.h>
#include <ATen/Dispatch.h>
#include <c10/util/Half.h>
#include <c10/core/TensorImpl.h>
#include <c10/core/UndefinedTensorImpl.h>
#include <c10/util/Optional.h>

#include <cstddef>
#include <functional>
#include <memory>
#include <utility>

#include <ATen/Config.h>
#include <ATen/LegacyTHFunctionsCPU.h>

namespace at {

static inline ScalarType infer_scalar_type(const Tensor & t) {
   return t.scalar_type();
 }

static inline ScalarType infer_scalar_type(const TensorList & tl) {
   AT_CHECK(tl.size() > 0, "expected a non-empty list of Tensors");
   return tl[0].scalar_type();
 }

Tensor Type::_cast_Byte(const Tensor & self, bool non_blocking) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_cast_Byte: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Byte(/* native_actuals */ self, non_blocking);
}
Tensor Type::_cast_Char(const Tensor & self, bool non_blocking) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_cast_Char: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Char(/* native_actuals */ self, non_blocking);
}
Tensor Type::_cast_Double(const Tensor & self, bool non_blocking) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_cast_Double: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Double(/* native_actuals */ self, non_blocking);
}
Tensor Type::_cast_Float(const Tensor & self, bool non_blocking) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_cast_Float: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Float(/* native_actuals */ self, non_blocking);
}
Tensor Type::_cast_Int(const Tensor & self, bool non_blocking) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_cast_Int: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Int(/* native_actuals */ self, non_blocking);
}
Tensor Type::_cast_Long(const Tensor & self, bool non_blocking) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_cast_Long: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Long(/* native_actuals */ self, non_blocking);
}
Tensor Type::_cast_Short(const Tensor & self, bool non_blocking) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_cast_Short: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Short(/* native_actuals */ self, non_blocking);
}
Tensor Type::_cast_Half(const Tensor & self, bool non_blocking) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_cast_Half: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Half(/* native_actuals */ self, non_blocking);
}
int64_t Type::_debug_has_internal_overlap(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_debug_has_internal_overlap: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_debug_has_internal_overlap(/* native_actuals */ self);
}
std::tuple<Tensor,Tensor> Type::_sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (quasi.is_named() || sobolstate.is_named()) {
        AT_ERROR("_sobol_engine_draw: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(quasi));
    return at::native::_sobol_engine_draw(/* native_actuals */ quasi, n, sobolstate, dimension, num_generated, dtype);
}
Tensor & Type::_sobol_engine_ff_(Tensor & self, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || sobolstate.is_named()) {
        AT_ERROR("_sobol_engine_ff_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sobol_engine_ff_(/* native_actuals */ self, n, sobolstate, dimension, num_generated);
}
Tensor & Type::_sobol_engine_scramble_(Tensor & self, const Tensor & ltm, int64_t dimension) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || ltm.is_named()) {
        AT_ERROR("_sobol_engine_scramble_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sobol_engine_scramble_(/* native_actuals */ self, ltm, dimension);
}
Tensor & Type::_sobol_engine_initialize_state_(Tensor & self, int64_t dimension) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_sobol_engine_initialize_state_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sobol_engine_initialize_state_(/* native_actuals */ self, dimension);
}
Tensor Type::_reshape_from_tensor(const Tensor & self, const Tensor & shape) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || shape.is_named()) {
        AT_ERROR("_reshape_from_tensor: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_reshape_from_tensor(/* native_actuals */ self, shape);
}
Tensor Type::_shape_as_tensor(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_shape_as_tensor: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_shape_as_tensor(/* native_actuals */ self);
}
Tensor Type::dropout(const Tensor & input, double p, bool train) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named()) {
        AT_ERROR("dropout: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::dropout(/* native_actuals */ input, p, train);
}
Tensor & Type::dropout_(Tensor & self, double p, bool train) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("dropout_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dropout_(/* native_actuals */ self, p, train);
}
Tensor Type::feature_dropout(const Tensor & input, double p, bool train) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named()) {
        AT_ERROR("feature_dropout: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::feature_dropout(/* native_actuals */ input, p, train);
}
Tensor & Type::feature_dropout_(Tensor & self, double p, bool train) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("feature_dropout_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::feature_dropout_(/* native_actuals */ self, p, train);
}
Tensor Type::alpha_dropout(const Tensor & input, double p, bool train) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named()) {
        AT_ERROR("alpha_dropout: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::alpha_dropout(/* native_actuals */ input, p, train);
}
Tensor & Type::alpha_dropout_(Tensor & self, double p, bool train) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("alpha_dropout_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::alpha_dropout_(/* native_actuals */ self, p, train);
}
Tensor Type::feature_alpha_dropout(const Tensor & input, double p, bool train) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named()) {
        AT_ERROR("feature_alpha_dropout: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::feature_alpha_dropout(/* native_actuals */ input, p, train);
}
Tensor & Type::feature_alpha_dropout_(Tensor & self, double p, bool train) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("feature_alpha_dropout_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::feature_alpha_dropout_(/* native_actuals */ self, p, train);
}
Tensor Type::abs(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("abs: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::abs(/* native_actuals */ self);
}
Tensor Type::acos(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("acos: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::acos(/* native_actuals */ self);
}
Tensor Type::avg_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("avg_pool1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool1d(/* native_actuals */ self, kernel_size, stride, padding, ceil_mode, count_include_pad);
}
Tensor Type::adaptive_avg_pool1d(const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("adaptive_avg_pool1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool1d(/* native_actuals */ self, output_size);
}
std::tuple<Tensor,Tensor> Type::adaptive_max_pool1d(const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("adaptive_max_pool1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool1d(/* native_actuals */ self, output_size);
}
Tensor Type::add(const Tensor & self, Scalar other, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("add: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add(/* native_actuals */ self, other, alpha);
}
Tensor & Type::add_(Tensor & self, Scalar other, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("add_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_(/* native_actuals */ self, other, alpha);
}
Tensor Type::addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || vec1.is_named() || vec2.is_named()) {
        AT_ERROR("addr: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addr(/* native_actuals */ self, vec1, vec2, beta, alpha);
}
Tensor & Type::addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || vec1.is_named() || vec2.is_named()) {
        AT_ERROR("addr_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addr_(/* native_actuals */ self, vec1, vec2, beta, alpha);
}
Tensor & Type::addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || vec1.is_named() || vec2.is_named()) {
        AT_ERROR("addr_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addr_out(/* native_actuals */ out, self, vec1, vec2, beta, alpha);
}
Tensor Type::affine_grid_generator(const Tensor & theta, IntArrayRef size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (theta.is_named()) {
        AT_ERROR("affine_grid_generator: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(theta));
    return at::native::affine_grid_generator(/* native_actuals */ theta, size);
}
Tensor Type::affine_grid_generator_backward(const Tensor & grad, IntArrayRef size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad.is_named()) {
        AT_ERROR("affine_grid_generator_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::affine_grid_generator_backward(/* native_actuals */ grad, size);
}
Tensor Type::all(const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("all: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all(/* native_actuals */ self, dim, keepdim);
}
Tensor & Type::all_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("all_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all_out(/* native_actuals */ out, self, dim, keepdim);
}
bool Type::allclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("allclose: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::allclose(/* native_actuals */ self, other, rtol, atol, equal_nan);
}
Tensor Type::any(const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("any: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any(/* native_actuals */ self, dim, keepdim);
}
Tensor & Type::any_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("any_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any_out(/* native_actuals */ out, self, dim, keepdim);
}
Tensor Type::arange(Scalar end, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::arange(/* native_actuals */ end, options);
}
Tensor Type::arange(Scalar start, Scalar end, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::arange(/* native_actuals */ start, end, options);
}
Tensor Type::arange(Scalar start, Scalar end, Scalar step, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::arange(/* native_actuals */ start, end, step, options);
}
Tensor & Type::arange_out(Tensor & out, Scalar end) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("arange_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::arange_out(/* native_actuals */ out, end);
}
Tensor Type::_dim_arange(const Tensor & like, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (like.is_named()) {
        AT_ERROR("_dim_arange: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(like));
    return at::native::_dim_arange(/* native_actuals */ like, dim);
}
Tensor Type::argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("argmax: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::argmax(/* native_actuals */ self, dim, keepdim);
}
Tensor Type::argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("argmin: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::argmin(/* native_actuals */ self, dim, keepdim);
}
Tensor & Type::as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("as_strided_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::as_strided_(/* native_actuals */ self, size, stride, storage_offset);
}
Tensor Type::asin(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("asin: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::asin(/* native_actuals */ self);
}
Tensor Type::atan(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("atan: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan(/* native_actuals */ self);
}
Tensor & Type::_baddbmm_mkl_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || batch1.is_named() || batch2.is_named()) {
        AT_ERROR("_baddbmm_mkl_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_baddbmm_mkl_(/* native_actuals */ self, batch1, batch2, beta, alpha);
}
Tensor Type::bartlett_window(int64_t window_length, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::bartlett_window(/* native_actuals */ window_length, options);
}
Tensor Type::bartlett_window(int64_t window_length, bool periodic, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::bartlett_window(/* native_actuals */ window_length, periodic, options);
}
Tensor Type::batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named() || running_mean.is_named() || running_var.is_named()) {
        AT_ERROR("batch_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm(/* native_actuals */ input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
}
std::tuple<Tensor,Tensor,Tensor,int64_t> Type::_batch_norm_impl_index(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named() || running_mean.is_named() || running_var.is_named()) {
        AT_ERROR("_batch_norm_impl_index: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_batch_norm_impl_index(/* native_actuals */ input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
}
std::tuple<Tensor,Tensor,Tensor> Type::_batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var_transform, bool train, double eps, std::array<bool,3> output_mask) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || grad_output.is_named() || weight.is_named() || running_mean.is_named() || running_var.is_named() || save_mean.is_named() || save_var_transform.is_named()) {
        AT_ERROR("_batch_norm_impl_index_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_batch_norm_impl_index_backward(/* native_actuals */ impl_index, input, grad_output, weight, running_mean, running_var, save_mean, save_var_transform, train, eps, output_mask);
}
Tensor Type::bernoulli(const Tensor & self, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("bernoulli: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli(/* native_actuals */ self, generator);
}
Tensor & Type::bernoulli_out(Tensor & out, const Tensor & self, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("bernoulli_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_out(/* native_actuals */ out, self, generator);
}
Tensor Type::bernoulli(const Tensor & self, double p, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("bernoulli: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli(/* native_actuals */ self, p, generator);
}
Tensor Type::bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const Tensor & bias) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input1.is_named() || input2.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("bilinear: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input1));
    return at::native::bilinear(/* native_actuals */ input1, input2, weight, bias);
}
Tensor Type::binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || target.is_named() || weight.is_named() || pos_weight.is_named()) {
        AT_ERROR("binary_cross_entropy_with_logits: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::binary_cross_entropy_with_logits(/* native_actuals */ self, target, weight, pos_weight, reduction);
}
Tensor Type::binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || target.is_named() || weight.is_named() || pos_weight.is_named()) {
        AT_ERROR("binary_cross_entropy_with_logits_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::binary_cross_entropy_with_logits_backward(/* native_actuals */ grad_output, self, target, weight, pos_weight, reduction);
}
Tensor Type::blackman_window(int64_t window_length, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::blackman_window(/* native_actuals */ window_length, options);
}
Tensor Type::blackman_window(int64_t window_length, bool periodic, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::blackman_window(/* native_actuals */ window_length, periodic, options);
}
std::vector<Tensor> Type::broadcast_tensors(TensorList tensors) const {
#ifdef NAMEDTENSOR_ENABLED
    if (at::has_names(tensors)) {
        AT_ERROR("broadcast_tensors: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::broadcast_tensors(/* native_actuals */ tensors);
}
Tensor Type::cat(TensorList tensors, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (at::has_names(tensors)) {
        AT_ERROR("cat: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::cat(/* native_actuals */ tensors, dim);
}
Tensor & Type::cat_out(Tensor & out, TensorList tensors, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || at::has_names(tensors)) {
        AT_ERROR("cat_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::cat_out(/* native_actuals */ out, tensors, dim);
}
Tensor Type::ceil(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("ceil: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ceil(/* native_actuals */ self);
}
Tensor Type::chain_matmul(TensorList matrices) const {
#ifdef NAMEDTENSOR_ENABLED
    if (at::has_names(matrices)) {
        AT_ERROR("chain_matmul: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(matrices));
    return at::native::chain_matmul(/* native_actuals */ matrices);
}
std::vector<Tensor> Type::chunk(const Tensor & self, int64_t chunks, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("chunk: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::chunk(/* native_actuals */ self, chunks, dim);
}
Tensor Type::clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("clamp: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp(/* native_actuals */ self, min, max);
}
Tensor Type::clamp_max(const Tensor & self, Scalar max) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("clamp_max: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp_max(/* native_actuals */ self, max);
}
Tensor Type::clamp_min(const Tensor & self, Scalar min) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("clamp_min: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp_min(/* native_actuals */ self, min);
}
bool Type::cudnn_is_acceptable(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("cudnn_is_acceptable: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::cudnn_is_acceptable(/* native_actuals */ self);
}
Tensor Type::constant_pad_nd(const Tensor & self, IntArrayRef pad, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("constant_pad_nd: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::constant_pad_nd(/* native_actuals */ self, pad, value);
}
Tensor Type::contiguous(const Tensor & self, MemoryFormat memory_format) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("contiguous: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::contiguous(/* native_actuals */ self, memory_format);
}
Tensor Type::convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("convolution: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::convolution(/* native_actuals */ input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);
}
Tensor Type::_convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("_convolution: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_convolution(/* native_actuals */ input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled);
}
Tensor Type::_convolution_nogroup(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("_convolution_nogroup: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_convolution_nogroup(/* native_actuals */ input, weight, bias, stride, padding, dilation, transposed, output_padding);
}
std::tuple<Tensor,Tensor,Tensor> Type::_convolution_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask) const {
#ifdef NAMEDTENSOR_ENABLED
    if (ggI.is_named() || ggW.is_named() || ggb.is_named() || gO.is_named() || weight.is_named() || self.is_named()) {
        AT_ERROR("_convolution_double_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_convolution_double_backward(/* native_actuals */ ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, output_mask);
}
Tensor Type::conv1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("conv1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv1d(/* native_actuals */ input, weight, bias, stride, padding, dilation, groups);
}
Tensor Type::conv2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("conv2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv2d(/* native_actuals */ input, weight, bias, stride, padding, dilation, groups);
}
Tensor Type::conv3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("conv3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv3d(/* native_actuals */ input, weight, bias, stride, padding, dilation, groups);
}
Tensor Type::conv_tbc(const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("conv_tbc: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::conv_tbc(/* native_actuals */ self, weight, bias, pad);
}
std::tuple<Tensor,Tensor,Tensor> Type::conv_tbc_backward(const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || input.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("conv_tbc_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::conv_tbc_backward(/* native_actuals */ self, input, weight, bias, pad);
}
Tensor Type::conv_transpose1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("conv_transpose1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv_transpose1d(/* native_actuals */ input, weight, bias, stride, padding, output_padding, groups, dilation);
}
Tensor Type::conv_transpose2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("conv_transpose2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv_transpose2d(/* native_actuals */ input, weight, bias, stride, padding, output_padding, groups, dilation);
}
Tensor Type::conv_transpose3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("conv_transpose3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv_transpose3d(/* native_actuals */ input, weight, bias, stride, padding, output_padding, groups, dilation);
}
Tensor & Type::copy_(Tensor & self, const Tensor & src, bool non_blocking) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || src.is_named()) {
        AT_ERROR("copy_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::copy_(/* native_actuals */ self, src, non_blocking);
}
Tensor Type::cos(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("cos: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cos(/* native_actuals */ self);
}
Tensor Type::cosh(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("cosh: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cosh(/* native_actuals */ self);
}
Tensor Type::cosine_embedding_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input1.is_named() || input2.is_named() || target.is_named()) {
        AT_ERROR("cosine_embedding_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input1));
    return at::native::cosine_embedding_loss(/* native_actuals */ input1, input2, target, margin, reduction);
}
Tensor Type::cumsum(const Tensor & self, int64_t dim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("cumsum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum(/* native_actuals */ self, dim, dtype);
}
Tensor Type::cumsum(const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("cumsum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum(/* native_actuals */ self, dim);
}
Tensor & Type::cumsum_out(Tensor & out, const Tensor & self, int64_t dim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("cumsum_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum_out(/* native_actuals */ out, self, dim, dtype);
}
Tensor & Type::cumsum_out(Tensor & out, const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("cumsum_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum_out(/* native_actuals */ out, self, dim);
}
Tensor Type::cumprod(const Tensor & self, int64_t dim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("cumprod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod(/* native_actuals */ self, dim, dtype);
}
Tensor Type::cumprod(const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("cumprod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod(/* native_actuals */ self, dim);
}
Tensor & Type::cumprod_out(Tensor & out, const Tensor & self, int64_t dim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("cumprod_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod_out(/* native_actuals */ out, self, dim, dtype);
}
Tensor & Type::cumprod_out(Tensor & out, const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("cumprod_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod_out(/* native_actuals */ out, self, dim);
}
Tensor Type::ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) const {
#ifdef NAMEDTENSOR_ENABLED
    if (log_probs.is_named() || targets.is_named()) {
        AT_ERROR("ctc_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    return at::native::ctc_loss(/* native_actuals */ log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
}
Tensor Type::ctc_loss(const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) const {
#ifdef NAMEDTENSOR_ENABLED
    if (log_probs.is_named() || targets.is_named() || input_lengths.is_named() || target_lengths.is_named()) {
        AT_ERROR("ctc_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    return at::native::ctc_loss(/* native_actuals */ log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
}
Tensor Type::det(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("det: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::det(/* native_actuals */ self);
}
Tensor Type::diag_embed(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("diag_embed: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diag_embed(/* native_actuals */ self, offset, dim1, dim2);
}
Tensor Type::diagflat(const Tensor & self, int64_t offset) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("diagflat: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diagflat(/* native_actuals */ self, offset);
}
Tensor Type::diagonal(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("diagonal: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diagonal(/* native_actuals */ self, offset, dim1, dim2);
}
Tensor Type::div(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("div: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div(/* native_actuals */ self, other);
}
Tensor & Type::div_(Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("div_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div_(/* native_actuals */ self, other);
}
Tensor & Type::div_out(Tensor & out, const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("div_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div_out(/* native_actuals */ out, self, other);
}
Tensor Type::div(const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("div: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div(/* native_actuals */ self, other);
}
Tensor & Type::div_(Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("div_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div_(/* native_actuals */ self, other);
}
Tensor & Type::dot_out(Tensor & out, const Tensor & self, const Tensor & tensor) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || tensor.is_named()) {
        AT_ERROR("dot_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dot_out(/* native_actuals */ out, self, tensor);
}
Tensor Type::einsum(std::string equation, TensorList tensors) const {
#ifdef NAMEDTENSOR_ENABLED
    if (at::has_names(tensors)) {
        AT_ERROR("einsum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::einsum(/* native_actuals */ equation, tensors);
}
Tensor Type::embedding(const Tensor & weight, const Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) const {
#ifdef NAMEDTENSOR_ENABLED
    if (weight.is_named() || indices.is_named()) {
        AT_ERROR("embedding: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(weight));
    return at::native::embedding(/* native_actuals */ weight, indices, padding_idx, scale_grad_by_freq, sparse);
}
Tensor Type::embedding_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad.is_named() || indices.is_named()) {
        AT_ERROR("embedding_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::embedding_backward(/* native_actuals */ grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse);
}
Tensor Type::embedding_sparse_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad.is_named() || indices.is_named()) {
        AT_ERROR("embedding_sparse_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::embedding_sparse_backward(/* native_actuals */ grad, indices, num_weights, padding_idx, scale_grad_by_freq);
}
std::tuple<Tensor,Tensor,Tensor,Tensor> Type::embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) const {
#ifdef NAMEDTENSOR_ENABLED
    if (weight.is_named() || indices.is_named() || offsets.is_named() || per_sample_weights.is_named()) {
        AT_ERROR("embedding_bag: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(weight));
    return at::native::embedding_bag(/* native_actuals */ weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights);
}
Tensor Type::_embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad.is_named() || indices.is_named() || offsets.is_named() || offset2bag.is_named() || bag_size.is_named() || maximum_indices.is_named() || per_sample_weights.is_named()) {
        AT_ERROR("_embedding_bag_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_backward(/* native_actuals */ grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, per_sample_weights);
}
Tensor Type::_embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad.is_named() || indices.is_named() || offsets.is_named() || offset2bag.is_named() || bag_size.is_named() || per_sample_weights.is_named()) {
        AT_ERROR("_embedding_bag_sparse_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_sparse_backward(/* native_actuals */ grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode, per_sample_weights);
}
Tensor & Type::empty_out(Tensor & out, IntArrayRef size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("empty_out: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::empty_out(/* native_actuals */ out, size);
}
Tensor Type::empty_like(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("empty_like: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::empty_like(/* native_actuals */ self);
}
Tensor Type::empty_like(const Tensor & self, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("empty_like: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::empty_like(/* native_actuals */ self, options);
}
Tensor Type::erf(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("erf: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::erf(/* native_actuals */ self);
}
Tensor Type::erfc(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("erfc: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::erfc(/* native_actuals */ self);
}
Tensor Type::exp(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("exp: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::exp(/* native_actuals */ self);
}
Tensor Type::expm1(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("expm1: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::expm1(/* native_actuals */ self);
}
Tensor Type::expand(const Tensor & self, IntArrayRef size, bool implicit) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("expand: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::expand(/* native_actuals */ self, size, implicit);
}
Tensor Type::expand_as(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("expand_as: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::expand_as(/* native_actuals */ self, other);
}
Tensor Type::eye(int64_t n, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::eye(/* native_actuals */ n, options);
}
Tensor Type::eye(int64_t n, int64_t m, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::eye(/* native_actuals */ n, m, options);
}
Tensor Type::flatten(const Tensor & self, int64_t start_dim, int64_t end_dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("flatten: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flatten(/* native_actuals */ self, start_dim, end_dim);
}
Tensor & Type::fill_(Tensor & self, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("fill_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fill_(/* native_actuals */ self, value);
}
Tensor & Type::fill_(Tensor & self, const Tensor & value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || value.is_named()) {
        AT_ERROR("fill_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fill_(/* native_actuals */ self, value);
}
Tensor Type::floor(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("floor: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor(/* native_actuals */ self);
}
Tensor Type::frac(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("frac: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frac(/* native_actuals */ self);
}
Tensor Type::full(IntArrayRef size, Scalar fill_value, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::full(/* native_actuals */ size, fill_value, options);
}
Tensor & Type::full_out(Tensor & out, IntArrayRef size, Scalar fill_value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("full_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::full_out(/* native_actuals */ out, size, fill_value);
}
Tensor Type::full_like(const Tensor & self, Scalar fill_value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("full_like: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::full_like(/* native_actuals */ self, fill_value);
}
Tensor Type::full_like(const Tensor & self, Scalar fill_value, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("full_like: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::full_like(/* native_actuals */ self, fill_value, options);
}
Tensor Type::grid_sampler(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || grid.is_named()) {
        AT_ERROR("grid_sampler: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::grid_sampler(/* native_actuals */ input, grid, interpolation_mode, padding_mode);
}
Tensor Type::hann_window(int64_t window_length, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::hann_window(/* native_actuals */ window_length, options);
}
Tensor Type::hann_window(int64_t window_length, bool periodic, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::hann_window(/* native_actuals */ window_length, periodic, options);
}
Tensor Type::hamming_window(int64_t window_length, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(/* native_actuals */ window_length, options);
}
Tensor Type::hamming_window(int64_t window_length, bool periodic, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(/* native_actuals */ window_length, periodic, options);
}
Tensor Type::hamming_window(int64_t window_length, bool periodic, double alpha, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(/* native_actuals */ window_length, periodic, alpha, options);
}
Tensor Type::hamming_window(int64_t window_length, bool periodic, double alpha, double beta, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(/* native_actuals */ window_length, periodic, alpha, beta, options);
}
Tensor Type::hinge_embedding_loss(const Tensor & self, const Tensor & target, double margin, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || target.is_named()) {
        AT_ERROR("hinge_embedding_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hinge_embedding_loss(/* native_actuals */ self, target, margin, reduction);
}
Tensor Type::group_norm(const Tensor & input, int64_t num_groups, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enabled) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("group_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::group_norm(/* native_actuals */ input, num_groups, weight, bias, eps, cudnn_enabled);
}
Tensor Type::fft(const Tensor & self, int64_t signal_ndim, bool normalized) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("fft: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fft(/* native_actuals */ self, signal_ndim, normalized);
}
Tensor Type::ifft(const Tensor & self, int64_t signal_ndim, bool normalized) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("ifft: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ifft(/* native_actuals */ self, signal_ndim, normalized);
}
Tensor Type::rfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("rfft: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rfft(/* native_actuals */ self, signal_ndim, normalized, onesided);
}
Tensor Type::irfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided, IntArrayRef signal_sizes) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("irfft: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::irfft(/* native_actuals */ self, signal_ndim, normalized, onesided, signal_sizes);
}
int64_t Type::_cufft_get_plan_cache_size(int64_t device_index) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    // DeviceGuard omitted
    return at::native::_cufft_get_plan_cache_size(/* native_actuals */ device_index);
}
int64_t Type::_cufft_get_plan_cache_max_size(int64_t device_index) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    // DeviceGuard omitted
    return at::native::_cufft_get_plan_cache_max_size(/* native_actuals */ device_index);
}
void Type::_cufft_set_plan_cache_max_size(int64_t device_index, int64_t max_size) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    // DeviceGuard omitted
     at::native::_cufft_set_plan_cache_max_size(/* native_actuals */ device_index, max_size);
}
void Type::_cufft_clear_plan_cache(int64_t device_index) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    // DeviceGuard omitted
     at::native::_cufft_clear_plan_cache(/* native_actuals */ device_index);
}
Tensor Type::index(const Tensor & self, TensorList indices) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || at::has_names(indices)) {
        AT_ERROR("index: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index(/* native_actuals */ self, indices);
}
Tensor & Type::index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named() || source.is_named()) {
        AT_ERROR("index_copy_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_copy_(/* native_actuals */ self, dim, index, source);
}
Tensor Type::index_copy(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named() || source.is_named()) {
        AT_ERROR("index_copy: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_copy(/* native_actuals */ self, dim, index, source);
}
Tensor & Type::index_put_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || values.is_named() || at::has_names(indices)) {
        AT_ERROR("index_put_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_put_(/* native_actuals */ self, indices, values, accumulate);
}
Tensor Type::index_put(const Tensor & self, TensorList indices, const Tensor & values, bool accumulate) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || values.is_named() || at::has_names(indices)) {
        AT_ERROR("index_put: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_put(/* native_actuals */ self, indices, values, accumulate);
}
Tensor & Type::_index_put_impl_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate, bool unsafe) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || values.is_named() || at::has_names(indices)) {
        AT_ERROR("_index_put_impl_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_index_put_impl_(/* native_actuals */ self, indices, values, accumulate, unsafe);
}
Tensor Type::instance_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named() || running_mean.is_named() || running_var.is_named()) {
        AT_ERROR("instance_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::instance_norm(/* native_actuals */ input, weight, bias, running_mean, running_var, use_input_stats, momentum, eps, cudnn_enabled);
}
Tensor Type::inverse(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("inverse: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::inverse(/* native_actuals */ self);
}
Tensor & Type::inverse_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("inverse_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::inverse_out(/* native_actuals */ out, self);
}
Tensor Type::isclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("isclose: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::isclose(/* native_actuals */ self, other, rtol, atol, equal_nan);
}
Tensor Type::isnan(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("isnan: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::isnan(/* native_actuals */ self);
}
bool Type::is_distributed(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("is_distributed: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::is_distributed(/* native_actuals */ self);
}
bool Type::is_floating_point(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("is_floating_point: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::is_floating_point(/* native_actuals */ self);
}
bool Type::is_complex(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("is_complex: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::is_complex(/* native_actuals */ self);
}
bool Type::is_nonzero(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("is_nonzero: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::is_nonzero(/* native_actuals */ self);
}
bool Type::is_same_size(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("is_same_size: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::is_same_size(/* native_actuals */ self, other);
}
bool Type::is_signed(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("is_signed: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::is_signed(/* native_actuals */ self);
}
Tensor Type::kl_div(const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || target.is_named()) {
        AT_ERROR("kl_div: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kl_div(/* native_actuals */ self, target, reduction);
}
std::tuple<Tensor,Tensor> Type::kthvalue(const Tensor & self, int64_t k, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("kthvalue: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kthvalue(/* native_actuals */ self, k, dim, keepdim);
}
Tensor Type::layer_norm(const Tensor & input, IntArrayRef normalized_shape, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enable) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("layer_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::layer_norm(/* native_actuals */ input, normalized_shape, weight, bias, eps, cudnn_enable);
}
Tensor Type::linear(const Tensor & input, const Tensor & weight, const Tensor & bias) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("linear: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::linear(/* native_actuals */ input, weight, bias);
}
Tensor Type::fbgemm_linear_int8_weight(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || packed.is_named() || col_offsets.is_named() || bias.is_named()) {
        AT_ERROR("fbgemm_linear_int8_weight: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_int8_weight(/* native_actuals */ input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
}
std::tuple<Tensor,Tensor,double,int64_t> Type::fbgemm_linear_quantize_weight(const Tensor & input) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named()) {
        AT_ERROR("fbgemm_linear_quantize_weight: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_quantize_weight(/* native_actuals */ input);
}
Tensor Type::fbgemm_pack_quantized_matrix(const Tensor & input, int64_t K, int64_t N) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named()) {
        AT_ERROR("fbgemm_pack_quantized_matrix: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_pack_quantized_matrix(/* native_actuals */ input, K, N);
}
bool Type::fbgemm_is_cpu_supported() const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    // DeviceGuard omitted
    return at::native::fbgemm_is_cpu_supported(/* native_actuals */ );
}
Tensor Type::linspace(Scalar start, Scalar end, int64_t steps, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::linspace(/* native_actuals */ start, end, steps, options);
}
Tensor Type::log(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("log: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log(/* native_actuals */ self);
}
Tensor Type::log10(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("log10: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log10(/* native_actuals */ self);
}
Tensor Type::log1p(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("log1p: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log1p(/* native_actuals */ self);
}
Tensor Type::log2(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("log2: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log2(/* native_actuals */ self);
}
Tensor Type::logdet(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("logdet: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logdet(/* native_actuals */ self);
}
Tensor Type::logspace(Scalar start, Scalar end, int64_t steps, double base, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::logspace(/* native_actuals */ start, end, steps, base, options);
}
Tensor Type::log_softmax(const Tensor & self, int64_t dim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("log_softmax: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax(/* native_actuals */ self, dim, dtype);
}
Tensor Type::log_softmax(const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("log_softmax: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax(/* native_actuals */ self, dim);
}
Tensor Type::logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("logsumexp: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logsumexp(/* native_actuals */ self, dim, keepdim);
}
Tensor & Type::logsumexp_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("logsumexp_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logsumexp_out(/* native_actuals */ out, self, dim, keepdim);
}
Tensor Type::margin_ranking_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input1.is_named() || input2.is_named() || target.is_named()) {
        AT_ERROR("margin_ranking_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input1));
    return at::native::margin_ranking_loss(/* native_actuals */ input1, input2, target, margin, reduction);
}
Tensor Type::matmul(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("matmul: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matmul(/* native_actuals */ self, other);
}
Tensor & Type::matmul_out(Tensor & out, const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("matmul_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matmul_out(/* native_actuals */ out, self, other);
}
Tensor Type::matrix_rank(const Tensor & self, double tol, bool symmetric) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("matrix_rank: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matrix_rank(/* native_actuals */ self, tol, symmetric);
}
Tensor Type::matrix_rank(const Tensor & self, bool symmetric) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("matrix_rank: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matrix_rank(/* native_actuals */ self, symmetric);
}
Tensor Type::matrix_power(const Tensor & self, int64_t n) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("matrix_power: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matrix_power(/* native_actuals */ self, n);
}
std::tuple<Tensor,Tensor> Type::max(const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("max: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max(/* native_actuals */ self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> Type::max_out(Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (max.is_named() || max_values.is_named() || self.is_named()) {
        AT_ERROR("max_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_out(/* native_actuals */ max, max_values, self, dim, keepdim);
}
Tensor Type::max_values(const Tensor & self, IntArrayRef dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("max_values: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_values(/* native_actuals */ self, dim, keepdim);
}
std::tuple<Tensor,Tensor> Type::max_pool1d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("max_pool1d_with_indices: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool1d_with_indices(/* native_actuals */ self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor Type::max_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("max_pool1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool1d(/* native_actuals */ self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor Type::max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("max_pool2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d(/* native_actuals */ self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor Type::max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("max_pool3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d(/* native_actuals */ self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor Type::mean(const Tensor & self, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("mean: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean(/* native_actuals */ self, dtype);
}
Tensor Type::mean(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("mean: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean(/* native_actuals */ self);
}
Tensor Type::mean(const Tensor & self, IntArrayRef dim, bool keepdim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("mean: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean(/* native_actuals */ self, dim, keepdim, dtype);
}
Tensor Type::mean(const Tensor & self, IntArrayRef dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("mean: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean(/* native_actuals */ self, dim, keepdim);
}
Tensor Type::mean(const Tensor & self, IntArrayRef dim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("mean: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean(/* native_actuals */ self, dim, dtype);
}
Tensor & Type::mean_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("mean_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean_out(/* native_actuals */ out, self, dim, keepdim, dtype);
}
Tensor & Type::mean_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("mean_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean_out(/* native_actuals */ out, self, dim, keepdim);
}
Tensor & Type::mean_out(Tensor & out, const Tensor & self, IntArrayRef dim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("mean_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean_out(/* native_actuals */ out, self, dim, dtype);
}
std::tuple<Tensor,Tensor> Type::median(const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("median: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median(/* native_actuals */ self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> Type::median_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (values.is_named() || indices.is_named() || self.is_named()) {
        AT_ERROR("median_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median_out(/* native_actuals */ values, indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> Type::min(const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("min: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min(/* native_actuals */ self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> Type::min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (min.is_named() || min_indices.is_named() || self.is_named()) {
        AT_ERROR("min_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_out(/* native_actuals */ min, min_indices, self, dim, keepdim);
}
Tensor Type::min_values(const Tensor & self, IntArrayRef dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("min_values: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_values(/* native_actuals */ self, dim, keepdim);
}
Tensor Type::mkldnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("mkldnn_convolution: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mkldnn_convolution(/* native_actuals */ self, weight, bias, padding, stride, dilation, groups);
}
Tensor Type::mkldnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || weight.is_named()) {
        AT_ERROR("mkldnn_convolution_backward_input: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::mkldnn_convolution_backward_input(/* native_actuals */ self_size, grad_output, weight, padding, stride, dilation, groups, bias_defined);
}
std::tuple<Tensor,Tensor> Type::mkldnn_convolution_backward_weights(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named()) {
        AT_ERROR("mkldnn_convolution_backward_weights: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mkldnn_convolution_backward_weights(/* native_actuals */ weight_size, grad_output, self, padding, stride, dilation, groups, bias_defined);
}
std::tuple<Tensor,Tensor,Tensor> Type::mkldnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || grad_output.is_named() || weight.is_named()) {
        AT_ERROR("mkldnn_convolution_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mkldnn_convolution_backward(/* native_actuals */ self, grad_output, weight, padding, stride, dilation, groups, output_mask);
}
Tensor Type::_sparse_mm(const Tensor & sparse, const Tensor & dense) const {
#ifdef NAMEDTENSOR_ENABLED
    if (sparse.is_named() || dense.is_named()) {
        AT_ERROR("_sparse_mm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(sparse));
    return at::native::_sparse_mm(/* native_actuals */ sparse, dense);
}
std::tuple<Tensor,Tensor> Type::mode(const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("mode: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mode(/* native_actuals */ self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> Type::mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (values.is_named() || indices.is_named() || self.is_named()) {
        AT_ERROR("mode_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mode_out(/* native_actuals */ values, indices, self, dim, keepdim);
}
Tensor Type::mul(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("mul: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul(/* native_actuals */ self, other);
}
Tensor & Type::mul_(Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("mul_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_(/* native_actuals */ self, other);
}
Tensor & Type::mul_out(Tensor & out, const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("mul_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_out(/* native_actuals */ out, self, other);
}
Tensor Type::mul(const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("mul: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul(/* native_actuals */ self, other);
}
Tensor & Type::mul_(Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("mul_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_(/* native_actuals */ self, other);
}
Tensor Type::mvlgamma(const Tensor & self, int64_t p) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("mvlgamma: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mvlgamma(/* native_actuals */ self, p);
}
Tensor & Type::mvlgamma_(Tensor & self, int64_t p) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("mvlgamma_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mvlgamma_(/* native_actuals */ self, p);
}
Tensor Type::narrow(const Tensor & self, int64_t dim, int64_t start, int64_t length) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("narrow: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::narrow(/* native_actuals */ self, dim, start, length);
}
bool Type::_nnpack_available() const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    // DeviceGuard omitted
    return at::native::_nnpack_available(/* native_actuals */ );
}
Tensor Type::_nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("_nnpack_spatial_convolution: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution(/* native_actuals */ input, weight, bias, padding);
}
std::tuple<Tensor,Tensor,Tensor> Type::_nnpack_spatial_convolution_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, std::array<bool,3> output_mask) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || grad_output.is_named() || weight.is_named()) {
        AT_ERROR("_nnpack_spatial_convolution_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution_backward(/* native_actuals */ input, grad_output, weight, padding, output_mask);
}
Tensor Type::_nnpack_spatial_convolution_backward_input(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || grad_output.is_named() || weight.is_named()) {
        AT_ERROR("_nnpack_spatial_convolution_backward_input: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution_backward_input(/* native_actuals */ input, grad_output, weight, padding);
}
Tensor Type::_nnpack_spatial_convolution_backward_weight(const Tensor & input, IntArrayRef weightsize, const Tensor & grad_output, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || grad_output.is_named()) {
        AT_ERROR("_nnpack_spatial_convolution_backward_weight: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution_backward_weight(/* native_actuals */ input, weightsize, grad_output, padding);
}
Tensor Type::ones(IntArrayRef size, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::ones(/* native_actuals */ size, options);
}
Tensor & Type::ones_out(Tensor & out, IntArrayRef size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("ones_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::ones_out(/* native_actuals */ out, size);
}
Tensor Type::ones_like(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("ones_like: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ones_like(/* native_actuals */ self);
}
Tensor Type::ones_like(const Tensor & self, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("ones_like: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::ones_like(/* native_actuals */ self, options);
}
Tensor Type::pairwise_distance(const Tensor & x1, const Tensor & x2, double p, double eps, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (x1.is_named() || x2.is_named()) {
        AT_ERROR("pairwise_distance: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::pairwise_distance(/* native_actuals */ x1, x2, p, eps, keepdim);
}
Tensor Type::cdist(const Tensor & x1, const Tensor & x2, double p) const {
#ifdef NAMEDTENSOR_ENABLED
    if (x1.is_named() || x2.is_named()) {
        AT_ERROR("cdist: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::cdist(/* native_actuals */ x1, x2, p);
}
Tensor Type::_cdist_backward(const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad.is_named() || x1.is_named() || x2.is_named() || cdist.is_named()) {
        AT_ERROR("_cdist_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_cdist_backward(/* native_actuals */ grad, x1, x2, p, cdist);
}
Tensor Type::pdist(const Tensor & self, double p) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("pdist: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pdist(/* native_actuals */ self, p);
}
Tensor Type::_pdist_forward(const Tensor & self, double p) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_pdist_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_pdist_forward(/* native_actuals */ self, p);
}
Tensor Type::_pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad.is_named() || self.is_named() || pdist.is_named()) {
        AT_ERROR("_pdist_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_pdist_backward(/* native_actuals */ grad, self, p, pdist);
}
Tensor Type::cosine_similarity(const Tensor & x1, const Tensor & x2, int64_t dim, double eps) const {
#ifdef NAMEDTENSOR_ENABLED
    if (x1.is_named() || x2.is_named()) {
        AT_ERROR("cosine_similarity: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::cosine_similarity(/* native_actuals */ x1, x2, dim, eps);
}
Tensor Type::permute(const Tensor & self, IntArrayRef dims) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("permute: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::permute(/* native_actuals */ self, dims);
}
Tensor Type::numpy_T(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("numpy_T: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::numpy_T(/* native_actuals */ self);
}
Tensor Type::pixel_shuffle(const Tensor & self, int64_t upscale_factor) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("pixel_shuffle: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pixel_shuffle(/* native_actuals */ self, upscale_factor);
}
Tensor Type::pin_memory(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("pin_memory: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pin_memory(/* native_actuals */ self);
}
Tensor Type::pinverse(const Tensor & self, double rcond) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("pinverse: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pinverse(/* native_actuals */ self, rcond);
}
Tensor Type::poisson_nll_loss(const Tensor & input, const Tensor & target, bool log_input, bool full, double eps, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || target.is_named()) {
        AT_ERROR("poisson_nll_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::poisson_nll_loss(/* native_actuals */ input, target, log_input, full, eps, reduction);
}
Tensor Type::scalar_tensor(Scalar s, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::scalar_tensor(/* native_actuals */ s, options);
}
Tensor Type::rand(IntArrayRef size, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::rand(/* native_actuals */ size, options);
}
Tensor Type::rand(IntArrayRef size, Generator * generator, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::rand(/* native_actuals */ size, generator, options);
}
Tensor & Type::rand_out(Tensor & out, IntArrayRef size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("rand_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::rand_out(/* native_actuals */ out, size);
}
Tensor & Type::rand_out(Tensor & out, IntArrayRef size, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("rand_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::rand_out(/* native_actuals */ out, size, generator);
}
Tensor Type::rand_like(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("rand_like: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rand_like(/* native_actuals */ self);
}
Tensor Type::rand_like(const Tensor & self, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("rand_like: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::rand_like(/* native_actuals */ self, options);
}
Tensor Type::randint(int64_t high, IntArrayRef size, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randint(/* native_actuals */ high, size, options);
}
Tensor Type::randint(int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randint(/* native_actuals */ high, size, generator, options);
}
Tensor Type::randint(int64_t low, int64_t high, IntArrayRef size, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randint(/* native_actuals */ low, high, size, options);
}
Tensor Type::randint(int64_t low, int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randint(/* native_actuals */ low, high, size, generator, options);
}
Tensor & Type::randint_out(Tensor & out, int64_t high, IntArrayRef size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("randint_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(/* native_actuals */ out, high, size);
}
Tensor & Type::randint_out(Tensor & out, int64_t high, IntArrayRef size, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("randint_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(/* native_actuals */ out, high, size, generator);
}
Tensor & Type::randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("randint_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(/* native_actuals */ out, low, high, size);
}
Tensor & Type::randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("randint_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(/* native_actuals */ out, low, high, size, generator);
}
Tensor Type::randint_like(const Tensor & self, int64_t high) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("randint_like: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::randint_like(/* native_actuals */ self, high);
}
Tensor Type::randint_like(const Tensor & self, int64_t low, int64_t high) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("randint_like: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::randint_like(/* native_actuals */ self, low, high);
}
Tensor Type::randint_like(const Tensor & self, int64_t high, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("randint_like: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randint_like(/* native_actuals */ self, high, options);
}
Tensor Type::randint_like(const Tensor & self, int64_t low, int64_t high, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("randint_like: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randint_like(/* native_actuals */ self, low, high, options);
}
Tensor Type::randn(IntArrayRef size, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randn(/* native_actuals */ size, options);
}
Tensor Type::randn(IntArrayRef size, Generator * generator, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randn(/* native_actuals */ size, generator, options);
}
Tensor & Type::randn_out(Tensor & out, IntArrayRef size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("randn_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randn_out(/* native_actuals */ out, size);
}
Tensor & Type::randn_out(Tensor & out, IntArrayRef size, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("randn_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randn_out(/* native_actuals */ out, size, generator);
}
Tensor Type::randn_like(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("randn_like: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::randn_like(/* native_actuals */ self);
}
Tensor Type::randn_like(const Tensor & self, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("randn_like: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randn_like(/* native_actuals */ self, options);
}
Tensor Type::randperm(int64_t n, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randperm(/* native_actuals */ n, options);
}
Tensor Type::randperm(int64_t n, Generator * generator, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::randperm(/* native_actuals */ n, generator, options);
}
Tensor & Type::randperm_out(Tensor & out, int64_t n) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("randperm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randperm_out(/* native_actuals */ out, n);
}
Tensor Type::range(Scalar start, Scalar end, Scalar step, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::range(/* native_actuals */ start, end, step, options);
}
Tensor Type::range(Scalar start, Scalar end, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::range(/* native_actuals */ start, end, options);
}
Tensor Type::reciprocal(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("reciprocal: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reciprocal(/* native_actuals */ self);
}
Tensor Type::neg(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("neg: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::neg(/* native_actuals */ self);
}
Tensor Type::repeat(const Tensor & self, IntArrayRef repeats) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("repeat: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::repeat(/* native_actuals */ self, repeats);
}
Tensor Type::repeat_interleave(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || repeats.is_named()) {
        AT_ERROR("repeat_interleave: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::repeat_interleave(/* native_actuals */ self, repeats, dim);
}
Tensor Type::repeat_interleave(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("repeat_interleave: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::repeat_interleave(/* native_actuals */ self, repeats, dim);
}
Tensor Type::reshape(const Tensor & self, IntArrayRef shape) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("reshape: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::reshape(/* native_actuals */ self, shape);
}
Tensor Type::reshape_as(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("reshape_as: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::reshape_as(/* native_actuals */ self, other);
}
Tensor Type::round(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("round: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::round(/* native_actuals */ self);
}
Tensor Type::rrelu(const Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("rrelu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rrelu(/* native_actuals */ self, lower, upper, training, generator);
}
Tensor & Type::rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("rrelu_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rrelu_(/* native_actuals */ self, lower, upper, training, generator);
}
Tensor Type::rsqrt(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("rsqrt: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsqrt(/* native_actuals */ self);
}
Tensor Type::select(const Tensor & self, int64_t dim, int64_t index) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("select: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::select(/* native_actuals */ self, dim, index);
}
Tensor Type::selu(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("selu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::selu(/* native_actuals */ self);
}
Tensor & Type::selu_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("selu_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::selu_(/* native_actuals */ self);
}
Tensor Type::celu(const Tensor & self, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("celu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::celu(/* native_actuals */ self, alpha);
}
Tensor & Type::celu_(Tensor & self, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("celu_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::celu_(/* native_actuals */ self, alpha);
}
Tensor Type::sin(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sin: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sin(/* native_actuals */ self);
}
Tensor Type::sinh(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sinh: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sinh(/* native_actuals */ self);
}
Tensor Type::detach(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("detach: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::detach(/* native_actuals */ self);
}
Tensor & Type::detach_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("detach_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::detach_(/* native_actuals */ self);
}
int64_t Type::size(const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("size: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::size(/* native_actuals */ self, dim);
}
Tensor Type::slice(const Tensor & self, int64_t dim, int64_t start, int64_t end, int64_t step) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("slice: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::slice(/* native_actuals */ self, dim, start, end, step);
}
std::tuple<Tensor,Tensor> Type::slogdet(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("slogdet: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slogdet(/* native_actuals */ self);
}
Tensor Type::smm(const Tensor & self, const Tensor & mat2) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mat2.is_named()) {
        AT_ERROR("smm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::smm(/* native_actuals */ self, mat2);
}
Tensor Type::softmax(const Tensor & self, int64_t dim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("softmax: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax(/* native_actuals */ self, dim, dtype);
}
Tensor Type::softmax(const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("softmax: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax(/* native_actuals */ self, dim);
}
std::vector<Tensor> Type::split(const Tensor & self, int64_t split_size, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("split: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::split(/* native_actuals */ self, split_size, dim);
}
std::vector<Tensor> Type::split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("split_with_sizes: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::split_with_sizes(/* native_actuals */ self, split_sizes, dim);
}
Tensor Type::squeeze(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("squeeze: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::squeeze(/* native_actuals */ self);
}
Tensor Type::squeeze(const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("squeeze: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::squeeze(/* native_actuals */ self, dim);
}
Tensor & Type::squeeze_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("squeeze_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::squeeze_(/* native_actuals */ self);
}
Tensor & Type::squeeze_(Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("squeeze_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::squeeze_(/* native_actuals */ self, dim);
}
Tensor Type::sspaddmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mat1.is_named() || mat2.is_named()) {
        AT_ERROR("sspaddmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sspaddmm(/* native_actuals */ self, mat1, mat2, beta, alpha);
}
Tensor Type::stack(TensorList tensors, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (at::has_names(tensors)) {
        AT_ERROR("stack: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::stack(/* native_actuals */ tensors, dim);
}
Tensor & Type::stack_out(Tensor & out, TensorList tensors, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || at::has_names(tensors)) {
        AT_ERROR("stack_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::stack_out(/* native_actuals */ out, tensors, dim);
}
Tensor Type::stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const Tensor & window, bool normalized, bool onesided) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || window.is_named()) {
        AT_ERROR("stft: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::stft(/* native_actuals */ self, n_fft, hop_length, win_length, window, normalized, onesided);
}
int64_t Type::stride(const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("stride: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::stride(/* native_actuals */ self, dim);
}
Tensor Type::sum(const Tensor & self, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(/* native_actuals */ self, dtype);
}
Tensor Type::sum(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(/* native_actuals */ self);
}
Tensor Type::sum(const Tensor & self, IntArrayRef dim, bool keepdim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(/* native_actuals */ self, dim, keepdim, dtype);
}
Tensor Type::sum(const Tensor & self, IntArrayRef dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(/* native_actuals */ self, dim, keepdim);
}
Tensor Type::sum(const Tensor & self, IntArrayRef dim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(/* native_actuals */ self, dim, dtype);
}
Tensor & Type::sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("sum_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum_out(/* native_actuals */ out, self, dim, keepdim, dtype);
}
Tensor & Type::sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("sum_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum_out(/* native_actuals */ out, self, dim, keepdim);
}
Tensor & Type::sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("sum_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum_out(/* native_actuals */ out, self, dim, dtype);
}
Tensor Type::sum_to_size(const Tensor & self, IntArrayRef size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sum_to_size: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::sum_to_size(/* native_actuals */ self, size);
}
Tensor Type::sqrt(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sqrt: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sqrt(/* native_actuals */ self);
}
Tensor Type::std(const Tensor & self, bool unbiased) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("std: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std(/* native_actuals */ self, unbiased);
}
Tensor Type::std(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("std: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std(/* native_actuals */ self, dim, unbiased, keepdim);
}
std::tuple<Tensor,Tensor> Type::std_mean(const Tensor & self, bool unbiased) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("std_mean: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_mean(/* native_actuals */ self, unbiased);
}
std::tuple<Tensor,Tensor> Type::std_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("std_mean: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_mean(/* native_actuals */ self, dim, unbiased, keepdim);
}
Tensor & Type::std_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("std_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_out(/* native_actuals */ out, self, dim, unbiased, keepdim);
}
Tensor Type::prod(const Tensor & self, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("prod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(/* native_actuals */ self, dtype);
}
Tensor Type::prod(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("prod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(/* native_actuals */ self);
}
Tensor Type::prod(const Tensor & self, int64_t dim, bool keepdim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("prod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(/* native_actuals */ self, dim, keepdim, dtype);
}
Tensor Type::prod(const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("prod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(/* native_actuals */ self, dim, keepdim);
}
Tensor Type::prod(const Tensor & self, int64_t dim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("prod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(/* native_actuals */ self, dim, dtype);
}
Tensor & Type::prod_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("prod_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod_out(/* native_actuals */ out, self, dim, keepdim, dtype);
}
Tensor & Type::prod_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("prod_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod_out(/* native_actuals */ out, self, dim, keepdim);
}
Tensor & Type::prod_out(Tensor & out, const Tensor & self, int64_t dim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("prod_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod_out(/* native_actuals */ out, self, dim, dtype);
}
Tensor Type::t(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("t: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::t(/* native_actuals */ self);
}
Tensor & Type::t_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("t_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::t_(/* native_actuals */ self);
}
Tensor Type::tan(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("tan: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tan(/* native_actuals */ self);
}
Tensor Type::tanh(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("tanh: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tanh(/* native_actuals */ self);
}
Tensor Type::tensordot(const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("tensordot: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tensordot(/* native_actuals */ self, other, dims_self, dims_other);
}
Tensor Type::threshold(const Tensor & self, Scalar threshold, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("threshold: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::threshold(/* native_actuals */ self, threshold, value);
}
Tensor & Type::threshold_(Tensor & self, Scalar threshold, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("threshold_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::threshold_(/* native_actuals */ self, threshold, value);
}
Tensor & Type::threshold_out(Tensor & out, const Tensor & self, Scalar threshold, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("threshold_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::threshold_out(/* native_actuals */ out, self, threshold, value);
}
Tensor Type::threshold_backward(const Tensor & grad_output, const Tensor & self, Scalar threshold) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named()) {
        AT_ERROR("threshold_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::threshold_backward(/* native_actuals */ grad_output, self, threshold);
}
Tensor Type::transpose(const Tensor & self, int64_t dim0, int64_t dim1) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("transpose: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::transpose(/* native_actuals */ self, dim0, dim1);
}
Tensor & Type::transpose_(Tensor & self, int64_t dim0, int64_t dim1) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("transpose_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::transpose_(/* native_actuals */ self, dim0, dim1);
}
Tensor Type::one_hot(const Tensor & self, int64_t num_classes) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("one_hot: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::one_hot(/* native_actuals */ self, num_classes);
}
Tensor Type::rot90(const Tensor & self, int64_t k, IntArrayRef dims) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("rot90: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rot90(/* native_actuals */ self, k, dims);
}
Tensor Type::_trilinear(const Tensor & i1, const Tensor & i2, const Tensor & i3, IntArrayRef expand1, IntArrayRef expand2, IntArrayRef expand3, IntArrayRef sumdim, int64_t unroll_dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (i1.is_named() || i2.is_named() || i3.is_named()) {
        AT_ERROR("_trilinear: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(i1));
    return at::native::_trilinear(/* native_actuals */ i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim);
}
Tensor Type::triplet_margin_loss(const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (anchor.is_named() || positive.is_named() || negative.is_named()) {
        AT_ERROR("triplet_margin_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(anchor));
    return at::native::triplet_margin_loss(/* native_actuals */ anchor, positive, negative, margin, p, eps, swap, reduction);
}
Tensor Type::trunc(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("trunc: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::trunc(/* native_actuals */ self);
}
Tensor Type::type_as(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("type_as: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::type_as(/* native_actuals */ self, other);
}
Tensor Type::_unsafe_view(const Tensor & self, IntArrayRef size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_unsafe_view: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_unsafe_view(/* native_actuals */ self, size);
}
Tensor Type::unsqueeze(const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("unsqueeze: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::unsqueeze(/* native_actuals */ self, dim);
}
Tensor & Type::unsqueeze_(Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("unsqueeze_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::unsqueeze_(/* native_actuals */ self, dim);
}
Tensor Type::var(const Tensor & self, bool unbiased) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("var: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var(/* native_actuals */ self, unbiased);
}
Tensor Type::var(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("var: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var(/* native_actuals */ self, dim, unbiased, keepdim);
}
Tensor & Type::var_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("var_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_out(/* native_actuals */ out, self, dim, unbiased, keepdim);
}
std::tuple<Tensor,Tensor> Type::var_mean(const Tensor & self, bool unbiased) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("var_mean: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_mean(/* native_actuals */ self, unbiased);
}
std::tuple<Tensor,Tensor> Type::var_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("var_mean: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_mean(/* native_actuals */ self, dim, unbiased, keepdim);
}
Tensor Type::view_as(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("view_as: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::view_as(/* native_actuals */ self, other);
}
Tensor Type::where(const Tensor & condition, const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (condition.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("where: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::where(/* native_actuals */ condition, self, other);
}
Tensor Type::norm_except_dim(const Tensor & v, int64_t pow, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (v.is_named()) {
        AT_ERROR("norm_except_dim: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(v));
    return at::native::norm_except_dim(/* native_actuals */ v, pow, dim);
}
Tensor Type::_weight_norm(const Tensor & v, const Tensor & g, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (v.is_named() || g.is_named()) {
        AT_ERROR("_weight_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(v));
    return at::native::_weight_norm(/* native_actuals */ v, g, dim);
}
std::tuple<Tensor,Tensor> Type::_weight_norm_differentiable_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_w.is_named() || saved_v.is_named() || saved_g.is_named() || saved_norms.is_named()) {
        AT_ERROR("_weight_norm_differentiable_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_w));
    return at::native::_weight_norm_differentiable_backward(/* native_actuals */ grad_w, saved_v, saved_g, saved_norms, dim);
}
Tensor Type::zeros(IntArrayRef size, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::zeros(/* native_actuals */ size, options);
}
Tensor & Type::zeros_out(Tensor & out, IntArrayRef size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("zeros_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::zeros_out(/* native_actuals */ out, size);
}
Tensor Type::zeros_like(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("zeros_like: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::zeros_like(/* native_actuals */ self);
}
Tensor Type::zeros_like(const Tensor & self, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("zeros_like: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::zeros_like(/* native_actuals */ self, options);
}
Tensor Type::_sparse_sum(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_sparse_sum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(/* native_actuals */ self);
}
Tensor Type::_sparse_sum(const Tensor & self, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_sparse_sum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(/* native_actuals */ self, dtype);
}
Tensor Type::_sparse_sum(const Tensor & self, IntArrayRef dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_sparse_sum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(/* native_actuals */ self, dim);
}
Tensor Type::_sparse_sum(const Tensor & self, IntArrayRef dim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_sparse_sum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(/* native_actuals */ self, dim, dtype);
}
Tensor Type::norm(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(/* native_actuals */ self, p, dtype);
}
Tensor Type::norm(const Tensor & self, Scalar p) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(/* native_actuals */ self, p);
}
Tensor Type::norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(/* native_actuals */ self, p, dim, keepdim, dtype);
}
Tensor Type::norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(/* native_actuals */ self, p, dim, keepdim);
}
Tensor & Type::norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("norm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_out(/* native_actuals */ out, self, p, dim, keepdim, dtype);
}
Tensor & Type::norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("norm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_out(/* native_actuals */ out, self, p, dim, keepdim);
}
Tensor Type::frobenius_norm(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("frobenius_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frobenius_norm(/* native_actuals */ self);
}
Tensor Type::frobenius_norm(const Tensor & self, IntArrayRef dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("frobenius_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frobenius_norm(/* native_actuals */ self, dim, keepdim);
}
Tensor & Type::frobenius_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("frobenius_norm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frobenius_norm_out(/* native_actuals */ out, self, dim, keepdim);
}
Tensor Type::nuclear_norm(const Tensor & self, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("nuclear_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm(/* native_actuals */ self, keepdim);
}
Tensor & Type::nuclear_norm_out(Tensor & out, const Tensor & self, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("nuclear_norm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm_out(/* native_actuals */ out, self, keepdim);
}
Tensor Type::nuclear_norm(const Tensor & self, IntArrayRef dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("nuclear_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm(/* native_actuals */ self, dim, keepdim);
}
Tensor & Type::nuclear_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("nuclear_norm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm_out(/* native_actuals */ out, self, dim, keepdim);
}
Tensor & Type::sub_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("sub_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub_out(/* native_actuals */ out, self, other, alpha);
}
Tensor Type::sub(const Tensor & self, const Tensor & other, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("sub: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub(/* native_actuals */ self, other, alpha);
}
Tensor & Type::sub_(Tensor & self, const Tensor & other, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("sub_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub_(/* native_actuals */ self, other, alpha);
}
Tensor Type::sub(const Tensor & self, Scalar other, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sub: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub(/* native_actuals */ self, other, alpha);
}
Tensor & Type::sub_(Tensor & self, Scalar other, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sub_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub_(/* native_actuals */ self, other, alpha);
}
Tensor Type::rsub(const Tensor & self, const Tensor & other, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("rsub: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsub(/* native_actuals */ self, other, alpha);
}
Tensor Type::rsub(const Tensor & self, Scalar other, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("rsub: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsub(/* native_actuals */ self, other, alpha);
}
Tensor Type::_sparse_addmm(const Tensor & self, const Tensor & sparse, const Tensor & dense, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || sparse.is_named() || dense.is_named()) {
        AT_ERROR("_sparse_addmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_addmm(/* native_actuals */ self, sparse, dense, beta, alpha);
}
Tensor & Type::addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || mat1.is_named() || mat2.is_named()) {
        AT_ERROR("addmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addmm_out(/* native_actuals */ out, self, mat1, mat2, beta, alpha);
}
Tensor Type::addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mat1.is_named() || mat2.is_named()) {
        AT_ERROR("addmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addmm(/* native_actuals */ self, mat1, mat2, beta, alpha);
}
Tensor & Type::addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mat1.is_named() || mat2.is_named()) {
        AT_ERROR("addmm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addmm_(/* native_actuals */ self, mat1, mat2, beta, alpha);
}
Tensor Type::sparse_coo_tensor(IntArrayRef size, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::sparse_coo_tensor(/* native_actuals */ size, options);
}
Tensor Type::sparse_coo_tensor(const Tensor & indices, const Tensor & values, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED
    if (indices.is_named() || values.is_named()) {
        AT_ERROR("sparse_coo_tensor: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::sparse_coo_tensor(/* native_actuals */ indices, values, options);
}
Tensor Type::sparse_coo_tensor(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED
    if (indices.is_named() || values.is_named()) {
        AT_ERROR("sparse_coo_tensor: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::sparse_coo_tensor(/* native_actuals */ indices, values, size, options);
}
Tensor Type::_sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED
    if (indices.is_named() || values.is_named()) {
        AT_ERROR("_sparse_coo_tensor_unsafe: no named inference rule implemented.");
    }
#endif
    const DeviceGuard device_guard(options.device());
    return at::native::_sparse_coo_tensor_unsafe(/* native_actuals */ indices, values, size, options);
}
Tensor Type::to_dense_backward(const Tensor & grad, const Tensor & input) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad.is_named() || input.is_named()) {
        AT_ERROR("to_dense_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::to_dense_backward(/* native_actuals */ grad, input);
}
int64_t Type::_dimI(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_dimI: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::sparse_dim_sparse(/* native_actuals */ self);
}
int64_t Type::_dimV(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_dimV: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::dense_dim_sparse(/* native_actuals */ self);
}
int64_t Type::numel(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("numel: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::numel(/* native_actuals */ self);
}
std::vector<Tensor> Type::unbind(const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("unbind: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unbind(/* native_actuals */ self, dim);
}
Tensor Type::to_mkldnn_backward(const Tensor & grad, const Tensor & input) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad.is_named() || input.is_named()) {
        AT_ERROR("to_mkldnn_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::to_mkldnn_backward(/* native_actuals */ grad, input);
}
Tensor Type::to(const Tensor & self, const TensorOptions & options, bool non_blocking, bool copy) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("to: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::to(/* native_actuals */ self, options, non_blocking, copy);
}
Tensor Type::to(const Tensor & self, Device device, ScalarType dtype, bool non_blocking, bool copy) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("to: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::to(/* native_actuals */ self, device, dtype, non_blocking, copy);
}
Tensor Type::to(const Tensor & self, ScalarType dtype, bool non_blocking, bool copy) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("to: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::to(/* native_actuals */ self, dtype, non_blocking, copy);
}
Tensor Type::to(const Tensor & self, const Tensor & other, bool non_blocking, bool copy) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("to: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::to(/* native_actuals */ self, other, non_blocking, copy);
}
std::vector<Tensor> Type::meshgrid(TensorList tensors) const {
#ifdef NAMEDTENSOR_ENABLED
    if (at::has_names(tensors)) {
        AT_ERROR("meshgrid: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::meshgrid(/* native_actuals */ tensors);
}
Tensor Type::cartesian_prod(TensorList tensors) const {
#ifdef NAMEDTENSOR_ENABLED
    if (at::has_names(tensors)) {
        AT_ERROR("cartesian_prod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::cartesian_prod(/* native_actuals */ tensors);
}
Tensor Type::combinations(const Tensor & self, int64_t r, bool with_replacement) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("combinations: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::combinations(/* native_actuals */ self, r, with_replacement);
}
Scalar Type::item(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("item: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::item(/* native_actuals */ self);
}
std::tuple<Tensor,Tensor,Tensor> Type::lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || at::has_names(hx) || at::has_names(params)) {
        AT_ERROR("lstm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::lstm(/* native_actuals */ input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor,Tensor> Type::lstm(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) const {
#ifdef NAMEDTENSOR_ENABLED
    if (data.is_named() || batch_sizes.is_named() || at::has_names(hx) || at::has_names(params)) {
        AT_ERROR("lstm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::lstm(/* native_actuals */ data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> Type::gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || hx.is_named() || at::has_names(params)) {
        AT_ERROR("gru: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::gru(/* native_actuals */ input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> Type::gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) const {
#ifdef NAMEDTENSOR_ENABLED
    if (data.is_named() || batch_sizes.is_named() || hx.is_named() || at::has_names(params)) {
        AT_ERROR("gru: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::gru(/* native_actuals */ data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> Type::rnn_tanh(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || hx.is_named() || at::has_names(params)) {
        AT_ERROR("rnn_tanh: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_tanh(/* native_actuals */ input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> Type::rnn_tanh(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) const {
#ifdef NAMEDTENSOR_ENABLED
    if (data.is_named() || batch_sizes.is_named() || hx.is_named() || at::has_names(params)) {
        AT_ERROR("rnn_tanh: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::rnn_tanh(/* native_actuals */ data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> Type::rnn_relu(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || hx.is_named() || at::has_names(params)) {
        AT_ERROR("rnn_relu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_relu(/* native_actuals */ input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> Type::rnn_relu(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) const {
#ifdef NAMEDTENSOR_ENABLED
    if (data.is_named() || batch_sizes.is_named() || hx.is_named() || at::has_names(params)) {
        AT_ERROR("rnn_relu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::rnn_relu(/* native_actuals */ data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> Type::lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || w_ih.is_named() || w_hh.is_named() || b_ih.is_named() || b_hh.is_named() || at::has_names(hx)) {
        AT_ERROR("lstm_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::lstm_cell(/* native_actuals */ input, hx, w_ih, w_hh, b_ih, b_hh);
}
Tensor Type::gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || hx.is_named() || w_ih.is_named() || w_hh.is_named() || b_ih.is_named() || b_hh.is_named()) {
        AT_ERROR("gru_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::gru_cell(/* native_actuals */ input, hx, w_ih, w_hh, b_ih, b_hh);
}
Tensor Type::rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || hx.is_named() || w_ih.is_named() || w_hh.is_named() || b_ih.is_named() || b_hh.is_named()) {
        AT_ERROR("rnn_tanh_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_tanh_cell(/* native_actuals */ input, hx, w_ih, w_hh, b_ih, b_hh);
}
Tensor Type::rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || hx.is_named() || w_ih.is_named() || w_hh.is_named() || b_ih.is_named() || b_hh.is_named()) {
        AT_ERROR("rnn_relu_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_relu_cell(/* native_actuals */ input, hx, w_ih, w_hh, b_ih, b_hh);
}
std::tuple<Tensor,Tensor,Tensor> Type::quantized_lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || at::has_names(hx) || at::has_names(params)) {
        AT_ERROR("quantized_lstm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_lstm(/* native_actuals */ input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> Type::quantized_lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || w_ih.is_named() || w_hh.is_named() || b_ih.is_named() || b_hh.is_named() || packed_ih.is_named() || packed_hh.is_named() || col_offsets_ih.is_named() || col_offsets_hh.is_named() || at::has_names(hx)) {
        AT_ERROR("quantized_lstm_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_lstm_cell(/* native_actuals */ input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
Tensor Type::quantized_gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || hx.is_named() || w_ih.is_named() || w_hh.is_named() || b_ih.is_named() || b_hh.is_named() || packed_ih.is_named() || packed_hh.is_named() || col_offsets_ih.is_named() || col_offsets_hh.is_named()) {
        AT_ERROR("quantized_gru_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_gru_cell(/* native_actuals */ input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
Tensor Type::quantized_rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || hx.is_named() || w_ih.is_named() || w_hh.is_named() || b_ih.is_named() || b_hh.is_named() || packed_ih.is_named() || packed_hh.is_named() || col_offsets_ih.is_named() || col_offsets_hh.is_named()) {
        AT_ERROR("quantized_rnn_relu_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_rnn_relu_cell(/* native_actuals */ input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
Tensor Type::quantized_rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || hx.is_named() || w_ih.is_named() || w_hh.is_named() || b_ih.is_named() || b_hh.is_named() || packed_ih.is_named() || packed_hh.is_named() || col_offsets_ih.is_named() || col_offsets_hh.is_named()) {
        AT_ERROR("quantized_rnn_tanh_cell: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_rnn_tanh_cell(/* native_actuals */ input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
std::tuple<Tensor,Tensor> Type::_pack_padded_sequence(const Tensor & input, const Tensor & lengths, bool batch_first) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || lengths.is_named()) {
        AT_ERROR("_pack_padded_sequence: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_pack_padded_sequence(/* native_actuals */ input, lengths, batch_first);
}
Tensor Type::_pack_padded_sequence_backward(const Tensor & grad, IntArrayRef input_size, const Tensor & batch_sizes, bool batch_first) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad.is_named() || batch_sizes.is_named()) {
        AT_ERROR("_pack_padded_sequence_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_pack_padded_sequence_backward(/* native_actuals */ grad, input_size, batch_sizes, batch_first);
}
std::tuple<Tensor,Tensor> Type::_pad_packed_sequence(const Tensor & data, const Tensor & batch_sizes, bool batch_first, Scalar padding_value, int64_t total_length) const {
#ifdef NAMEDTENSOR_ENABLED
    if (data.is_named() || batch_sizes.is_named()) {
        AT_ERROR("_pad_packed_sequence: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::_pad_packed_sequence(/* native_actuals */ data, batch_sizes, batch_first, padding_value, total_length);
}
Tensor Type::masked_fill(const Tensor & self, const Tensor & mask, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mask.is_named()) {
        AT_ERROR("masked_fill: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill(/* native_actuals */ self, mask, value);
}
Tensor Type::masked_fill(const Tensor & self, const Tensor & mask, const Tensor & value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mask.is_named() || value.is_named()) {
        AT_ERROR("masked_fill: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill(/* native_actuals */ self, mask, value);
}
Tensor Type::masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mask.is_named() || source.is_named()) {
        AT_ERROR("masked_scatter: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_scatter(/* native_actuals */ self, mask, source);
}
Tensor Type::index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named() || source.is_named()) {
        AT_ERROR("index_add: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_add(/* native_actuals */ self, dim, index, source);
}
Tensor Type::index_fill(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named()) {
        AT_ERROR("index_fill: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill(/* native_actuals */ self, dim, index, value);
}
Tensor Type::index_fill(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named() || value.is_named()) {
        AT_ERROR("index_fill: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill(/* native_actuals */ self, dim, index, value);
}
Tensor Type::scatter(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named() || src.is_named()) {
        AT_ERROR("scatter: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter(/* native_actuals */ self, dim, index, src);
}
Tensor Type::scatter(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named()) {
        AT_ERROR("scatter: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter(/* native_actuals */ self, dim, index, value);
}
Tensor Type::scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named() || src.is_named()) {
        AT_ERROR("scatter_add: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter_add(/* native_actuals */ self, dim, index, src);
}
Tensor & Type::cross_out(Tensor & out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("cross_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cross_out(/* native_actuals */ out, self, other, dim);
}
Tensor Type::cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("cross: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cross(/* native_actuals */ self, other, dim);
}
Tensor Type::triu(const Tensor & self, int64_t diagonal) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("triu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triu(/* native_actuals */ self, diagonal);
}
Tensor Type::tril(const Tensor & self, int64_t diagonal) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("tril: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tril(/* native_actuals */ self, diagonal);
}
std::vector<Tensor> Type::nonzero_numpy(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("nonzero_numpy: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nonzero_numpy(/* native_actuals */ self);
}
Tensor Type::_gather_sparse_backward(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & grad) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named() || grad.is_named()) {
        AT_ERROR("_gather_sparse_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_gather_sparse_backward(/* native_actuals */ self, dim, index, grad);
}
std::tuple<Tensor &,Tensor &> Type::triangular_solve_out(Tensor & X, Tensor & M, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) const {
#ifdef NAMEDTENSOR_ENABLED
    if (X.is_named() || M.is_named() || self.is_named() || A.is_named()) {
        AT_ERROR("triangular_solve_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triangular_solve_out(/* native_actuals */ X, M, self, A, upper, transpose, unitriangular);
}
std::tuple<Tensor,Tensor> Type::triangular_solve(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || A.is_named()) {
        AT_ERROR("triangular_solve: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triangular_solve(/* native_actuals */ self, A, upper, transpose, unitriangular);
}
Tensor & Type::cholesky_out(Tensor & out, const Tensor & self, bool upper) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("cholesky_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky_out(/* native_actuals */ out, self, upper);
}
Tensor Type::cholesky(const Tensor & self, bool upper) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("cholesky: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky(/* native_actuals */ self, upper);
}
Tensor & Type::cholesky_solve_out(Tensor & out, const Tensor & self, const Tensor & input2, bool upper) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || input2.is_named()) {
        AT_ERROR("cholesky_solve_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky_solve_out(/* native_actuals */ out, self, input2, upper);
}
Tensor Type::cholesky_solve(const Tensor & self, const Tensor & input2, bool upper) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || input2.is_named()) {
        AT_ERROR("cholesky_solve: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky_solve(/* native_actuals */ self, input2, upper);
}
std::tuple<Tensor,Tensor> Type::solve(const Tensor & self, const Tensor & A) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || A.is_named()) {
        AT_ERROR("solve: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::solve(/* native_actuals */ self, A);
}
std::tuple<Tensor &,Tensor &> Type::solve_out(Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A) const {
#ifdef NAMEDTENSOR_ENABLED
    if (solution.is_named() || lu.is_named() || self.is_named() || A.is_named()) {
        AT_ERROR("solve_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::solve_out(/* native_actuals */ solution, lu, self, A);
}
std::tuple<Tensor &,Tensor &> Type::qr_out(Tensor & Q, Tensor & R, const Tensor & self, bool some) const {
#ifdef NAMEDTENSOR_ENABLED
    if (Q.is_named() || R.is_named() || self.is_named()) {
        AT_ERROR("qr_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::qr_out(/* native_actuals */ Q, R, self, some);
}
std::tuple<Tensor,Tensor> Type::qr(const Tensor & self, bool some) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("qr: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::qr(/* native_actuals */ self, some);
}
Tensor Type::argsort(const Tensor & self, int64_t dim, bool descending) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("argsort: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::argsort(/* native_actuals */ self, dim, descending);
}
Tensor Type::all(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("all: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all(/* native_actuals */ self);
}
Tensor Type::any(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("any: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any(/* native_actuals */ self);
}
Tensor & Type::multilabel_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || target.is_named()) {
        AT_ERROR("multilabel_margin_loss_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multilabel_margin_loss_out(/* native_actuals */ out, self, target, reduction);
}
Tensor Type::multilabel_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || target.is_named()) {
        AT_ERROR("multilabel_margin_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multilabel_margin_loss(/* native_actuals */ self, target, reduction);
}
Tensor & Type::nll_loss_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || target.is_named() || weight.is_named()) {
        AT_ERROR("nll_loss_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss_out(/* native_actuals */ out, self, target, weight, reduction, ignore_index);
}
Tensor Type::nll_loss(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || target.is_named() || weight.is_named()) {
        AT_ERROR("nll_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss(/* native_actuals */ self, target, weight, reduction, ignore_index);
}
Tensor & Type::nll_loss2d_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || target.is_named() || weight.is_named()) {
        AT_ERROR("nll_loss2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss2d_out(/* native_actuals */ out, self, target, weight, reduction, ignore_index);
}
Tensor Type::nll_loss2d(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || target.is_named() || weight.is_named()) {
        AT_ERROR("nll_loss2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss2d(/* native_actuals */ self, target, weight, reduction, ignore_index);
}
Tensor & Type::log_sigmoid_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("log_sigmoid_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_sigmoid_out(/* native_actuals */ out, self);
}
Tensor Type::log_sigmoid(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("log_sigmoid: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_sigmoid(/* native_actuals */ self);
}
Tensor Type::adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("adaptive_avg_pool2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d(/* native_actuals */ self, output_size);
}
Tensor & Type::thnn_conv_transpose2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_transpose2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_transpose2d_out(/* native_actuals */ out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
Tensor Type::thnn_conv_transpose2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_transpose2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_transpose2d(/* native_actuals */ self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
Tensor & Type::thnn_conv_transpose3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_transpose3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_transpose3d_out(/* native_actuals */ out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
Tensor Type::thnn_conv_transpose3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_transpose3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_transpose3d(/* native_actuals */ self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
Tensor & Type::thnn_conv2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv2d_out(/* native_actuals */ out, self, weight, kernel_size, bias, stride, padding);
}
Tensor Type::thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv2d(/* native_actuals */ self, weight, kernel_size, bias, stride, padding);
}
Tensor & Type::thnn_conv_depthwise2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_depthwise2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_depthwise2d_out(/* native_actuals */ out, self, weight, kernel_size, bias, stride, padding, dilation);
}
Tensor Type::thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_depthwise2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_depthwise2d(/* native_actuals */ self, weight, kernel_size, bias, stride, padding, dilation);
}
Tensor & Type::thnn_conv3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv3d_out(/* native_actuals */ out, self, weight, kernel_size, bias, stride, padding);
}
Tensor Type::thnn_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv3d(/* native_actuals */ self, weight, kernel_size, bias, stride, padding);
}
Tensor & Type::thnn_conv_dilated2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_dilated2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_dilated2d_out(/* native_actuals */ out, self, weight, kernel_size, bias, stride, padding, dilation);
}
Tensor Type::thnn_conv_dilated2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_dilated2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_dilated2d(/* native_actuals */ self, weight, kernel_size, bias, stride, padding, dilation);
}
Tensor & Type::thnn_conv_dilated3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_dilated3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_dilated3d_out(/* native_actuals */ out, self, weight, kernel_size, bias, stride, padding, dilation);
}
Tensor Type::thnn_conv_dilated3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_dilated3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_dilated3d(/* native_actuals */ self, weight, kernel_size, bias, stride, padding, dilation);
}
std::tuple<Tensor,Tensor> Type::_cudnn_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool deterministic, bool zero_infinity) const {
    AT_ERROR("_cudnn_ctc_loss is not implemented for type ", toString());
}
Tensor Type::_cudnn_rnn_flatten_weight(TensorList weight_arr, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, bool bidirectional) const {
    AT_ERROR("_cudnn_rnn_flatten_weight is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> Type::_cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state) const {
    AT_ERROR("_cudnn_rnn is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> Type::_cudnn_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) const {
    AT_ERROR("_cudnn_rnn_backward is not implemented for type ", toString());
}
Tensor Type::_cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, const TensorOptions & options) const {
    AT_ERROR("_cudnn_init_dropout_state is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor> Type::_fused_dropout(const Tensor & self, double p, Generator * generator) const {
    AT_ERROR("_fused_dropout is not implemented for type ", toString());
}
Tensor Type::_masked_scale(const Tensor & self, const Tensor & mask, double scale) const {
    AT_ERROR("_masked_scale is not implemented for type ", toString());
}
Tensor & Type::abs_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("abs_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_abs__cpu(/* native_actuals */ self);
}
Tensor & Type::abs_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("abs_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_abs_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::acos_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("acos_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_acos__cpu(/* native_actuals */ self);
}
Tensor & Type::acos_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("acos_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_acos_out_cpu(/* native_actuals */ out, self);
}
Tensor Type::add(const Tensor & self, const Tensor & other, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("add: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add(/* native_actuals */ self, other, alpha);
}
Tensor & Type::add_(Tensor & self, const Tensor & other, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("add_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_(/* native_actuals */ self, other, alpha);
}
Tensor & Type::add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("add_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_out(/* native_actuals */ out, self, other, alpha);
}
Tensor Type::addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mat.is_named() || vec.is_named()) {
        AT_ERROR("addmv: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addmv(/* native_actuals */ self, mat, vec, beta, alpha);
}
Tensor & Type::addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mat.is_named() || vec.is_named()) {
        AT_ERROR("addmv_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addmv_(/* native_actuals */ self, mat, vec, beta, alpha);
}
Tensor & Type::addmv_out(Tensor & out, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || mat.is_named() || vec.is_named()) {
        AT_ERROR("addmv_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addmv_out(/* native_actuals */ out, self, mat, vec, beta, alpha);
}
Tensor & Type::arange_out(Tensor & out, Scalar start, Scalar end, Scalar step) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("arange_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::arange_cpu_out(/* native_actuals */ out, start, end, step);
}
Tensor Type::as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("as_strided: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::as_strided_tensorimpl(/* native_actuals */ self, size, stride, storage_offset);
}
Tensor & Type::asin_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("asin_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_asin__cpu(/* native_actuals */ self);
}
Tensor & Type::asin_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("asin_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_asin_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::atan_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("atan_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_atan__cpu(/* native_actuals */ self);
}
Tensor & Type::atan_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("atan_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_atan_out_cpu(/* native_actuals */ out, self);
}
Tensor Type::baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || batch1.is_named() || batch2.is_named()) {
        AT_ERROR("baddbmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::baddbmm_cpu(/* native_actuals */ self, batch1, batch2, beta, alpha);
}
Tensor & Type::baddbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || batch1.is_named() || batch2.is_named()) {
        AT_ERROR("baddbmm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::baddbmm__cpu(/* native_actuals */ self, batch1, batch2, beta, alpha);
}
Tensor & Type::baddbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || batch1.is_named() || batch2.is_named()) {
        AT_ERROR("baddbmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::baddbmm_out_cpu(/* native_actuals */ out, self, batch1, batch2, beta, alpha);
}
Tensor & Type::bernoulli_(Tensor & self, const Tensor & p, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || p.is_named()) {
        AT_ERROR("bernoulli_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_tensor_cpu_(/* native_actuals */ self, p, generator);
}
Tensor & Type::bernoulli_(Tensor & self, double p, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("bernoulli_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_scalar_cpu_(/* native_actuals */ self, p, generator);
}
Tensor Type::bincount(const Tensor & self, const Tensor & weights, int64_t minlength) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weights.is_named()) {
        AT_ERROR("bincount: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_bincount_cpu(/* native_actuals */ self, weights, minlength);
}
Tensor Type::bmm(const Tensor & self, const Tensor & mat2) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mat2.is_named()) {
        AT_ERROR("bmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bmm_cpu(/* native_actuals */ self, mat2);
}
Tensor & Type::bmm_out(Tensor & out, const Tensor & self, const Tensor & mat2) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || mat2.is_named()) {
        AT_ERROR("bmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bmm_out_cpu(/* native_actuals */ out, self, mat2);
}
Tensor & Type::ceil_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("ceil_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_ceil__cpu(/* native_actuals */ self);
}
Tensor & Type::ceil_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("ceil_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_ceil_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("clamp_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp__cpu(/* native_actuals */ self, min, max);
}
Tensor & Type::clamp_out(Tensor & out, const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("clamp_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_out_cpu(/* native_actuals */ out, self, min, max);
}
Tensor & Type::clamp_max_(Tensor & self, Scalar max) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("clamp_max_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_max__cpu(/* native_actuals */ self, max);
}
Tensor & Type::clamp_max_out(Tensor & out, const Tensor & self, Scalar max) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("clamp_max_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_max_out_cpu(/* native_actuals */ out, self, max);
}
Tensor & Type::clamp_min_(Tensor & self, Scalar min) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("clamp_min_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_min__cpu(/* native_actuals */ self, min);
}
Tensor & Type::clamp_min_out(Tensor & out, const Tensor & self, Scalar min) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("clamp_min_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_min_out_cpu(/* native_actuals */ out, self, min);
}
Tensor Type::_copy_from(const Tensor & self, const Tensor & dst, bool non_blocking) const {
    AT_ERROR("_copy_from is not implemented for type ", toString());
}
Tensor & Type::cos_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("cos_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cos__cpu(/* native_actuals */ self);
}
Tensor & Type::cos_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("cos_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cos_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::cosh_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("cosh_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cosh__cpu(/* native_actuals */ self);
}
Tensor & Type::cosh_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("cosh_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cosh_out_cpu(/* native_actuals */ out, self);
}
Tensor Type::cudnn_affine_grid_generator(const Tensor & theta, int64_t N, int64_t C, int64_t H, int64_t W) const {
    AT_ERROR("cudnn_affine_grid_generator is not implemented for type ", toString());
}
Tensor Type::cudnn_affine_grid_generator_backward(const Tensor & grad, int64_t N, int64_t C, int64_t H, int64_t W) const {
    AT_ERROR("cudnn_affine_grid_generator_backward is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor,Tensor> Type::cudnn_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon) const {
    AT_ERROR("cudnn_batch_norm is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor,Tensor> Type::cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon) const {
    AT_ERROR("cudnn_batch_norm_backward is not implemented for type ", toString());
}
Tensor Type::cudnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    AT_ERROR("cudnn_convolution is not implemented for type ", toString());
}
Tensor Type::cudnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    AT_ERROR("cudnn_convolution_backward_input is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor,Tensor> Type::cudnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const {
    AT_ERROR("cudnn_convolution_backward is not implemented for type ", toString());
}
Tensor Type::cudnn_convolution_backward_bias(const Tensor & grad_output) const {
    AT_ERROR("cudnn_convolution_backward_bias is not implemented for type ", toString());
}
Tensor Type::cudnn_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    AT_ERROR("cudnn_convolution_backward_weight is not implemented for type ", toString());
}
Tensor Type::cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    AT_ERROR("cudnn_convolution_transpose is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor,Tensor> Type::cudnn_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const {
    AT_ERROR("cudnn_convolution_transpose_backward is not implemented for type ", toString());
}
Tensor Type::cudnn_convolution_transpose_backward_bias(const Tensor & grad_output) const {
    AT_ERROR("cudnn_convolution_transpose_backward_bias is not implemented for type ", toString());
}
Tensor Type::cudnn_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    AT_ERROR("cudnn_convolution_transpose_backward_input is not implemented for type ", toString());
}
Tensor Type::cudnn_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    AT_ERROR("cudnn_convolution_transpose_backward_weight is not implemented for type ", toString());
}
Tensor Type::cudnn_grid_sampler(const Tensor & self, const Tensor & grid) const {
    AT_ERROR("cudnn_grid_sampler is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor> Type::cudnn_grid_sampler_backward(const Tensor & self, const Tensor & grid, const Tensor & grad_output) const {
    AT_ERROR("cudnn_grid_sampler_backward is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor> Type::_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool zero_infinity) const {
#ifdef NAMEDTENSOR_ENABLED
    if (log_probs.is_named() || targets.is_named()) {
        AT_ERROR("_ctc_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    return at::native::ctc_loss_cpu(/* native_actuals */ log_probs, targets, input_lengths, target_lengths, blank, zero_infinity);
}
Tensor Type::_ctc_loss_backward(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad.is_named() || log_probs.is_named() || targets.is_named() || neg_log_likelihood.is_named() || log_alpha.is_named()) {
        AT_ERROR("_ctc_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::ctc_loss_backward_cpu(/* native_actuals */ grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity);
}
Tensor Type::dot(const Tensor & self, const Tensor & tensor) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || tensor.is_named()) {
        AT_ERROR("dot: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_dot(/* native_actuals */ self, tensor);
}
Tensor Type::embedding_dense_backward(const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || indices.is_named()) {
        AT_ERROR("embedding_dense_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::embedding_dense_backward_cpu(/* native_actuals */ grad_output, indices, num_weights, padding_idx, scale_grad_by_freq);
}
Tensor & Type::embedding_renorm_(Tensor & self, const Tensor & indices, double max_norm, double norm_type) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || indices.is_named()) {
        AT_ERROR("embedding_renorm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::embedding_renorm_cpu_(/* native_actuals */ self, indices, max_norm, norm_type);
}
std::tuple<Tensor,Tensor,Tensor,Tensor> Type::_embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) const {
#ifdef NAMEDTENSOR_ENABLED
    if (weight.is_named() || indices.is_named() || offsets.is_named() || per_sample_weights.is_named()) {
        AT_ERROR("_embedding_bag: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(weight));
    return at::native::_embedding_bag_cpu(/* native_actuals */ weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights);
}
Tensor Type::_embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad.is_named() || indices.is_named() || offsets.is_named() || offset2bag.is_named() || bag_size.is_named() || maximum_indices.is_named() || per_sample_weights.is_named()) {
        AT_ERROR("_embedding_bag_dense_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_dense_backward_cpu(/* native_actuals */ grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights);
}
Tensor Type::_embedding_bag_per_sample_weights_backward(const Tensor & grad, const Tensor & weight, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, int64_t mode) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad.is_named() || weight.is_named() || indices.is_named() || offsets.is_named() || offset2bag.is_named()) {
        AT_ERROR("_embedding_bag_per_sample_weights_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_per_sample_weights_backward_cpu(/* native_actuals */ grad, weight, indices, offsets, offset2bag, mode);
}
Tensor Type::empty(IntArrayRef size, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::empty_cpu(/* native_actuals */ size, options);
}
Tensor Type::_empty_affine_quantized(IntArrayRef size, const TensorOptions & options, double scale, int64_t zero_point) const {
    AT_ERROR("_empty_affine_quantized is not implemented for type ", toString());
}
Tensor & Type::resize_(Tensor & self, IntArrayRef size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("resize_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::resize_cpu_(/* native_actuals */ self, size);
}
Tensor Type::empty_strided(IntArrayRef size, IntArrayRef stride, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::empty_strided_cpu(/* native_actuals */ size, stride, options);
}
Tensor & Type::erf_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("erf_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erf__cpu(/* native_actuals */ self);
}
Tensor & Type::erf_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("erf_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erf_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::erfc_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("erfc_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erfc__cpu(/* native_actuals */ self);
}
Tensor & Type::erfc_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("erfc_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erfc_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::exp_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("exp_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_exp__cpu(/* native_actuals */ self);
}
Tensor & Type::exp_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("exp_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_exp_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::expm1_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("expm1_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_expm1__cpu(/* native_actuals */ self);
}
Tensor & Type::expm1_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("expm1_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_expm1_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::eye_out(Tensor & out, int64_t n) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("eye_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::eye_out_cpu(/* native_actuals */ out, n);
}
Tensor & Type::eye_out(Tensor & out, int64_t n, int64_t m) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("eye_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::eye_out_cpu(/* native_actuals */ out, n, m);
}
Tensor & Type::floor_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("floor_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_floor__cpu(/* native_actuals */ self);
}
Tensor & Type::floor_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("floor_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_floor_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::frac_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("frac_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_frac__cpu(/* native_actuals */ self);
}
Tensor & Type::frac_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("frac_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_frac_out_cpu(/* native_actuals */ out, self);
}
Tensor Type::from_file(std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::from_file(/* native_actuals */ filename, shared, size, options);
}
Tensor Type::grid_sampler_2d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || grid.is_named()) {
        AT_ERROR("grid_sampler_2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::grid_sampler_2d_cpu(/* native_actuals */ input, grid, interpolation_mode, padding_mode);
}
std::tuple<Tensor,Tensor> Type::grid_sampler_2d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || input.is_named() || grid.is_named()) {
        AT_ERROR("grid_sampler_2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::grid_sampler_2d_backward_cpu(/* native_actuals */ grad_output, input, grid, interpolation_mode, padding_mode);
}
Tensor Type::grid_sampler_3d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || grid.is_named()) {
        AT_ERROR("grid_sampler_3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::grid_sampler_3d_cpu(/* native_actuals */ input, grid, interpolation_mode, padding_mode);
}
std::tuple<Tensor,Tensor> Type::grid_sampler_3d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || input.is_named() || grid.is_named()) {
        AT_ERROR("grid_sampler_3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::grid_sampler_3d_backward_cpu(/* native_actuals */ grad_output, input, grid, interpolation_mode, padding_mode);
}
Tensor Type::ger(const Tensor & self, const Tensor & vec2) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || vec2.is_named()) {
        AT_ERROR("ger: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ger(/* native_actuals */ self, vec2);
}
Tensor & Type::ger_out(Tensor & out, const Tensor & self, const Tensor & vec2) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || vec2.is_named()) {
        AT_ERROR("ger_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ger_out(/* native_actuals */ out, self, vec2);
}
Tensor Type::_fft_with_size(const Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, IntArrayRef checked_signal_sizes, bool normalized, bool onesided, IntArrayRef output_sizes) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_fft_with_size: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_fft_mkl(/* native_actuals */ self, signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes);
}
Tensor Type::_inverse_helper(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_inverse_helper: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_inverse_helper_cpu(/* native_actuals */ self);
}
Tensor Type::kl_div_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || target.is_named()) {
        AT_ERROR("kl_div_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kl_div_backward_cpu(/* native_actuals */ grad_output, self, target, reduction);
}
std::tuple<Tensor &,Tensor &> Type::kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (values.is_named() || indices.is_named() || self.is_named()) {
        AT_ERROR("kthvalue_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kthvalue_out_cpu(/* native_actuals */ values, indices, self, k, dim, keepdim);
}
std::tuple<Tensor,Tensor,Tensor> Type::native_layer_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t M, int64_t N, double eps) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("native_layer_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::layer_norm_cpu(/* native_actuals */ input, weight, bias, M, N, eps);
}
std::tuple<Tensor,Tensor,Tensor> Type::native_layer_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_out.is_named() || input.is_named() || mean.is_named() || rstd.is_named() || weight.is_named()) {
        AT_ERROR("native_layer_norm_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_out));
    return at::native::layer_norm_backward_cpu(/* native_actuals */ grad_out, input, mean, rstd, weight, M, N, output_mask);
}
std::tuple<Tensor,Tensor,Tensor> Type::native_layer_norm_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask) const {
#ifdef NAMEDTENSOR_ENABLED
    if (ggI.is_named() || ggW.is_named() || ggb.is_named() || gO.is_named() || input.is_named() || mean.is_named() || rstd.is_named() || weight.is_named()) {
        AT_ERROR("native_layer_norm_double_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(gO));
    return at::native::layer_norm_double_backward_cpu(/* native_actuals */ ggI, ggW, ggb, gO, input, mean, rstd, weight, M, N, output_mask);
}
Tensor Type::mkldnn_linear(const Tensor & input, const Tensor & weight, const Tensor & bias) const {
    AT_ERROR("mkldnn_linear is not implemented for type ", toString());
}
Tensor & Type::linspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("linspace_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::linspace_cpu_out(/* native_actuals */ out, start, end, steps);
}
Tensor & Type::log_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("log_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log__cpu(/* native_actuals */ self);
}
Tensor & Type::log_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("log_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::log10_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("log10_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log10__cpu(/* native_actuals */ self);
}
Tensor & Type::log10_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("log10_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log10_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::log1p_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("log1p_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log1p__cpu(/* native_actuals */ self);
}
Tensor & Type::log1p_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("log1p_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log1p_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::log2_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("log2_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log2__cpu(/* native_actuals */ self);
}
Tensor & Type::log2_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("log2_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log2_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::logspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps, double base) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("logspace_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::logspace_cpu_out(/* native_actuals */ out, start, end, steps, base);
}
Tensor Type::_log_softmax(const Tensor & self, int64_t dim, bool half_to_float) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_log_softmax: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax_cpu(/* native_actuals */ self, dim, half_to_float);
}
Tensor Type::_log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || output.is_named() || self.is_named()) {
        AT_ERROR("_log_softmax_backward_data: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax_backward_cpu(/* native_actuals */ grad_output, output, dim, self);
}
Tensor Type::mkldnn_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
    AT_ERROR("mkldnn_max_pool2d is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor,Tensor> Type::miopen_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon) const {
    AT_ERROR("miopen_batch_norm is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor,Tensor> Type::miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon) const {
    AT_ERROR("miopen_batch_norm_backward is not implemented for type ", toString());
}
Tensor Type::miopen_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    AT_ERROR("miopen_convolution is not implemented for type ", toString());
}
Tensor Type::miopen_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    AT_ERROR("miopen_convolution_backward_input is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor,Tensor> Type::miopen_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const {
    AT_ERROR("miopen_convolution_backward is not implemented for type ", toString());
}
Tensor Type::miopen_convolution_backward_bias(const Tensor & grad_output) const {
    AT_ERROR("miopen_convolution_backward_bias is not implemented for type ", toString());
}
Tensor Type::miopen_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    AT_ERROR("miopen_convolution_backward_weight is not implemented for type ", toString());
}
Tensor Type::miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    AT_ERROR("miopen_convolution_transpose is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor,Tensor> Type::miopen_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const {
    AT_ERROR("miopen_convolution_transpose_backward is not implemented for type ", toString());
}
Tensor Type::miopen_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    AT_ERROR("miopen_convolution_transpose_backward_input is not implemented for type ", toString());
}
Tensor Type::miopen_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    AT_ERROR("miopen_convolution_transpose_backward_weight is not implemented for type ", toString());
}
Tensor Type::miopen_depthwise_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    AT_ERROR("miopen_depthwise_convolution is not implemented for type ", toString());
}
Tensor Type::miopen_depthwise_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    AT_ERROR("miopen_depthwise_convolution_backward_input is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor,Tensor> Type::miopen_depthwise_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const {
    AT_ERROR("miopen_depthwise_convolution_backward is not implemented for type ", toString());
}
Tensor Type::miopen_depthwise_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const {
    AT_ERROR("miopen_depthwise_convolution_backward_weight is not implemented for type ", toString());
}
Tensor Type::mm(const Tensor & self, const Tensor & mat2) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mat2.is_named()) {
        AT_ERROR("mm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_mm(/* native_actuals */ self, mat2);
}
Tensor & Type::mm_out(Tensor & out, const Tensor & self, const Tensor & mat2) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || mat2.is_named()) {
        AT_ERROR("mm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_mm_out(/* native_actuals */ out, self, mat2);
}
Tensor Type::mv(const Tensor & self, const Tensor & vec) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || vec.is_named()) {
        AT_ERROR("mv: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_mv(/* native_actuals */ self, vec);
}
Tensor & Type::mv_out(Tensor & out, const Tensor & self, const Tensor & vec) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || vec.is_named()) {
        AT_ERROR("mv_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_mv_out(/* native_actuals */ out, self, vec);
}
Tensor Type::narrow_copy(const Tensor & self, int64_t dim, int64_t start, int64_t length) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("narrow_copy: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::narrow_copy_dense(/* native_actuals */ self, dim, start, length);
}
std::tuple<Tensor,Tensor,Tensor> Type::native_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || weight.is_named() || bias.is_named() || running_mean.is_named() || running_var.is_named()) {
        AT_ERROR("native_batch_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm_cpu(/* native_actuals */ input, weight, bias, running_mean, running_var, training, momentum, eps);
}
std::tuple<Tensor,Tensor> Type::batch_norm_stats(const Tensor & input, double eps) const {
    AT_ERROR("batch_norm_stats is not implemented for type ", toString());
}
Tensor Type::batch_norm_elemt(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & mean, const Tensor & invstd, double eps) const {
    AT_ERROR("batch_norm_elemt is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor> Type::batch_norm_gather_stats(const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & running_mean, const Tensor & running_var, double momentum, double eps, int64_t count) const {
    AT_ERROR("batch_norm_gather_stats is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor,Tensor> Type::native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_out.is_named() || input.is_named() || weight.is_named() || running_mean.is_named() || running_var.is_named() || save_mean.is_named() || save_invstd.is_named()) {
        AT_ERROR("native_batch_norm_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_out));
    return at::native::batch_norm_backward_cpu(/* native_actuals */ grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask);
}
std::tuple<Tensor,Tensor,Tensor,Tensor> Type::batch_norm_backward_reduce(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, bool input_g, bool weight_g, bool bias_g) const {
    AT_ERROR("batch_norm_backward_reduce is not implemented for type ", toString());
}
Tensor Type::batch_norm_backward_elemt(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu) const {
    AT_ERROR("batch_norm_backward_elemt is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor> Type::batch_norm_update_stats(const Tensor & input, const Tensor & running_mean, const Tensor & running_var, double momentum) const {
#ifdef NAMEDTENSOR_ENABLED
    if (input.is_named() || running_mean.is_named() || running_var.is_named()) {
        AT_ERROR("batch_norm_update_stats: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm_update_stats_cpu(/* native_actuals */ input, running_mean, running_var, momentum);
}
Tensor & Type::randperm_out(Tensor & out, int64_t n, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("randperm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randperm_out_cpu(/* native_actuals */ out, n, generator);
}
Tensor & Type::range_out(Tensor & out, Scalar start, Scalar end, Scalar step) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named()) {
        AT_ERROR("range_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::range_cpu_out(/* native_actuals */ out, start, end, step);
}
Tensor & Type::reciprocal_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("reciprocal_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_reciprocal__cpu(/* native_actuals */ self);
}
Tensor & Type::reciprocal_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("reciprocal_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_reciprocal_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::neg_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("neg_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_neg__cpu(/* native_actuals */ self);
}
Tensor & Type::neg_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("neg_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_neg_out_cpu(/* native_actuals */ out, self);
}
Tensor Type::repeat_interleave(const Tensor & repeats) const {
#ifdef NAMEDTENSOR_ENABLED
    if (repeats.is_named()) {
        AT_ERROR("repeat_interleave: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(repeats));
    return at::native::repeat_interleave_cpu(/* native_actuals */ repeats);
}
Tensor Type::mkldnn_reshape(const Tensor & self, IntArrayRef shape) const {
    AT_ERROR("mkldnn_reshape is not implemented for type ", toString());
}
Tensor & Type::round_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("round_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_round__cpu(/* native_actuals */ self);
}
Tensor & Type::round_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("round_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_round_out_cpu(/* native_actuals */ out, self);
}
Tensor Type::relu(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("relu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::relu(/* native_actuals */ self);
}
Tensor & Type::relu_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("relu_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::relu_(/* native_actuals */ self);
}
Tensor Type::prelu(const Tensor & self, const Tensor & weight) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weight.is_named()) {
        AT_ERROR("prelu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prelu_cpu(/* native_actuals */ self, weight);
}
std::tuple<Tensor,Tensor> Type::prelu_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || weight.is_named()) {
        AT_ERROR("prelu_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prelu_backward_cpu(/* native_actuals */ grad_output, self, weight);
}
Tensor Type::gelu(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("gelu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gelu_cpu(/* native_actuals */ self);
}
Tensor Type::gelu_backward(const Tensor & grad, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad.is_named() || self.is_named()) {
        AT_ERROR("gelu_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gelu_backward_cpu(/* native_actuals */ grad, self);
}
Tensor Type::hardshrink(const Tensor & self, Scalar lambd) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("hardshrink: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardshrink_cpu(/* native_actuals */ self, lambd);
}
Tensor Type::hardshrink_backward(const Tensor & grad_out, const Tensor & self, Scalar lambd) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_out.is_named() || self.is_named()) {
        AT_ERROR("hardshrink_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardshrink_backward_cpu(/* native_actuals */ grad_out, self, lambd);
}
Tensor & Type::rsqrt_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("rsqrt_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_rsqrt__cpu(/* native_actuals */ self);
}
Tensor & Type::rsqrt_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("rsqrt_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_rsqrt_out_cpu(/* native_actuals */ out, self);
}
Tensor Type::sigmoid(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sigmoid: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sigmoid(/* native_actuals */ self);
}
Tensor & Type::sigmoid_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sigmoid_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sigmoid__cpu(/* native_actuals */ self);
}
Tensor & Type::sigmoid_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("sigmoid_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sigmoid_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::sin_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sin_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sin__cpu(/* native_actuals */ self);
}
Tensor & Type::sin_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("sin_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sin_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::sinh_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sinh_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sinh__cpu(/* native_actuals */ self);
}
Tensor & Type::sinh_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("sinh_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sinh_out_cpu(/* native_actuals */ out, self);
}
Tensor Type::_softmax(const Tensor & self, int64_t dim, bool half_to_float) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_softmax: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax_cpu(/* native_actuals */ self, dim, half_to_float);
}
Tensor Type::_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || output.is_named() || self.is_named()) {
        AT_ERROR("_softmax_backward_data: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax_backward_cpu(/* native_actuals */ grad_output, output, dim, self);
}
Tensor & Type::_sparse_add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) const {
    AT_ERROR("_sparse_add_out is not implemented for type ", toString());
}
Tensor & Type::_sparse_dense_add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("_sparse_dense_add_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_out_dense_sparse_cpu(/* native_actuals */ out, self, other, alpha);
}
Tensor & Type::_sparse_div_zerodim_out(Tensor & out, const Tensor & self, const Tensor & other) const {
    AT_ERROR("_sparse_div_zerodim_out is not implemented for type ", toString());
}
Tensor & Type::_sparse_div_scalar_out(Tensor & out, const Tensor & self, Scalar other) const {
    AT_ERROR("_sparse_div_scalar_out is not implemented for type ", toString());
}
Tensor & Type::_sparse_mul_out(Tensor & out, const Tensor & self, const Tensor & other) const {
    AT_ERROR("_sparse_mul_out is not implemented for type ", toString());
}
Tensor & Type::_sparse_mul_zerodim_out(Tensor & out, const Tensor & self, const Tensor & other) const {
    AT_ERROR("_sparse_mul_zerodim_out is not implemented for type ", toString());
}
Tensor & Type::_sparse_mul_scalar_out(Tensor & out, const Tensor & self, Scalar other) const {
    AT_ERROR("_sparse_mul_scalar_out is not implemented for type ", toString());
}
Tensor & Type::sspaddmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || mat1.is_named() || mat2.is_named()) {
        AT_ERROR("sspaddmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sspaddmm_out_only_sparse(/* native_actuals */ out, self, mat1, mat2, beta, alpha);
}
Tensor & Type::sqrt_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sqrt_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sqrt__cpu(/* native_actuals */ self);
}
Tensor & Type::sqrt_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("sqrt_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sqrt_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::tan_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("tan_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tan__cpu(/* native_actuals */ self);
}
Tensor & Type::tan_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("tan_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tan_out_cpu(/* native_actuals */ out, self);
}
Tensor & Type::tanh_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("tanh_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tanh__cpu(/* native_actuals */ self);
}
Tensor & Type::tanh_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("tanh_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tanh_out_cpu(/* native_actuals */ out, self);
}
Tensor Type::flip(const Tensor & self, IntArrayRef dims) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("flip: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flip_cpu(/* native_actuals */ self, dims);
}
Tensor Type::roll(const Tensor & self, IntArrayRef shifts, IntArrayRef dims) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("roll: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::roll_cpu(/* native_actuals */ self, shifts, dims);
}
Tensor & Type::trunc_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("trunc_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_trunc__cpu(/* native_actuals */ self);
}
Tensor & Type::trunc_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("trunc_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_trunc_out_cpu(/* native_actuals */ out, self);
}
std::tuple<Tensor,Tensor> Type::_unique(const Tensor & self, bool sorted, bool return_inverse) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_unique: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_unique_cpu(/* native_actuals */ self, sorted, return_inverse);
}
std::tuple<Tensor,Tensor,Tensor> Type::unique_dim(const Tensor & self, int64_t dim, bool sorted, bool return_inverse, bool return_counts) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("unique_dim: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unique_dim_cpu(/* native_actuals */ self, dim, sorted, return_inverse, return_counts);
}
std::tuple<Tensor,Tensor,Tensor> Type::unique_consecutive(const Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("unique_consecutive: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unique_consecutive_cpu(/* native_actuals */ self, return_inverse, return_counts, dim);
}
std::tuple<Tensor,Tensor,Tensor> Type::unique_dim_consecutive(const Tensor & self, int64_t dim, bool return_inverse, bool return_counts) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("unique_dim_consecutive: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unique_dim_consecutive_cpu(/* native_actuals */ self, dim, return_inverse, return_counts);
}
std::tuple<Tensor,Tensor,Tensor> Type::_unique2(const Tensor & self, bool sorted, bool return_inverse, bool return_counts) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_unique2: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_unique2_cpu(/* native_actuals */ self, sorted, return_inverse, return_counts);
}
Tensor Type::_s_where(const Tensor & condition, const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (condition.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("_s_where: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_where_cpu(/* native_actuals */ condition, self, other);
}
std::tuple<Tensor,Tensor> Type::_weight_norm_cuda_interface(const Tensor & v, const Tensor & g, int64_t dim) const {
    AT_ERROR("_weight_norm_cuda_interface is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor> Type::_weight_norm_cuda_interface_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) const {
    AT_ERROR("_weight_norm_cuda_interface_backward is not implemented for type ", toString());
}
Tensor Type::_standard_gamma_grad(const Tensor & self, const Tensor & output) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || output.is_named()) {
        AT_ERROR("_standard_gamma_grad: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_standard_gamma_grad_cpu(/* native_actuals */ self, output);
}
Tensor Type::_standard_gamma(const Tensor & self, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_standard_gamma: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_gamma_cpu(/* native_actuals */ self, generator);
}
Tensor Type::_dirichlet_grad(const Tensor & x, const Tensor & alpha, const Tensor & total) const {
#ifdef NAMEDTENSOR_ENABLED
    if (x.is_named() || alpha.is_named() || total.is_named()) {
        AT_ERROR("_dirichlet_grad: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(x));
    return at::native::_dirichlet_grad_cpu(/* native_actuals */ x, alpha, total);
}
Tensor Type::_sample_dirichlet(const Tensor & self, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_sample_dirichlet: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_dirichlet_cpu(/* native_actuals */ self, generator);
}
Tensor Type::poisson(const Tensor & self, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("poisson: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_poisson_cpu(/* native_actuals */ self, generator);
}
Tensor Type::native_norm(const Tensor & self, Scalar p) const {
    AT_ERROR("native_norm is not implemented for type ", toString());
}
Tensor Type::_sparse_sum_backward(const Tensor & grad, const Tensor & self, IntArrayRef dim) const {
    AT_ERROR("_sparse_sum_backward is not implemented for type ", toString());
}
Tensor Type::clone(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("clone: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_clone(/* native_actuals */ self);
}
Tensor & Type::resize_as_(Tensor & self, const Tensor & the_template) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || the_template.is_named()) {
        AT_ERROR("resize_as_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_resize_as_(/* native_actuals */ self, the_template);
}
Tensor & Type::pow_out(Tensor & out, const Tensor & self, Scalar exponent) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("pow_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_pow_out(/* native_actuals */ out, self, exponent);
}
Tensor Type::pow(const Tensor & self, Scalar exponent) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("pow: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_pow(/* native_actuals */ self, exponent);
}
Tensor & Type::zero_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("zero_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_zero_(/* native_actuals */ self);
}
Tensor & Type::s_native_addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || mat1.is_named() || mat2.is_named()) {
        AT_ERROR("s_native_addmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::s_addmm_out_sparse_dense_cpu(/* native_actuals */ out, self, mat1, mat2, beta, alpha);
}
Tensor Type::s_native_addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mat1.is_named() || mat2.is_named()) {
        AT_ERROR("s_native_addmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::s_addmm_sparse_dense_cpu(/* native_actuals */ self, mat1, mat2, beta, alpha);
}
Tensor & Type::s_native_addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mat1.is_named() || mat2.is_named()) {
        AT_ERROR("s_native_addmm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::s_addmm_sparse_dense_cpu_(/* native_actuals */ self, mat1, mat2, beta, alpha);
}
Tensor Type::_sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const TensorOptions & options) const {
    AT_ERROR("_sparse_coo_tensor_with_dims is not implemented for type ", toString());
}
Tensor Type::_sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, const TensorOptions & options) const {
    AT_ERROR("_sparse_coo_tensor_with_dims_and_tensors is not implemented for type ", toString());
}
Tensor & Type::sparse_resize_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) const {
    AT_ERROR("sparse_resize_ is not implemented for type ", toString());
}
Tensor & Type::sparse_resize_and_clear_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) const {
    AT_ERROR("sparse_resize_and_clear_ is not implemented for type ", toString());
}
Tensor Type::sparse_mask(const Tensor & self, const Tensor & mask) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mask.is_named()) {
        AT_ERROR("sparse_mask: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sparse_mask_cpu(/* native_actuals */ self, mask);
}
Tensor Type::to_dense(const Tensor & self) const {
    AT_ERROR("to_dense is not implemented for type ", toString());
}
int64_t Type::sparse_dim(const Tensor & self) const {
    AT_ERROR("sparse_dim is not implemented for type ", toString());
}
int64_t Type::dense_dim(const Tensor & self) const {
    AT_ERROR("dense_dim is not implemented for type ", toString());
}
int64_t Type::_nnz(const Tensor & self) const {
    AT_ERROR("_nnz is not implemented for type ", toString());
}
Tensor Type::coalesce(const Tensor & self) const {
    AT_ERROR("coalesce is not implemented for type ", toString());
}
bool Type::is_coalesced(const Tensor & self) const {
    AT_ERROR("is_coalesced is not implemented for type ", toString());
}
Tensor Type::_indices(const Tensor & self) const {
    AT_ERROR("_indices is not implemented for type ", toString());
}
Tensor Type::_values(const Tensor & self) const {
    AT_ERROR("_values is not implemented for type ", toString());
}
Tensor & Type::_coalesced_(Tensor & self, bool coalesced) const {
    AT_ERROR("_coalesced_ is not implemented for type ", toString());
}
Tensor Type::indices(const Tensor & self) const {
    AT_ERROR("indices is not implemented for type ", toString());
}
Tensor Type::values(const Tensor & self) const {
    AT_ERROR("values is not implemented for type ", toString());
}
Tensor & Type::hspmm_out(Tensor & out, const Tensor & mat1, const Tensor & mat2) const {
    AT_ERROR("hspmm_out is not implemented for type ", toString());
}
Tensor Type::hspmm(const Tensor & mat1, const Tensor & mat2) const {
    AT_ERROR("hspmm is not implemented for type ", toString());
}
Tensor & Type::copy_sparse_to_sparse_(Tensor & self, const Tensor & src, bool non_blocking) const {
    AT_ERROR("copy_sparse_to_sparse_ is not implemented for type ", toString());
}
Tensor Type::to_sparse(const Tensor & self, int64_t sparse_dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("to_sparse: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dense_to_sparse(/* native_actuals */ self, sparse_dim);
}
Tensor Type::to_sparse(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("to_sparse: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dense_to_sparse(/* native_actuals */ self);
}
Tensor Type::to_mkldnn(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("to_mkldnn: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dense_to_mkldnn(/* native_actuals */ self);
}
Tensor Type::mkldnn_reorder_conv2d_weight(const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) const {
    AT_ERROR("mkldnn_reorder_conv2d_weight is not implemented for type ", toString());
}
Tensor Type::quantize_linear(const Tensor & self, double scale, int64_t zero_point, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("quantize_linear: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::quantize_linear_cpu(/* native_actuals */ self, scale, zero_point, dtype);
}
Tensor Type::quantize_linear_per_channel(const Tensor & self, const Tensor & scales, const Tensor & zero_points, IntArrayRef axis, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || scales.is_named() || zero_points.is_named()) {
        AT_ERROR("quantize_linear_per_channel: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::quantize_linear_per_channel_cpu(/* native_actuals */ self, scales, zero_points, axis, dtype);
}
Tensor Type::dequantize(const Tensor & self) const {
    AT_ERROR("dequantize is not implemented for type ", toString());
}
Tensor Type::_dequantize_linear(const Tensor & self, double scale, int64_t zero_point, ScalarType dtype) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_dequantize_linear: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dequantize_linear_cpu(/* native_actuals */ self, scale, zero_point, dtype);
}
Scalar Type::q_scale(const Tensor & self) const {
    AT_ERROR("q_scale is not implemented for type ", toString());
}
Scalar Type::q_zero_point(const Tensor & self) const {
    AT_ERROR("q_zero_point is not implemented for type ", toString());
}
Tensor Type::int_repr(const Tensor & self) const {
    AT_ERROR("int_repr is not implemented for type ", toString());
}
Tensor Type::_per_tensor_affine_qtensor(const Tensor & self, double scale, int64_t zero_point) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_per_tensor_affine_qtensor: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::per_tensor_affine_qtensor_cpu(/* native_actuals */ self, scale, zero_point);
}
Scalar Type::_local_scalar_dense(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_local_scalar_dense: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_local_scalar_dense_cpu(/* native_actuals */ self);
}
std::tuple<Tensor,Tensor,Tensor> Type::_thnn_fused_lstm_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const Tensor & input_bias, const Tensor & hidden_bias) const {
    AT_ERROR("_thnn_fused_lstm_cell is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> Type::_thnn_fused_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias) const {
    AT_ERROR("_thnn_fused_lstm_cell_backward is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor> Type::_thnn_fused_gru_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias) const {
    AT_ERROR("_thnn_fused_gru_cell is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> Type::_thnn_fused_gru_cell_backward(const Tensor & grad_hy, const Tensor & workspace, bool has_bias) const {
    AT_ERROR("_thnn_fused_gru_cell_backward is not implemented for type ", toString());
}
Tensor & Type::set_(Tensor & self, Storage source) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("set_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::legacy::cpu::_th_set_(/* native_actuals */ self, source);
}
Tensor & Type::set_(Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("set_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::legacy::cpu::_th_set_(/* native_actuals */ self, source, storage_offset, size, stride);
}
Tensor & Type::set_(Tensor & self, const Tensor & source) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || source.is_named()) {
        AT_ERROR("set_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::legacy::cpu::_th_set_(/* native_actuals */ self, source);
}
Tensor & Type::set_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("set_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_set_(/* native_actuals */ self);
}
bool Type::is_set_to(const Tensor & self, const Tensor & tensor) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || tensor.is_named()) {
        AT_ERROR("is_set_to: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::legacy::cpu::_th_is_set_to(/* native_actuals */ self, tensor);
}
Tensor & Type::masked_fill_(Tensor & self, const Tensor & mask, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mask.is_named()) {
        AT_ERROR("masked_fill_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill__cpu(/* native_actuals */ self, mask, value);
}
Tensor & Type::masked_fill_(Tensor & self, const Tensor & mask, const Tensor & value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mask.is_named() || value.is_named()) {
        AT_ERROR("masked_fill_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill__cpu(/* native_actuals */ self, mask, value);
}
Tensor & Type::masked_scatter_(Tensor & self, const Tensor & mask, const Tensor & source) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mask.is_named() || source.is_named()) {
        AT_ERROR("masked_scatter_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_scatter__cpu(/* native_actuals */ self, mask, source);
}
Tensor Type::view(const Tensor & self, IntArrayRef size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("view: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::legacy::cpu::_th_view(/* native_actuals */ self, size);
}
Tensor & Type::put_(Tensor & self, const Tensor & index, const Tensor & source, bool accumulate) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named() || source.is_named()) {
        AT_ERROR("put_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_put_(/* native_actuals */ self, index, source, accumulate);
}
Tensor & Type::index_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named() || source.is_named()) {
        AT_ERROR("index_add_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_index_add_(/* native_actuals */ self, dim, index, source);
}
Tensor & Type::index_fill_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named()) {
        AT_ERROR("index_fill_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_index_fill_(/* native_actuals */ self, dim, index, value);
}
Tensor & Type::index_fill_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named() || value.is_named()) {
        AT_ERROR("index_fill_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_index_fill_(/* native_actuals */ self, dim, index, value);
}
Tensor & Type::scatter_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named() || src.is_named()) {
        AT_ERROR("scatter_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_scatter_(/* native_actuals */ self, dim, index, src);
}
Tensor & Type::scatter_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named()) {
        AT_ERROR("scatter_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_scatter_(/* native_actuals */ self, dim, index, value);
}
Tensor & Type::scatter_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named() || src.is_named()) {
        AT_ERROR("scatter_add_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_scatter_add_(/* native_actuals */ self, dim, index, src);
}
Tensor & Type::lt_(Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("lt_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_lt_(/* native_actuals */ self, other);
}
Tensor & Type::lt_(Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("lt_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_lt_(/* native_actuals */ self, other);
}
Tensor & Type::gt_(Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("gt_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_gt_(/* native_actuals */ self, other);
}
Tensor & Type::gt_(Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("gt_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_gt_(/* native_actuals */ self, other);
}
Tensor & Type::le_(Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("le_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_le_(/* native_actuals */ self, other);
}
Tensor & Type::le_(Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("le_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_le_(/* native_actuals */ self, other);
}
Tensor & Type::ge_(Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("ge_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ge_(/* native_actuals */ self, other);
}
Tensor & Type::ge_(Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("ge_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ge_(/* native_actuals */ self, other);
}
Tensor & Type::eq_(Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("eq_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_eq_(/* native_actuals */ self, other);
}
Tensor & Type::eq_(Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("eq_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_eq_(/* native_actuals */ self, other);
}
Tensor & Type::ne_(Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("ne_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ne_(/* native_actuals */ self, other);
}
Tensor & Type::ne_(Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("ne_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ne_(/* native_actuals */ self, other);
}
Tensor Type::__and__(const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("__and__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_and(/* native_actuals */ self, other);
}
Tensor Type::__and__(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("__and__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_and(/* native_actuals */ self, other);
}
Tensor & Type::__iand__(Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("__iand__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_iand_(/* native_actuals */ self, other);
}
Tensor & Type::__iand__(Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("__iand__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_iand_(/* native_actuals */ self, other);
}
Tensor Type::__or__(const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("__or__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_or(/* native_actuals */ self, other);
}
Tensor Type::__or__(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("__or__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_or(/* native_actuals */ self, other);
}
Tensor & Type::__ior__(Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("__ior__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ior_(/* native_actuals */ self, other);
}
Tensor & Type::__ior__(Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("__ior__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ior_(/* native_actuals */ self, other);
}
Tensor Type::__xor__(const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("__xor__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_xor(/* native_actuals */ self, other);
}
Tensor Type::__xor__(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("__xor__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_xor(/* native_actuals */ self, other);
}
Tensor & Type::__ixor__(Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("__ixor__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ixor_(/* native_actuals */ self, other);
}
Tensor & Type::__ixor__(Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("__ixor__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ixor_(/* native_actuals */ self, other);
}
Tensor Type::__lshift__(const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("__lshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_lshift(/* native_actuals */ self, other);
}
Tensor Type::__lshift__(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("__lshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_lshift(/* native_actuals */ self, other);
}
Tensor & Type::__ilshift__(Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("__ilshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ilshift_(/* native_actuals */ self, other);
}
Tensor & Type::__ilshift__(Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("__ilshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ilshift_(/* native_actuals */ self, other);
}
Tensor Type::__rshift__(const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("__rshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_rshift(/* native_actuals */ self, other);
}
Tensor Type::__rshift__(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("__rshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_rshift(/* native_actuals */ self, other);
}
Tensor & Type::__irshift__(Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("__irshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_irshift_(/* native_actuals */ self, other);
}
Tensor & Type::__irshift__(Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("__irshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_irshift_(/* native_actuals */ self, other);
}
Tensor & Type::lgamma_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("lgamma_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_lgamma_(/* native_actuals */ self);
}
Tensor & Type::atan2_(Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("atan2_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_atan2_(/* native_actuals */ self, other);
}
Tensor & Type::tril_(Tensor & self, int64_t diagonal) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("tril_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tril_cpu_(/* native_actuals */ self, diagonal);
}
Tensor & Type::triu_(Tensor & self, int64_t diagonal) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("triu_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triu_cpu_(/* native_actuals */ self, diagonal);
}
Tensor & Type::digamma_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("digamma_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_digamma_(/* native_actuals */ self);
}
Tensor & Type::polygamma_(Tensor & self, int64_t n) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("polygamma_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_polygamma_(/* native_actuals */ self, n);
}
Tensor & Type::erfinv_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("erfinv_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_erfinv_(/* native_actuals */ self);
}
Tensor & Type::renorm_(Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("renorm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_renorm_(/* native_actuals */ self, p, dim, maxnorm);
}
Tensor & Type::pow_(Tensor & self, Scalar exponent) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("pow_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_pow_(/* native_actuals */ self, exponent);
}
Tensor & Type::pow_(Tensor & self, const Tensor & exponent) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || exponent.is_named()) {
        AT_ERROR("pow_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_pow_(/* native_actuals */ self, exponent);
}
Tensor & Type::lerp_(Tensor & self, const Tensor & end, Scalar weight) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || end.is_named()) {
        AT_ERROR("lerp_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cpu_scalar_(/* native_actuals */ self, end, weight);
}
Tensor & Type::lerp_(Tensor & self, const Tensor & end, const Tensor & weight) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || end.is_named() || weight.is_named()) {
        AT_ERROR("lerp_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cpu_tensor_(/* native_actuals */ self, end, weight);
}
Tensor & Type::sign_(Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sign_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_sign_(/* native_actuals */ self);
}
Tensor & Type::fmod_(Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("fmod_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_fmod_(/* native_actuals */ self, other);
}
Tensor & Type::fmod_(Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("fmod_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_fmod_(/* native_actuals */ self, other);
}
Tensor & Type::remainder_(Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("remainder_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_remainder_(/* native_actuals */ self, other);
}
Tensor & Type::remainder_(Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("remainder_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_remainder_(/* native_actuals */ self, other);
}
Tensor & Type::addbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || batch1.is_named() || batch2.is_named()) {
        AT_ERROR("addbmm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addbmm_(/* native_actuals */ self, batch1, batch2, beta, alpha);
}
Tensor & Type::addbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || batch1.is_named() || batch2.is_named()) {
        AT_ERROR("addbmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addbmm_out(/* native_actuals */ out, self, batch1, batch2, beta, alpha);
}
Tensor Type::addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || batch1.is_named() || batch2.is_named()) {
        AT_ERROR("addbmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addbmm(/* native_actuals */ self, batch1, batch2, beta, alpha);
}
Tensor & Type::addcmul_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || tensor1.is_named() || tensor2.is_named()) {
        AT_ERROR("addcmul_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addcmul_(/* native_actuals */ self, tensor1, tensor2, value);
}
Tensor & Type::addcdiv_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || tensor1.is_named() || tensor2.is_named()) {
        AT_ERROR("addcdiv_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addcdiv_(/* native_actuals */ self, tensor1, tensor2, value);
}
Tensor & Type::random_(Tensor & self, int64_t from, int64_t to, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("random_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_random_(/* native_actuals */ self, from, to, generator);
}
Tensor & Type::random_(Tensor & self, int64_t to, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("random_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_random_(/* native_actuals */ self, to, generator);
}
Tensor & Type::random_(Tensor & self, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("random_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_random_(/* native_actuals */ self, generator);
}
Tensor & Type::uniform_(Tensor & self, double from, double to, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("uniform_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_uniform_(/* native_actuals */ self, from, to, generator);
}
Tensor & Type::normal_(Tensor & self, double mean, double std, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("normal_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_normal_(/* native_actuals */ self, mean, std, generator);
}
Tensor & Type::cauchy_(Tensor & self, double median, double sigma, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("cauchy_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_cauchy_(/* native_actuals */ self, median, sigma, generator);
}
Tensor & Type::log_normal_(Tensor & self, double mean, double std, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("log_normal_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_log_normal_(/* native_actuals */ self, mean, std, generator);
}
Tensor & Type::exponential_(Tensor & self, double lambd, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("exponential_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_exponential_(/* native_actuals */ self, lambd, generator);
}
Tensor & Type::geometric_(Tensor & self, double p, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("geometric_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_geometric_(/* native_actuals */ self, p, generator);
}
Tensor & Type::diag_out(Tensor & out, const Tensor & self, int64_t diagonal) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("diag_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_diag_out(/* native_actuals */ out, self, diagonal);
}
Tensor Type::diag(const Tensor & self, int64_t diagonal) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("diag: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_diag(/* native_actuals */ self, diagonal);
}
Tensor & Type::triu_out(Tensor & out, const Tensor & self, int64_t diagonal) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("triu_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triu_cpu_out(/* native_actuals */ out, self, diagonal);
}
Tensor & Type::tril_out(Tensor & out, const Tensor & self, int64_t diagonal) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("tril_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tril_cpu_out(/* native_actuals */ out, self, diagonal);
}
Tensor Type::tril_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::tril_indices_cpu(/* native_actuals */ row, col, offset, options);
}
Tensor Type::triu_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) const {
#ifdef NAMEDTENSOR_ENABLED

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::triu_indices_cpu(/* native_actuals */ row, col, offset, options);
}
Tensor Type::trace(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("trace: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_trace(/* native_actuals */ self);
}
Tensor & Type::ne_out(Tensor & out, const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("ne_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ne_out(/* native_actuals */ out, self, other);
}
Tensor Type::ne(const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("ne: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ne(/* native_actuals */ self, other);
}
Tensor & Type::ne_out(Tensor & out, const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("ne_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ne_out(/* native_actuals */ out, self, other);
}
Tensor Type::ne(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("ne: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ne(/* native_actuals */ self, other);
}
Tensor & Type::eq_out(Tensor & out, const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("eq_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_eq_out(/* native_actuals */ out, self, other);
}
Tensor Type::eq(const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("eq: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_eq(/* native_actuals */ self, other);
}
Tensor & Type::eq_out(Tensor & out, const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("eq_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_eq_out(/* native_actuals */ out, self, other);
}
Tensor Type::eq(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("eq: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_eq(/* native_actuals */ self, other);
}
Tensor & Type::ge_out(Tensor & out, const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("ge_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ge_out(/* native_actuals */ out, self, other);
}
Tensor Type::ge(const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("ge: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ge(/* native_actuals */ self, other);
}
Tensor & Type::ge_out(Tensor & out, const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("ge_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ge_out(/* native_actuals */ out, self, other);
}
Tensor Type::ge(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("ge: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ge(/* native_actuals */ self, other);
}
Tensor & Type::le_out(Tensor & out, const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("le_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_le_out(/* native_actuals */ out, self, other);
}
Tensor Type::le(const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("le: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_le(/* native_actuals */ self, other);
}
Tensor & Type::le_out(Tensor & out, const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("le_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_le_out(/* native_actuals */ out, self, other);
}
Tensor Type::le(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("le: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_le(/* native_actuals */ self, other);
}
Tensor & Type::gt_out(Tensor & out, const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("gt_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_gt_out(/* native_actuals */ out, self, other);
}
Tensor Type::gt(const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("gt: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_gt(/* native_actuals */ self, other);
}
Tensor & Type::gt_out(Tensor & out, const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("gt_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_gt_out(/* native_actuals */ out, self, other);
}
Tensor Type::gt(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("gt: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_gt(/* native_actuals */ self, other);
}
Tensor & Type::lt_out(Tensor & out, const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("lt_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_lt_out(/* native_actuals */ out, self, other);
}
Tensor Type::lt(const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("lt: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_lt(/* native_actuals */ self, other);
}
Tensor & Type::lt_out(Tensor & out, const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("lt_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_lt_out(/* native_actuals */ out, self, other);
}
Tensor Type::lt(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("lt: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_lt(/* native_actuals */ self, other);
}
Tensor & Type::take_out(Tensor & out, const Tensor & self, const Tensor & index) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || index.is_named()) {
        AT_ERROR("take_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_take_out(/* native_actuals */ out, self, index);
}
Tensor Type::take(const Tensor & self, const Tensor & index) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named()) {
        AT_ERROR("take: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_take(/* native_actuals */ self, index);
}
Tensor & Type::index_select_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || index.is_named()) {
        AT_ERROR("index_select_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_index_select_out(/* native_actuals */ out, self, dim, index);
}
Tensor Type::index_select(const Tensor & self, int64_t dim, const Tensor & index) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named()) {
        AT_ERROR("index_select: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_index_select(/* native_actuals */ self, dim, index);
}
Tensor & Type::masked_select_out(Tensor & out, const Tensor & self, const Tensor & mask) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || mask.is_named()) {
        AT_ERROR("masked_select_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_masked_select_out(/* native_actuals */ out, self, mask);
}
Tensor Type::masked_select(const Tensor & self, const Tensor & mask) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mask.is_named()) {
        AT_ERROR("masked_select: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_select_cpu(/* native_actuals */ self, mask);
}
Tensor & Type::nonzero_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("nonzero_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_nonzero_out(/* native_actuals */ out, self);
}
Tensor Type::nonzero(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("nonzero: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_nonzero(/* native_actuals */ self);
}
Tensor & Type::gather_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || index.is_named()) {
        AT_ERROR("gather_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gather_out_cpu(/* native_actuals */ out, self, dim, index, sparse_grad);
}
Tensor Type::gather(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named()) {
        AT_ERROR("gather: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gather_cpu(/* native_actuals */ self, dim, index, sparse_grad);
}
Tensor & Type::addcmul_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || tensor1.is_named() || tensor2.is_named()) {
        AT_ERROR("addcmul_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addcmul_out(/* native_actuals */ out, self, tensor1, tensor2, value);
}
Tensor Type::addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || tensor1.is_named() || tensor2.is_named()) {
        AT_ERROR("addcmul: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addcmul(/* native_actuals */ self, tensor1, tensor2, value);
}
Tensor & Type::addcdiv_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || tensor1.is_named() || tensor2.is_named()) {
        AT_ERROR("addcdiv_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addcdiv_out(/* native_actuals */ out, self, tensor1, tensor2, value);
}
Tensor Type::addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || tensor1.is_named() || tensor2.is_named()) {
        AT_ERROR("addcdiv: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addcdiv(/* native_actuals */ self, tensor1, tensor2, value);
}
std::tuple<Tensor &,Tensor &> Type::gels_out(Tensor & X, Tensor & qr, const Tensor & self, const Tensor & A) const {
#ifdef NAMEDTENSOR_ENABLED
    if (X.is_named() || qr.is_named() || self.is_named() || A.is_named()) {
        AT_ERROR("gels_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_gels_out(/* native_actuals */ X, qr, self, A);
}
std::tuple<Tensor,Tensor> Type::gels(const Tensor & self, const Tensor & A) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || A.is_named()) {
        AT_ERROR("gels: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_gels(/* native_actuals */ self, A);
}
std::tuple<Tensor,Tensor> Type::_triangular_solve_helper(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || A.is_named()) {
        AT_ERROR("_triangular_solve_helper: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_triangular_solve_helper_cpu(/* native_actuals */ self, A, upper, transpose, unitriangular);
}
std::tuple<Tensor &,Tensor &> Type::symeig_out(Tensor & e, Tensor & V, const Tensor & self, bool eigenvectors, bool upper) const {
#ifdef NAMEDTENSOR_ENABLED
    if (e.is_named() || V.is_named() || self.is_named()) {
        AT_ERROR("symeig_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_symeig_out(/* native_actuals */ e, V, self, eigenvectors, upper);
}
std::tuple<Tensor,Tensor> Type::symeig(const Tensor & self, bool eigenvectors, bool upper) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("symeig: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_symeig(/* native_actuals */ self, eigenvectors, upper);
}
std::tuple<Tensor &,Tensor &> Type::eig_out(Tensor & e, Tensor & v, const Tensor & self, bool eigenvectors) const {
#ifdef NAMEDTENSOR_ENABLED
    if (e.is_named() || v.is_named() || self.is_named()) {
        AT_ERROR("eig_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_eig_out(/* native_actuals */ e, v, self, eigenvectors);
}
std::tuple<Tensor,Tensor> Type::eig(const Tensor & self, bool eigenvectors) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("eig: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_eig(/* native_actuals */ self, eigenvectors);
}
std::tuple<Tensor &,Tensor &,Tensor &> Type::svd_out(Tensor & U, Tensor & S, Tensor & V, const Tensor & self, bool some, bool compute_uv) const {
#ifdef NAMEDTENSOR_ENABLED
    if (U.is_named() || S.is_named() || V.is_named() || self.is_named()) {
        AT_ERROR("svd_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_svd_out(/* native_actuals */ U, S, V, self, some, compute_uv);
}
std::tuple<Tensor,Tensor,Tensor> Type::svd(const Tensor & self, bool some, bool compute_uv) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("svd: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_svd(/* native_actuals */ self, some, compute_uv);
}
Tensor Type::_cholesky_helper(const Tensor & self, bool upper) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_cholesky_helper: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cholesky_helper_cpu(/* native_actuals */ self, upper);
}
Tensor Type::_cholesky_solve_helper(const Tensor & self, const Tensor & A, bool upper) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || A.is_named()) {
        AT_ERROR("_cholesky_solve_helper: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cholesky_solve_helper_cpu(/* native_actuals */ self, A, upper);
}
std::tuple<Tensor,Tensor> Type::_solve_helper(const Tensor & self, const Tensor & A) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || A.is_named()) {
        AT_ERROR("_solve_helper: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_solve_helper_cpu(/* native_actuals */ self, A);
}
Tensor & Type::cholesky_inverse_out(Tensor & out, const Tensor & self, bool upper) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("cholesky_inverse_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_potri_out(/* native_actuals */ out, self, upper);
}
Tensor Type::cholesky_inverse(const Tensor & self, bool upper) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("cholesky_inverse: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_potri(/* native_actuals */ self, upper);
}
std::tuple<Tensor &,Tensor &> Type::pstrf_out(Tensor & u, Tensor & pivot, const Tensor & self, bool upper, Scalar tol) const {
#ifdef NAMEDTENSOR_ENABLED
    if (u.is_named() || pivot.is_named() || self.is_named()) {
        AT_ERROR("pstrf_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_pstrf_out(/* native_actuals */ u, pivot, self, upper, tol);
}
std::tuple<Tensor,Tensor> Type::pstrf(const Tensor & self, bool upper, Scalar tol) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("pstrf: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_pstrf(/* native_actuals */ self, upper, tol);
}
std::tuple<Tensor,Tensor> Type::_qr_helper(const Tensor & self, bool some) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_qr_helper: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_qr_helper_cpu(/* native_actuals */ self, some);
}
std::tuple<Tensor &,Tensor &> Type::geqrf_out(Tensor & a, Tensor & tau, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (a.is_named() || tau.is_named() || self.is_named()) {
        AT_ERROR("geqrf_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_geqrf_out(/* native_actuals */ a, tau, self);
}
std::tuple<Tensor,Tensor> Type::geqrf(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("geqrf: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_geqrf(/* native_actuals */ self);
}
Tensor & Type::orgqr_out(Tensor & out, const Tensor & self, const Tensor & input2) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || input2.is_named()) {
        AT_ERROR("orgqr_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_orgqr_out(/* native_actuals */ out, self, input2);
}
Tensor Type::orgqr(const Tensor & self, const Tensor & input2) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || input2.is_named()) {
        AT_ERROR("orgqr: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_orgqr(/* native_actuals */ self, input2);
}
Tensor & Type::ormqr_out(Tensor & out, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || input2.is_named() || input3.is_named()) {
        AT_ERROR("ormqr_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ormqr_out(/* native_actuals */ out, self, input2, input3, left, transpose);
}
Tensor Type::ormqr(const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || input2.is_named() || input3.is_named()) {
        AT_ERROR("ormqr: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ormqr(/* native_actuals */ self, input2, input3, left, transpose);
}
std::tuple<Tensor,Tensor,Tensor> Type::_lu_with_info(const Tensor & self, bool pivot, bool check_errors) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_lu_with_info: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_lu_with_info_cpu(/* native_actuals */ self, pivot, check_errors);
}
Tensor & Type::lu_solve_out(Tensor & out, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || LU_data.is_named() || LU_pivots.is_named()) {
        AT_ERROR("lu_solve_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_btrisolve_out(/* native_actuals */ out, self, LU_data, LU_pivots);
}
Tensor Type::lu_solve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || LU_data.is_named() || LU_pivots.is_named()) {
        AT_ERROR("lu_solve: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_btrisolve(/* native_actuals */ self, LU_data, LU_pivots);
}
Tensor & Type::multinomial_out(Tensor & out, const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("multinomial_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_multinomial_out(/* native_actuals */ out, self, num_samples, replacement, generator);
}
Tensor Type::multinomial(const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("multinomial: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_multinomial(/* native_actuals */ self, num_samples, replacement, generator);
}
std::tuple<Tensor,Tensor> Type::_multinomial_alias_setup(const Tensor & probs) const {
#ifdef NAMEDTENSOR_ENABLED
    if (probs.is_named()) {
        AT_ERROR("_multinomial_alias_setup: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(probs));
    return at::native::legacy::cpu::_th_multinomial_alias_setup(/* native_actuals */ probs);
}
Tensor Type::_multinomial_alias_draw(const Tensor & J, const Tensor & q, int64_t num_samples, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (J.is_named() || q.is_named()) {
        AT_ERROR("_multinomial_alias_draw: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(J));
    return at::native::legacy::cpu::_th_multinomial_alias_draw(/* native_actuals */ J, q, num_samples, generator);
}
Tensor & Type::lgamma_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("lgamma_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_lgamma_out(/* native_actuals */ out, self);
}
Tensor Type::lgamma(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("lgamma: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_lgamma(/* native_actuals */ self);
}
Tensor & Type::digamma_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("digamma_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_digamma_out(/* native_actuals */ out, self);
}
Tensor Type::digamma(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("digamma: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_digamma(/* native_actuals */ self);
}
Tensor & Type::polygamma_out(Tensor & out, int64_t n, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("polygamma_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_polygamma_out(/* native_actuals */ out, n, self);
}
Tensor Type::polygamma(int64_t n, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("polygamma: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_polygamma(/* native_actuals */ n, self);
}
Tensor & Type::erfinv_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("erfinv_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_erfinv_out(/* native_actuals */ out, self);
}
Tensor Type::erfinv(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("erfinv: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_erfinv(/* native_actuals */ self);
}
Tensor Type::dist(const Tensor & self, const Tensor & other, Scalar p) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("dist: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_dist(/* native_actuals */ self, other, p);
}
Tensor & Type::atan2_out(Tensor & out, const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("atan2_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_atan2_out(/* native_actuals */ out, self, other);
}
Tensor Type::atan2(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("atan2: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_atan2(/* native_actuals */ self, other);
}
Tensor & Type::lerp_out(Tensor & out, const Tensor & self, const Tensor & end, Scalar weight) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || end.is_named()) {
        AT_ERROR("lerp_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cpu_scalar_out(/* native_actuals */ out, self, end, weight);
}
Tensor & Type::lerp_out(Tensor & out, const Tensor & self, const Tensor & end, const Tensor & weight) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || end.is_named() || weight.is_named()) {
        AT_ERROR("lerp_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cpu_tensor_out(/* native_actuals */ out, self, end, weight);
}
Tensor Type::lerp(const Tensor & self, const Tensor & end, Scalar weight) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || end.is_named()) {
        AT_ERROR("lerp: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cpu_scalar(/* native_actuals */ self, end, weight);
}
Tensor Type::lerp(const Tensor & self, const Tensor & end, const Tensor & weight) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || end.is_named() || weight.is_named()) {
        AT_ERROR("lerp: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cpu_tensor(/* native_actuals */ self, end, weight);
}
Tensor & Type::histc_out(Tensor & out, const Tensor & self, int64_t bins, Scalar min, Scalar max) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("histc_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_histc_out(/* native_actuals */ out, self, bins, min, max);
}
Tensor Type::histc(const Tensor & self, int64_t bins, Scalar min, Scalar max) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("histc: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_histc(/* native_actuals */ self, bins, min, max);
}
Tensor & Type::sign_out(Tensor & out, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("sign_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_sign_out(/* native_actuals */ out, self);
}
Tensor Type::sign(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sign: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_sign(/* native_actuals */ self);
}
Tensor & Type::fmod_out(Tensor & out, const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("fmod_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_fmod_out(/* native_actuals */ out, self, other);
}
Tensor Type::fmod(const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("fmod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_fmod(/* native_actuals */ self, other);
}
Tensor & Type::fmod_out(Tensor & out, const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("fmod_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_fmod_out(/* native_actuals */ out, self, other);
}
Tensor Type::fmod(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("fmod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_fmod(/* native_actuals */ self, other);
}
Tensor & Type::remainder_out(Tensor & out, const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("remainder_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_remainder_out(/* native_actuals */ out, self, other);
}
Tensor Type::remainder(const Tensor & self, Scalar other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("remainder: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_remainder(/* native_actuals */ self, other);
}
Tensor & Type::remainder_out(Tensor & out, const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("remainder_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_remainder_out(/* native_actuals */ out, self, other);
}
Tensor Type::remainder(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("remainder: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_remainder(/* native_actuals */ self, other);
}
Tensor & Type::min_out(Tensor & out, const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("min_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_min_out(/* native_actuals */ out, self, other);
}
Tensor Type::min(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("min: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_min(/* native_actuals */ self, other);
}
Tensor Type::min(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("min: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_min(/* native_actuals */ self);
}
Tensor & Type::max_out(Tensor & out, const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || other.is_named()) {
        AT_ERROR("max_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_max_out(/* native_actuals */ out, self, other);
}
Tensor Type::max(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("max: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_max(/* native_actuals */ self, other);
}
Tensor Type::max(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("max: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_max(/* native_actuals */ self);
}
Tensor Type::median(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("median: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median_cpu(/* native_actuals */ self);
}
std::tuple<Tensor &,Tensor &> Type::sort_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool descending) const {
#ifdef NAMEDTENSOR_ENABLED
    if (values.is_named() || indices.is_named() || self.is_named()) {
        AT_ERROR("sort_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_sort_out(/* native_actuals */ values, indices, self, dim, descending);
}
std::tuple<Tensor,Tensor> Type::sort(const Tensor & self, int64_t dim, bool descending) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("sort: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_sort(/* native_actuals */ self, dim, descending);
}
std::tuple<Tensor &,Tensor &> Type::topk_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) const {
#ifdef NAMEDTENSOR_ENABLED
    if (values.is_named() || indices.is_named() || self.is_named()) {
        AT_ERROR("topk_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_topk_out(/* native_actuals */ values, indices, self, k, dim, largest, sorted);
}
std::tuple<Tensor,Tensor> Type::topk(const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("topk: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_topk(/* native_actuals */ self, k, dim, largest, sorted);
}
Tensor & Type::renorm_out(Tensor & out, const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("renorm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_renorm_out(/* native_actuals */ out, self, p, dim, maxnorm);
}
Tensor Type::renorm(const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("renorm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_renorm(/* native_actuals */ self, p, dim, maxnorm);
}
Tensor Type::unfold(const Tensor & self, int64_t dimension, int64_t size, int64_t step) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("unfold: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_unfold(/* native_actuals */ self, dimension, size, step);
}
bool Type::equal(const Tensor & self, const Tensor & other) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || other.is_named()) {
        AT_ERROR("equal: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_equal(/* native_actuals */ self, other);
}
Tensor & Type::pow_out(Tensor & out, const Tensor & self, const Tensor & exponent) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || exponent.is_named()) {
        AT_ERROR("pow_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_pow_out(/* native_actuals */ out, self, exponent);
}
Tensor Type::pow(const Tensor & self, const Tensor & exponent) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || exponent.is_named()) {
        AT_ERROR("pow: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_pow(/* native_actuals */ self, exponent);
}
Tensor & Type::pow_out(Tensor & out, Scalar self, const Tensor & exponent) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || exponent.is_named()) {
        AT_ERROR("pow_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::legacy::cpu::_th_pow_out(/* native_actuals */ out, self, exponent);
}
Tensor Type::pow(Scalar self, const Tensor & exponent) const {
#ifdef NAMEDTENSOR_ENABLED
    if (exponent.is_named()) {
        AT_ERROR("pow: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(exponent));
    return at::native::legacy::cpu::_th_pow(/* native_actuals */ self, exponent);
}
Tensor & Type::normal_out(Tensor & out, const Tensor & mean, double std, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || mean.is_named()) {
        AT_ERROR("normal_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::legacy::cpu::_th_normal_out(/* native_actuals */ out, mean, std, generator);
}
Tensor Type::normal(const Tensor & mean, double std, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (mean.is_named()) {
        AT_ERROR("normal: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(mean));
    return at::native::legacy::cpu::_th_normal(/* native_actuals */ mean, std, generator);
}
Tensor & Type::normal_out(Tensor & out, double mean, const Tensor & std, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || std.is_named()) {
        AT_ERROR("normal_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::legacy::cpu::_th_normal_out(/* native_actuals */ out, mean, std, generator);
}
Tensor Type::normal(double mean, const Tensor & std, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (std.is_named()) {
        AT_ERROR("normal: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(std));
    return at::native::legacy::cpu::_th_normal(/* native_actuals */ mean, std, generator);
}
Tensor & Type::normal_out(Tensor & out, const Tensor & mean, const Tensor & std, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || mean.is_named() || std.is_named()) {
        AT_ERROR("normal_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::legacy::cpu::_th_normal_out(/* native_actuals */ out, mean, std, generator);
}
Tensor Type::normal(const Tensor & mean, const Tensor & std, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (mean.is_named() || std.is_named()) {
        AT_ERROR("normal: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(mean));
    return at::native::legacy::cpu::_th_normal(/* native_actuals */ mean, std, generator);
}
Tensor Type::alias(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("alias: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_alias(/* native_actuals */ self);
}
Tensor Type::_addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || vec1.is_named() || vec2.is_named()) {
        AT_ERROR("_addr: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addr(/* native_actuals */ self, vec1, vec2, beta, alpha);
}
Tensor & Type::_addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || vec1.is_named() || vec2.is_named()) {
        AT_ERROR("_addr_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addr_(/* native_actuals */ self, vec1, vec2, beta, alpha);
}
Tensor & Type::_addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || vec1.is_named() || vec2.is_named()) {
        AT_ERROR("_addr_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addr_out(/* native_actuals */ out, self, vec1, vec2, beta, alpha);
}
Tensor & Type::_index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || index.is_named() || source.is_named()) {
        AT_ERROR("_index_copy_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_index_copy_(/* native_actuals */ self, dim, index, source);
}
Tensor Type::_cumsum(const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_cumsum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_cumsum(/* native_actuals */ self, dim);
}
Tensor & Type::_cumsum_out(Tensor & out, const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("_cumsum_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_cumsum_out(/* native_actuals */ out, self, dim);
}
Tensor Type::_cumprod(const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_cumprod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_cumprod(/* native_actuals */ self, dim);
}
Tensor & Type::_cumprod_out(Tensor & out, const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("_cumprod_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_cumprod_out(/* native_actuals */ out, self, dim);
}
Tensor Type::_var(const Tensor & self, bool unbiased) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_var: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_var(/* native_actuals */ self, unbiased);
}
Tensor Type::_std(const Tensor & self, bool unbiased) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_std: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_std(/* native_actuals */ self, unbiased);
}
Tensor & Type::_addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || mat1.is_named() || mat2.is_named()) {
        AT_ERROR("_addmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addmm_out(/* native_actuals */ out, self, mat1, mat2, beta, alpha);
}
Tensor Type::_addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mat1.is_named() || mat2.is_named()) {
        AT_ERROR("_addmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addmm(/* native_actuals */ self, mat1, mat2, beta, alpha);
}
Tensor & Type::_addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || mat1.is_named() || mat2.is_named()) {
        AT_ERROR("_addmm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addmm_(/* native_actuals */ self, mat1, mat2, beta, alpha);
}
Tensor Type::_cat(TensorList tensors, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (at::has_names(tensors)) {
        AT_ERROR("_cat: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::legacy::cpu::_th_cat(/* native_actuals */ tensors, dim);
}
Tensor & Type::_cat_out(Tensor & out, TensorList tensors, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || at::has_names(tensors)) {
        AT_ERROR("_cat_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::legacy::cpu::_th_cat_out(/* native_actuals */ out, tensors, dim);
}
std::tuple<Tensor,Tensor> Type::_mode(const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_mode: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_mode(/* native_actuals */ self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> Type::_mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (values.is_named() || indices.is_named() || self.is_named()) {
        AT_ERROR("_mode_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_mode_out(/* native_actuals */ values, indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> Type::_max(const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_max: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_max(/* native_actuals */ self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> Type::_max_out(Tensor & max, Tensor & max_indices, const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (max.is_named() || max_indices.is_named() || self.is_named()) {
        AT_ERROR("_max_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_max_out(/* native_actuals */ max, max_indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> Type::_min(const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_min: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_min(/* native_actuals */ self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> Type::_min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (min.is_named() || min_indices.is_named() || self.is_named()) {
        AT_ERROR("_min_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_min_out(/* native_actuals */ min, min_indices, self, dim, keepdim);
}
Tensor & Type::binary_cross_entropy_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || target.is_named() || weight.is_named()) {
        AT_ERROR("binary_cross_entropy_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_binary_cross_entropy_forward_out(/* native_actuals */ out, self, target, weight, reduction);
}
Tensor Type::binary_cross_entropy(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || target.is_named() || weight.is_named()) {
        AT_ERROR("binary_cross_entropy: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_binary_cross_entropy_forward(/* native_actuals */ self, target, weight, reduction);
}
Tensor & Type::binary_cross_entropy_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || target.is_named() || weight.is_named()) {
        AT_ERROR("binary_cross_entropy_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_binary_cross_entropy_backward_out(/* native_actuals */ grad_input, grad_output, self, target, weight, reduction);
}
Tensor Type::binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || target.is_named() || weight.is_named()) {
        AT_ERROR("binary_cross_entropy_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_binary_cross_entropy_backward(/* native_actuals */ grad_output, self, target, weight, reduction);
}
Tensor & Type::mse_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || target.is_named()) {
        AT_ERROR("mse_loss_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_mse_loss_forward_out(/* native_actuals */ out, self, target, reduction);
}
Tensor Type::mse_loss(const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || target.is_named()) {
        AT_ERROR("mse_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_mse_loss_forward(/* native_actuals */ self, target, reduction);
}
Tensor & Type::mse_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || target.is_named()) {
        AT_ERROR("mse_loss_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_mse_loss_backward_out(/* native_actuals */ grad_input, grad_output, self, target, reduction);
}
Tensor Type::mse_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || target.is_named()) {
        AT_ERROR("mse_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_mse_loss_backward(/* native_actuals */ grad_output, self, target, reduction);
}
Tensor & Type::l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || target.is_named()) {
        AT_ERROR("l1_loss_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_l1_loss_forward_out(/* native_actuals */ out, self, target, reduction);
}
Tensor Type::l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || target.is_named()) {
        AT_ERROR("l1_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_l1_loss_forward(/* native_actuals */ self, target, reduction);
}
Tensor & Type::l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || target.is_named()) {
        AT_ERROR("l1_loss_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_l1_loss_backward_out(/* native_actuals */ grad_input, grad_output, self, target, reduction);
}
Tensor Type::l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || target.is_named()) {
        AT_ERROR("l1_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_l1_loss_backward(/* native_actuals */ grad_output, self, target, reduction);
}
Tensor & Type::multi_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || target.is_named() || weight.is_named()) {
        AT_ERROR("multi_margin_loss_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_multi_margin_loss_forward_out(/* native_actuals */ out, self, target, p, margin, weight, reduction);
}
Tensor Type::multi_margin_loss(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || target.is_named() || weight.is_named()) {
        AT_ERROR("multi_margin_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_multi_margin_loss_forward(/* native_actuals */ self, target, p, margin, weight, reduction);
}
Tensor & Type::multi_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || target.is_named() || weight.is_named()) {
        AT_ERROR("multi_margin_loss_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_multi_margin_loss_backward_out(/* native_actuals */ grad_input, grad_output, self, target, p, margin, weight, reduction);
}
Tensor Type::multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || target.is_named() || weight.is_named()) {
        AT_ERROR("multi_margin_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_multi_margin_loss_backward(/* native_actuals */ grad_output, self, target, p, margin, weight, reduction);
}
std::tuple<Tensor &,Tensor &> Type::multilabel_margin_loss_forward_out(Tensor & output, Tensor & is_target, const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (output.is_named() || is_target.is_named() || self.is_named() || target.is_named()) {
        AT_ERROR("multilabel_margin_loss_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_multilabel_margin_loss_forward_out(/* native_actuals */ output, is_target, self, target, reduction);
}
std::tuple<Tensor,Tensor> Type::multilabel_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || target.is_named()) {
        AT_ERROR("multilabel_margin_loss_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_multilabel_margin_loss_forward(/* native_actuals */ self, target, reduction);
}
Tensor & Type::multilabel_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || target.is_named() || is_target.is_named()) {
        AT_ERROR("multilabel_margin_loss_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_multilabel_margin_loss_backward_out(/* native_actuals */ grad_input, grad_output, self, target, reduction, is_target);
}
Tensor Type::multilabel_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || target.is_named() || is_target.is_named()) {
        AT_ERROR("multilabel_margin_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_multilabel_margin_loss_backward(/* native_actuals */ grad_output, self, target, reduction, is_target);
}
std::tuple<Tensor &,Tensor &> Type::nll_loss_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const {
#ifdef NAMEDTENSOR_ENABLED
    if (output.is_named() || total_weight.is_named() || self.is_named() || target.is_named() || weight.is_named()) {
        AT_ERROR("nll_loss_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_nll_loss_forward_out(/* native_actuals */ output, total_weight, self, target, weight, reduction, ignore_index);
}
std::tuple<Tensor,Tensor> Type::nll_loss_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || target.is_named() || weight.is_named()) {
        AT_ERROR("nll_loss_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_nll_loss_forward(/* native_actuals */ self, target, weight, reduction, ignore_index);
}
Tensor & Type::nll_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || target.is_named() || weight.is_named() || total_weight.is_named()) {
        AT_ERROR("nll_loss_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_nll_loss_backward_out(/* native_actuals */ grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
Tensor Type::nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || target.is_named() || weight.is_named() || total_weight.is_named()) {
        AT_ERROR("nll_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_nll_loss_backward(/* native_actuals */ grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
std::tuple<Tensor &,Tensor &> Type::nll_loss2d_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const {
#ifdef NAMEDTENSOR_ENABLED
    if (output.is_named() || total_weight.is_named() || self.is_named() || target.is_named() || weight.is_named()) {
        AT_ERROR("nll_loss2d_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_nll_loss2d_forward_out(/* native_actuals */ output, total_weight, self, target, weight, reduction, ignore_index);
}
std::tuple<Tensor,Tensor> Type::nll_loss2d_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || target.is_named() || weight.is_named()) {
        AT_ERROR("nll_loss2d_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_nll_loss2d_forward(/* native_actuals */ self, target, weight, reduction, ignore_index);
}
Tensor & Type::nll_loss2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || target.is_named() || weight.is_named() || total_weight.is_named()) {
        AT_ERROR("nll_loss2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_nll_loss2d_backward_out(/* native_actuals */ grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
Tensor Type::nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || target.is_named() || weight.is_named() || total_weight.is_named()) {
        AT_ERROR("nll_loss2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_nll_loss2d_backward(/* native_actuals */ grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
Tensor & Type::smooth_l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || target.is_named()) {
        AT_ERROR("smooth_l1_loss_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_smooth_l1_loss_forward_out(/* native_actuals */ out, self, target, reduction);
}
Tensor Type::smooth_l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || target.is_named()) {
        AT_ERROR("smooth_l1_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_smooth_l1_loss_forward(/* native_actuals */ self, target, reduction);
}
Tensor & Type::smooth_l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || target.is_named()) {
        AT_ERROR("smooth_l1_loss_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_smooth_l1_loss_backward_out(/* native_actuals */ grad_input, grad_output, self, target, reduction);
}
Tensor Type::smooth_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || target.is_named()) {
        AT_ERROR("smooth_l1_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_smooth_l1_loss_backward(/* native_actuals */ grad_output, self, target, reduction);
}
Tensor & Type::soft_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || target.is_named()) {
        AT_ERROR("soft_margin_loss_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_soft_margin_loss_forward_out(/* native_actuals */ out, self, target, reduction);
}
Tensor Type::soft_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || target.is_named()) {
        AT_ERROR("soft_margin_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_soft_margin_loss_forward(/* native_actuals */ self, target, reduction);
}
Tensor & Type::soft_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || target.is_named()) {
        AT_ERROR("soft_margin_loss_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_soft_margin_loss_backward_out(/* native_actuals */ grad_input, grad_output, self, target, reduction);
}
Tensor Type::soft_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || target.is_named()) {
        AT_ERROR("soft_margin_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_soft_margin_loss_backward(/* native_actuals */ grad_output, self, target, reduction);
}
Tensor & Type::elu_out(Tensor & out, const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("elu_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_elu_forward_out(/* native_actuals */ out, self, alpha, scale, input_scale);
}
Tensor Type::elu(const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("elu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_elu_forward(/* native_actuals */ self, alpha, scale, input_scale);
}
Tensor & Type::elu_backward_out(Tensor & grad_input, const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || output.is_named()) {
        AT_ERROR("elu_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::legacy::cpu::_thnn_elu_backward_out(/* native_actuals */ grad_input, grad_output, alpha, scale, input_scale, output);
}
Tensor Type::elu_backward(const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || output.is_named()) {
        AT_ERROR("elu_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::legacy::cpu::_thnn_elu_backward(/* native_actuals */ grad_output, alpha, scale, input_scale, output);
}
Tensor & Type::elu_(Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("elu_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_elu_forward_(/* native_actuals */ self, alpha, scale, input_scale);
}
Tensor & Type::glu_out(Tensor & out, const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("glu_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_glu_forward_out(/* native_actuals */ out, self, dim);
}
Tensor Type::glu(const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("glu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_glu_forward(/* native_actuals */ self, dim);
}
Tensor & Type::glu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named()) {
        AT_ERROR("glu_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_glu_backward_out(/* native_actuals */ grad_input, grad_output, self, dim);
}
Tensor Type::glu_backward(const Tensor & grad_output, const Tensor & self, int64_t dim) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named()) {
        AT_ERROR("glu_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_glu_backward(/* native_actuals */ grad_output, self, dim);
}
Tensor & Type::hardtanh_out(Tensor & out, const Tensor & self, Scalar min_val, Scalar max_val) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("hardtanh_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_hardtanh_forward_out(/* native_actuals */ out, self, min_val, max_val);
}
Tensor Type::hardtanh(const Tensor & self, Scalar min_val, Scalar max_val) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("hardtanh: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_hardtanh_forward(/* native_actuals */ self, min_val, max_val);
}
Tensor & Type::hardtanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named()) {
        AT_ERROR("hardtanh_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_hardtanh_backward_out(/* native_actuals */ grad_input, grad_output, self, min_val, max_val);
}
Tensor Type::hardtanh_backward(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named()) {
        AT_ERROR("hardtanh_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_hardtanh_backward(/* native_actuals */ grad_output, self, min_val, max_val);
}
Tensor & Type::hardtanh_(Tensor & self, Scalar min_val, Scalar max_val) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("hardtanh_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_hardtanh_forward_(/* native_actuals */ self, min_val, max_val);
}
Tensor & Type::leaky_relu_out(Tensor & out, const Tensor & self, Scalar negative_slope) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("leaky_relu_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_leaky_relu_forward_out(/* native_actuals */ out, self, negative_slope);
}
Tensor Type::leaky_relu(const Tensor & self, Scalar negative_slope) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("leaky_relu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_leaky_relu_forward(/* native_actuals */ self, negative_slope);
}
Tensor & Type::leaky_relu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar negative_slope) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named()) {
        AT_ERROR("leaky_relu_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_leaky_relu_backward_out(/* native_actuals */ grad_input, grad_output, self, negative_slope);
}
Tensor Type::leaky_relu_backward(const Tensor & grad_output, const Tensor & self, Scalar negative_slope) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named()) {
        AT_ERROR("leaky_relu_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_leaky_relu_backward(/* native_actuals */ grad_output, self, negative_slope);
}
Tensor & Type::leaky_relu_(Tensor & self, Scalar negative_slope) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("leaky_relu_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_leaky_relu_forward_(/* native_actuals */ self, negative_slope);
}
std::tuple<Tensor &,Tensor &> Type::log_sigmoid_forward_out(Tensor & output, Tensor & buffer, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (output.is_named() || buffer.is_named() || self.is_named()) {
        AT_ERROR("log_sigmoid_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_log_sigmoid_forward_out(/* native_actuals */ output, buffer, self);
}
std::tuple<Tensor,Tensor> Type::log_sigmoid_forward(const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("log_sigmoid_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_log_sigmoid_forward(/* native_actuals */ self);
}
Tensor & Type::log_sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & buffer) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || buffer.is_named()) {
        AT_ERROR("log_sigmoid_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_log_sigmoid_backward_out(/* native_actuals */ grad_input, grad_output, self, buffer);
}
Tensor Type::log_sigmoid_backward(const Tensor & grad_output, const Tensor & self, const Tensor & buffer) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || buffer.is_named()) {
        AT_ERROR("log_sigmoid_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_log_sigmoid_backward(/* native_actuals */ grad_output, self, buffer);
}
Tensor & Type::rrelu_with_noise_out(Tensor & out, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || noise.is_named()) {
        AT_ERROR("rrelu_with_noise_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_rrelu_with_noise_forward_out(/* native_actuals */ out, self, noise, lower, upper, training, generator);
}
Tensor Type::rrelu_with_noise(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || noise.is_named()) {
        AT_ERROR("rrelu_with_noise: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_rrelu_with_noise_forward(/* native_actuals */ self, noise, lower, upper, training, generator);
}
Tensor & Type::rrelu_with_noise_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || noise.is_named()) {
        AT_ERROR("rrelu_with_noise_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_rrelu_with_noise_backward_out(/* native_actuals */ grad_input, grad_output, self, noise, lower, upper, training);
}
Tensor Type::rrelu_with_noise_backward(const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || noise.is_named()) {
        AT_ERROR("rrelu_with_noise_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_rrelu_with_noise_backward(/* native_actuals */ grad_output, self, noise, lower, upper, training);
}
Tensor & Type::rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || noise.is_named()) {
        AT_ERROR("rrelu_with_noise_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_rrelu_with_noise_forward_(/* native_actuals */ self, noise, lower, upper, training, generator);
}
Tensor & Type::softplus_out(Tensor & out, const Tensor & self, Scalar beta, Scalar threshold) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("softplus_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_softplus_forward_out(/* native_actuals */ out, self, beta, threshold);
}
Tensor Type::softplus(const Tensor & self, Scalar beta, Scalar threshold) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("softplus: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_softplus_forward(/* native_actuals */ self, beta, threshold);
}
Tensor & Type::softplus_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || output.is_named()) {
        AT_ERROR("softplus_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_softplus_backward_out(/* native_actuals */ grad_input, grad_output, self, beta, threshold, output);
}
Tensor Type::softplus_backward(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || output.is_named()) {
        AT_ERROR("softplus_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_softplus_backward(/* native_actuals */ grad_output, self, beta, threshold, output);
}
Tensor & Type::softshrink_out(Tensor & out, const Tensor & self, Scalar lambd) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("softshrink_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_softshrink_forward_out(/* native_actuals */ out, self, lambd);
}
Tensor Type::softshrink(const Tensor & self, Scalar lambd) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("softshrink: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_softshrink_forward(/* native_actuals */ self, lambd);
}
Tensor & Type::softshrink_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar lambd) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named()) {
        AT_ERROR("softshrink_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_softshrink_backward_out(/* native_actuals */ grad_input, grad_output, self, lambd);
}
Tensor Type::softshrink_backward(const Tensor & grad_output, const Tensor & self, Scalar lambd) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named()) {
        AT_ERROR("softshrink_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_softshrink_backward(/* native_actuals */ grad_output, self, lambd);
}
Tensor & Type::adaptive_avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("adaptive_avg_pool2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d_out_cpu(/* native_actuals */ out, self, output_size);
}
Tensor Type::mkldnn_adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) const {
    AT_ERROR("mkldnn_adaptive_avg_pool2d is not implemented for type ", toString());
}
Tensor Type::_adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("_adaptive_avg_pool2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d_cpu(/* native_actuals */ self, output_size);
}
Tensor Type::_adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named()) {
        AT_ERROR("_adaptive_avg_pool2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d_backward_cpu(/* native_actuals */ grad_output, self);
}
Tensor & Type::adaptive_avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("adaptive_avg_pool3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool3d_out_cpu(/* native_actuals */ out, self, output_size);
}
Tensor Type::adaptive_avg_pool3d(const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("adaptive_avg_pool3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool3d_cpu(/* native_actuals */ self, output_size);
}
Tensor & Type::adaptive_avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named()) {
        AT_ERROR("adaptive_avg_pool3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool3d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, self);
}
Tensor Type::adaptive_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named()) {
        AT_ERROR("adaptive_avg_pool3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool3d_backward_cpu(/* native_actuals */ grad_output, self);
}
std::tuple<Tensor &,Tensor &> Type::adaptive_max_pool2d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || indices.is_named() || self.is_named()) {
        AT_ERROR("adaptive_max_pool2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool2d_out_cpu(/* native_actuals */ out, indices, self, output_size);
}
std::tuple<Tensor,Tensor> Type::adaptive_max_pool2d(const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("adaptive_max_pool2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool2d_cpu(/* native_actuals */ self, output_size);
}
Tensor & Type::adaptive_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("adaptive_max_pool2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool2d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, self, indices);
}
Tensor Type::adaptive_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("adaptive_max_pool2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool2d_backward_cpu(/* native_actuals */ grad_output, self, indices);
}
std::tuple<Tensor &,Tensor &> Type::adaptive_max_pool3d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || indices.is_named() || self.is_named()) {
        AT_ERROR("adaptive_max_pool3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool3d_out_cpu(/* native_actuals */ out, indices, self, output_size);
}
std::tuple<Tensor,Tensor> Type::adaptive_max_pool3d(const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("adaptive_max_pool3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool3d_cpu(/* native_actuals */ self, output_size);
}
Tensor & Type::adaptive_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("adaptive_max_pool3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool3d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, self, indices);
}
Tensor Type::adaptive_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("adaptive_max_pool3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool3d_backward_cpu(/* native_actuals */ grad_output, self, indices);
}
Tensor & Type::avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("avg_pool2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_avg_pool2d_forward_out(/* native_actuals */ out, self, kernel_size, stride, padding, ceil_mode, count_include_pad);
}
Tensor Type::avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("avg_pool2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_avg_pool2d_forward(/* native_actuals */ self, kernel_size, stride, padding, ceil_mode, count_include_pad);
}
Tensor & Type::avg_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named()) {
        AT_ERROR("avg_pool2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_avg_pool2d_backward_out(/* native_actuals */ grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad);
}
Tensor Type::avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named()) {
        AT_ERROR("avg_pool2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_avg_pool2d_backward(/* native_actuals */ grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad);
}
Tensor & Type::avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("avg_pool3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_avg_pool3d_forward_out(/* native_actuals */ out, self, kernel_size, stride, padding, ceil_mode, count_include_pad);
}
Tensor Type::avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("avg_pool3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_avg_pool3d_forward(/* native_actuals */ self, kernel_size, stride, padding, ceil_mode, count_include_pad);
}
Tensor & Type::avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named()) {
        AT_ERROR("avg_pool3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_avg_pool3d_backward_out(/* native_actuals */ grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad);
}
Tensor Type::avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named()) {
        AT_ERROR("avg_pool3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_avg_pool3d_backward(/* native_actuals */ grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad);
}
std::tuple<Tensor &,Tensor &> Type::fractional_max_pool2d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) const {
#ifdef NAMEDTENSOR_ENABLED
    if (output.is_named() || indices.is_named() || self.is_named() || random_samples.is_named()) {
        AT_ERROR("fractional_max_pool2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool2d_out_cpu(/* native_actuals */ output, indices, self, kernel_size, output_size, random_samples);
}
std::tuple<Tensor,Tensor> Type::fractional_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || random_samples.is_named()) {
        AT_ERROR("fractional_max_pool2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool2d_cpu(/* native_actuals */ self, kernel_size, output_size, random_samples);
}
Tensor & Type::fractional_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("fractional_max_pool2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool2d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, self, kernel_size, output_size, indices);
}
Tensor Type::fractional_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("fractional_max_pool2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool2d_backward_cpu(/* native_actuals */ grad_output, self, kernel_size, output_size, indices);
}
std::tuple<Tensor &,Tensor &> Type::fractional_max_pool3d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) const {
#ifdef NAMEDTENSOR_ENABLED
    if (output.is_named() || indices.is_named() || self.is_named() || random_samples.is_named()) {
        AT_ERROR("fractional_max_pool3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool3d_out_cpu(/* native_actuals */ output, indices, self, kernel_size, output_size, random_samples);
}
std::tuple<Tensor,Tensor> Type::fractional_max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || random_samples.is_named()) {
        AT_ERROR("fractional_max_pool3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool3d_cpu(/* native_actuals */ self, kernel_size, output_size, random_samples);
}
Tensor & Type::fractional_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("fractional_max_pool3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool3d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, self, kernel_size, output_size, indices);
}
Tensor Type::fractional_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("fractional_max_pool3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool3d_backward_cpu(/* native_actuals */ grad_output, self, kernel_size, output_size, indices);
}
std::tuple<Tensor &,Tensor &> Type::max_pool2d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || indices.is_named() || self.is_named()) {
        AT_ERROR("max_pool2d_with_indices_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d_with_indices_out_cpu(/* native_actuals */ out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);
}
std::tuple<Tensor,Tensor> Type::max_pool2d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("max_pool2d_with_indices: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d_with_indices_cpu(/* native_actuals */ self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor & Type::max_pool2d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("max_pool2d_with_indices_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d_with_indices_backward_out_cpu(/* native_actuals */ grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
Tensor Type::max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("max_pool2d_with_indices_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d_with_indices_backward_cpu(/* native_actuals */ grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
std::tuple<Tensor &,Tensor &> Type::max_pool3d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || indices.is_named() || self.is_named()) {
        AT_ERROR("max_pool3d_with_indices_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d_with_indices_out_cpu(/* native_actuals */ out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);
}
std::tuple<Tensor,Tensor> Type::max_pool3d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("max_pool3d_with_indices: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d_with_indices_cpu(/* native_actuals */ self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor & Type::max_pool3d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("max_pool3d_with_indices_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d_with_indices_backward_out_cpu(/* native_actuals */ grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
Tensor Type::max_pool3d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("max_pool3d_with_indices_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d_with_indices_backward_cpu(/* native_actuals */ grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
Tensor & Type::max_unpool2d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("max_unpool2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling2d_forward_out_cpu(/* native_actuals */ out, self, indices, output_size);
}
Tensor Type::max_unpool2d(const Tensor & self, const Tensor & indices, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || indices.is_named()) {
        AT_ERROR("max_unpool2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling2d_forward_cpu(/* native_actuals */ self, indices, output_size);
}
Tensor & Type::max_unpool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("max_unpool2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling2d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, self, indices, output_size);
}
Tensor Type::max_unpool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("max_unpool2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling2d_backward_cpu(/* native_actuals */ grad_output, self, indices, output_size);
}
Tensor & Type::max_unpool3d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("max_unpool3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling3d_forward_out_cpu(/* native_actuals */ out, self, indices, output_size, stride, padding);
}
Tensor Type::max_unpool3d(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || indices.is_named()) {
        AT_ERROR("max_unpool3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling3d_forward_cpu(/* native_actuals */ self, indices, output_size, stride, padding);
}
Tensor & Type::max_unpool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("max_unpool3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling3d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, self, indices, output_size, stride, padding);
}
Tensor Type::max_unpool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || indices.is_named()) {
        AT_ERROR("max_unpool3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling3d_backward_cpu(/* native_actuals */ grad_output, self, indices, output_size, stride, padding);
}
Tensor & Type::reflection_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("reflection_pad1d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad1d_out_cpu(/* native_actuals */ out, self, padding);
}
Tensor Type::reflection_pad1d(const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("reflection_pad1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad1d_cpu(/* native_actuals */ self, padding);
}
Tensor & Type::reflection_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named()) {
        AT_ERROR("reflection_pad1d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad1d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, self, padding);
}
Tensor Type::reflection_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named()) {
        AT_ERROR("reflection_pad1d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad1d_backward_cpu(/* native_actuals */ grad_output, self, padding);
}
Tensor & Type::reflection_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("reflection_pad2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad2d_out_cpu(/* native_actuals */ out, self, padding);
}
Tensor Type::reflection_pad2d(const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("reflection_pad2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad2d_cpu(/* native_actuals */ self, padding);
}
Tensor & Type::reflection_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named()) {
        AT_ERROR("reflection_pad2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad2d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, self, padding);
}
Tensor Type::reflection_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named()) {
        AT_ERROR("reflection_pad2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad2d_backward_cpu(/* native_actuals */ grad_output, self, padding);
}
Tensor & Type::replication_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("replication_pad1d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad1d_out_cpu(/* native_actuals */ out, self, padding);
}
Tensor Type::replication_pad1d(const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("replication_pad1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad1d_cpu(/* native_actuals */ self, padding);
}
Tensor & Type::replication_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named()) {
        AT_ERROR("replication_pad1d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad1d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, self, padding);
}
Tensor Type::replication_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named()) {
        AT_ERROR("replication_pad1d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad1d_backward_cpu(/* native_actuals */ grad_output, self, padding);
}
Tensor & Type::replication_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("replication_pad2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad2d_out_cpu(/* native_actuals */ out, self, padding);
}
Tensor Type::replication_pad2d(const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("replication_pad2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad2d_cpu(/* native_actuals */ self, padding);
}
Tensor & Type::replication_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named()) {
        AT_ERROR("replication_pad2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad2d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, self, padding);
}
Tensor Type::replication_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named()) {
        AT_ERROR("replication_pad2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad2d_backward_cpu(/* native_actuals */ grad_output, self, padding);
}
Tensor & Type::replication_pad3d_out(Tensor & out, const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("replication_pad3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad3d_out_cpu(/* native_actuals */ out, self, padding);
}
Tensor Type::replication_pad3d(const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("replication_pad3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad3d_cpu(/* native_actuals */ self, padding);
}
Tensor & Type::replication_pad3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || self.is_named()) {
        AT_ERROR("replication_pad3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad3d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, self, padding);
}
Tensor Type::replication_pad3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named()) {
        AT_ERROR("replication_pad3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad3d_backward_cpu(/* native_actuals */ grad_output, self, padding);
}
Tensor & Type::upsample_linear1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("upsample_linear1d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_linear1d_out_cpu(/* native_actuals */ out, self, output_size, align_corners);
}
Tensor Type::upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("upsample_linear1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_linear1d_cpu(/* native_actuals */ self, output_size, align_corners);
}
Tensor & Type::upsample_linear1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named()) {
        AT_ERROR("upsample_linear1d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_linear1d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, output_size, input_size, align_corners);
}
Tensor Type::upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named()) {
        AT_ERROR("upsample_linear1d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_linear1d_backward_cpu(/* native_actuals */ grad_output, output_size, input_size, align_corners);
}
Tensor & Type::upsample_bilinear2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("upsample_bilinear2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_bilinear2d_out_cpu(/* native_actuals */ out, self, output_size, align_corners);
}
Tensor Type::upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("upsample_bilinear2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_bilinear2d_cpu(/* native_actuals */ self, output_size, align_corners);
}
Tensor & Type::upsample_bilinear2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named()) {
        AT_ERROR("upsample_bilinear2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_bilinear2d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, output_size, input_size, align_corners);
}
Tensor Type::upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named()) {
        AT_ERROR("upsample_bilinear2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_bilinear2d_backward_cpu(/* native_actuals */ grad_output, output_size, input_size, align_corners);
}
Tensor & Type::upsample_bicubic2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("upsample_bicubic2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_bicubic2d_out_cpu(/* native_actuals */ out, self, output_size, align_corners);
}
Tensor Type::upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("upsample_bicubic2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_bicubic2d_cpu(/* native_actuals */ self, output_size, align_corners);
}
Tensor & Type::upsample_bicubic2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named()) {
        AT_ERROR("upsample_bicubic2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_bicubic2d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, output_size, input_size, align_corners);
}
Tensor Type::upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named()) {
        AT_ERROR("upsample_bicubic2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_bicubic2d_backward_cpu(/* native_actuals */ grad_output, output_size, input_size, align_corners);
}
Tensor & Type::upsample_trilinear3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("upsample_trilinear3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_trilinear3d_out_cpu(/* native_actuals */ out, self, output_size, align_corners);
}
Tensor Type::upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("upsample_trilinear3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_trilinear3d_cpu(/* native_actuals */ self, output_size, align_corners);
}
Tensor & Type::upsample_trilinear3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named()) {
        AT_ERROR("upsample_trilinear3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_trilinear3d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, output_size, input_size, align_corners);
}
Tensor Type::upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named()) {
        AT_ERROR("upsample_trilinear3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_trilinear3d_backward_cpu(/* native_actuals */ grad_output, output_size, input_size, align_corners);
}
Tensor & Type::upsample_nearest1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("upsample_nearest1d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest1d_out_cpu(/* native_actuals */ out, self, output_size);
}
Tensor Type::upsample_nearest1d(const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("upsample_nearest1d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest1d_cpu(/* native_actuals */ self, output_size);
}
Tensor & Type::upsample_nearest1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named()) {
        AT_ERROR("upsample_nearest1d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_nearest1d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, output_size, input_size);
}
Tensor Type::upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named()) {
        AT_ERROR("upsample_nearest1d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_nearest1d_backward_cpu(/* native_actuals */ grad_output, output_size, input_size);
}
Tensor & Type::upsample_nearest2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("upsample_nearest2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest2d_out_cpu(/* native_actuals */ out, self, output_size);
}
Tensor Type::upsample_nearest2d(const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("upsample_nearest2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest2d_cpu(/* native_actuals */ self, output_size);
}
Tensor & Type::upsample_nearest2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named()) {
        AT_ERROR("upsample_nearest2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_nearest2d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, output_size, input_size);
}
Tensor Type::upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named()) {
        AT_ERROR("upsample_nearest2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_nearest2d_backward_cpu(/* native_actuals */ grad_output, output_size, input_size);
}
Tensor & Type::upsample_nearest3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (out.is_named() || self.is_named()) {
        AT_ERROR("upsample_nearest3d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest3d_out_cpu(/* native_actuals */ out, self, output_size);
}
Tensor Type::upsample_nearest3d(const Tensor & self, IntArrayRef output_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("upsample_nearest3d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest3d_cpu(/* native_actuals */ self, output_size);
}
Tensor & Type::upsample_nearest3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named()) {
        AT_ERROR("upsample_nearest3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_nearest3d_backward_out_cpu(/* native_actuals */ grad_input, grad_output, output_size, input_size);
}
Tensor Type::upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named()) {
        AT_ERROR("upsample_nearest3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_nearest3d_backward_cpu(/* native_actuals */ grad_output, output_size, input_size);
}
Tensor & Type::sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || output.is_named()) {
        AT_ERROR("sigmoid_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::legacy::cpu::_thnn_sigmoid_backward_out(/* native_actuals */ grad_input, grad_output, output);
}
Tensor Type::sigmoid_backward(const Tensor & grad_output, const Tensor & output) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || output.is_named()) {
        AT_ERROR("sigmoid_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::legacy::cpu::_thnn_sigmoid_backward(/* native_actuals */ grad_output, output);
}
Tensor & Type::tanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_output.is_named() || output.is_named()) {
        AT_ERROR("tanh_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::legacy::cpu::_thnn_tanh_backward_out(/* native_actuals */ grad_input, grad_output, output);
}
Tensor Type::tanh_backward(const Tensor & grad_output, const Tensor & output) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || output.is_named()) {
        AT_ERROR("tanh_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::legacy::cpu::_thnn_tanh_backward(/* native_actuals */ grad_output, output);
}
std::tuple<Tensor &,Tensor &,Tensor &> Type::thnn_conv_transpose2d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (output.is_named() || columns.is_named() || ones.is_named() || self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_transpose2d_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv_transpose2d_forward_out(/* native_actuals */ output, columns, ones, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
std::tuple<Tensor,Tensor,Tensor> Type::thnn_conv_transpose2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_transpose2d_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv_transpose2d_forward(/* native_actuals */ self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
std::tuple<Tensor &,Tensor &,Tensor &> Type::thnn_conv_transpose2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_weight.is_named() || grad_bias.is_named() || grad_output.is_named() || self.is_named() || weight.is_named() || columns.is_named() || ones.is_named()) {
        AT_ERROR("thnn_conv_transpose2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv_transpose2d_backward_out(/* native_actuals */ grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones);
}
std::tuple<Tensor,Tensor,Tensor> Type::thnn_conv_transpose2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || weight.is_named() || columns.is_named() || ones.is_named()) {
        AT_ERROR("thnn_conv_transpose2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv_transpose2d_backward(/* native_actuals */ grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, output_mask);
}
std::tuple<Tensor &,Tensor &,Tensor &> Type::thnn_conv_transpose3d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (output.is_named() || finput.is_named() || fgrad_input.is_named() || self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_transpose3d_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv_transpose3d_forward_out(/* native_actuals */ output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
std::tuple<Tensor,Tensor,Tensor> Type::thnn_conv_transpose3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_transpose3d_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv_transpose3d_forward(/* native_actuals */ self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
std::tuple<Tensor &,Tensor &,Tensor &> Type::thnn_conv_transpose3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_weight.is_named() || grad_bias.is_named() || grad_output.is_named() || self.is_named() || weight.is_named() || finput.is_named() || fgrad_input.is_named()) {
        AT_ERROR("thnn_conv_transpose3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv_transpose3d_backward_out(/* native_actuals */ grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input);
}
std::tuple<Tensor,Tensor,Tensor> Type::thnn_conv_transpose3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || weight.is_named() || finput.is_named() || fgrad_input.is_named()) {
        AT_ERROR("thnn_conv_transpose3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv_transpose3d_backward(/* native_actuals */ grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, output_mask);
}
std::tuple<Tensor &,Tensor &,Tensor &> Type::thnn_conv2d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (output.is_named() || finput.is_named() || fgrad_input.is_named() || self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv2d_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv2d_forward_out(/* native_actuals */ output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding);
}
std::tuple<Tensor,Tensor,Tensor> Type::thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv2d_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv2d_forward(/* native_actuals */ self, weight, kernel_size, bias, stride, padding);
}
std::tuple<Tensor &,Tensor &,Tensor &> Type::thnn_conv2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_weight.is_named() || grad_bias.is_named() || grad_output.is_named() || self.is_named() || weight.is_named() || finput.is_named() || fgrad_input.is_named()) {
        AT_ERROR("thnn_conv2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv2d_backward_out(/* native_actuals */ grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input);
}
std::tuple<Tensor,Tensor,Tensor> Type::thnn_conv2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || weight.is_named() || finput.is_named() || fgrad_input.is_named()) {
        AT_ERROR("thnn_conv2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv2d_backward(/* native_actuals */ grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
}
Tensor & Type::thnn_conv_depthwise2d_forward_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
    AT_ERROR("thnn_conv_depthwise2d_forward_out is not implemented for type ", toString());
}
Tensor Type::thnn_conv_depthwise2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
    AT_ERROR("thnn_conv_depthwise2d_forward is not implemented for type ", toString());
}
std::tuple<Tensor &,Tensor &> Type::thnn_conv_depthwise2d_backward_out(Tensor & grad_input, Tensor & grad_weight, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
    AT_ERROR("thnn_conv_depthwise2d_backward_out is not implemented for type ", toString());
}
std::tuple<Tensor,Tensor> Type::thnn_conv_depthwise2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,2> output_mask) const {
    AT_ERROR("thnn_conv_depthwise2d_backward is not implemented for type ", toString());
}
std::tuple<Tensor &,Tensor &,Tensor &> Type::thnn_conv3d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (output.is_named() || finput.is_named() || fgrad_input.is_named() || self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv3d_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv3d_forward_out(/* native_actuals */ output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding);
}
std::tuple<Tensor,Tensor,Tensor> Type::thnn_conv3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv3d_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv3d_forward(/* native_actuals */ self, weight, kernel_size, bias, stride, padding);
}
std::tuple<Tensor &,Tensor &,Tensor &> Type::thnn_conv3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_weight.is_named() || grad_bias.is_named() || grad_output.is_named() || self.is_named() || weight.is_named() || finput.is_named() || fgrad_input.is_named()) {
        AT_ERROR("thnn_conv3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv3d_backward_out(/* native_actuals */ grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input);
}
std::tuple<Tensor,Tensor,Tensor> Type::thnn_conv3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || weight.is_named() || finput.is_named() || fgrad_input.is_named()) {
        AT_ERROR("thnn_conv3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv3d_backward(/* native_actuals */ grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
}
std::tuple<Tensor &,Tensor &,Tensor &> Type::thnn_conv_dilated2d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (output.is_named() || columns.is_named() || ones.is_named() || self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_dilated2d_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv_dilated2d_forward_out(/* native_actuals */ output, columns, ones, self, weight, kernel_size, bias, stride, padding, dilation);
}
std::tuple<Tensor,Tensor,Tensor> Type::thnn_conv_dilated2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_dilated2d_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv_dilated2d_forward(/* native_actuals */ self, weight, kernel_size, bias, stride, padding, dilation);
}
std::tuple<Tensor &,Tensor &,Tensor &> Type::thnn_conv_dilated2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_weight.is_named() || grad_bias.is_named() || grad_output.is_named() || self.is_named() || weight.is_named() || columns.is_named() || ones.is_named()) {
        AT_ERROR("thnn_conv_dilated2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv_dilated2d_backward_out(/* native_actuals */ grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, dilation, columns, ones);
}
std::tuple<Tensor,Tensor,Tensor> Type::thnn_conv_dilated2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || weight.is_named() || columns.is_named() || ones.is_named()) {
        AT_ERROR("thnn_conv_dilated2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv_dilated2d_backward(/* native_actuals */ grad_output, self, weight, kernel_size, stride, padding, dilation, columns, ones, output_mask);
}
std::tuple<Tensor &,Tensor &,Tensor &> Type::thnn_conv_dilated3d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (output.is_named() || columns.is_named() || ones.is_named() || self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_dilated3d_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv_dilated3d_forward_out(/* native_actuals */ output, columns, ones, self, weight, kernel_size, bias, stride, padding, dilation);
}
std::tuple<Tensor,Tensor,Tensor> Type::thnn_conv_dilated3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named() || weight.is_named() || bias.is_named()) {
        AT_ERROR("thnn_conv_dilated3d_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv_dilated3d_forward(/* native_actuals */ self, weight, kernel_size, bias, stride, padding, dilation);
}
std::tuple<Tensor &,Tensor &,Tensor &> Type::thnn_conv_dilated3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_input.is_named() || grad_weight.is_named() || grad_bias.is_named() || grad_output.is_named() || self.is_named() || weight.is_named() || columns.is_named() || ones.is_named()) {
        AT_ERROR("thnn_conv_dilated3d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv_dilated3d_backward_out(/* native_actuals */ grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, dilation, columns, ones);
}
std::tuple<Tensor,Tensor,Tensor> Type::thnn_conv_dilated3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named() || self.is_named() || weight.is_named() || columns.is_named() || ones.is_named()) {
        AT_ERROR("thnn_conv_dilated3d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_conv_dilated3d_backward(/* native_actuals */ grad_output, self, weight, kernel_size, stride, padding, dilation, columns, ones, output_mask);
}
Tensor Type::thnn_col2im(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("thnn_col2im: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_col2im_forward(/* native_actuals */ self, output_size, kernel_size, dilation, padding, stride);
}
Tensor Type::thnn_col2im_backward(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named()) {
        AT_ERROR("thnn_col2im_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::legacy::cpu::_thnn_col2im_backward(/* native_actuals */ grad_output, kernel_size, dilation, padding, stride);
}
Tensor Type::thnn_im2col(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
#ifdef NAMEDTENSOR_ENABLED
    if (self.is_named()) {
        AT_ERROR("thnn_im2col: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_thnn_im2col_forward(/* native_actuals */ self, kernel_size, dilation, padding, stride);
}
Tensor Type::thnn_im2col_backward(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const {
#ifdef NAMEDTENSOR_ENABLED
    if (grad_output.is_named()) {
        AT_ERROR("thnn_im2col_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::legacy::cpu::_thnn_im2col_backward(/* native_actuals */ grad_output, input_size, kernel_size, dilation, padding, stride);
}

}
