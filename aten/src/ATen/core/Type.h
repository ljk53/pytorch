#pragma once

#include <ATen/core/ATenGeneral.h>
#include <c10/core/Allocator.h>
#include <c10/util/Deprecated.h>
#include <ATen/core/Generator.h>
#include <c10/core/Layout.h>
#include <c10/core/Scalar.h>
#include <c10/core/ScalarType.h>
#include <ATen/core/SparseTensorRef.h>
#include <c10/util/ArrayRef.h>
#include <c10/util/Half.h>
#include <c10/core/TensorTypeIdRegistration.h>
#include <ATen/core/Reduction.h>
#include <c10/core/TensorOptions.h>

#include <c10/util/Optional.h>

#include <array>
#include <cstddef>
#include <functional>
#include <limits>
#include <memory>

// To solve the conflict of s_addr in inaddr.h
#ifdef _MSC_VER
#ifdef s_addr
#undef s_addr
#endif
#endif

namespace c10 {
struct Storage;
}

namespace at {

class Tensor;
using TensorList = ArrayRef<Tensor>;

class Context;
struct Generator;
struct Quantizer;

static inline void noop_deleter(void*) {}

enum class TypeID {
  CPU,
  ComplexCPU,
  Undefined,
  NumOptions
};

struct CAFFE2_API Type {
  explicit Type(TensorTypeId type_id, bool is_variable, bool is_undefined)
      : type_id_(type_id), is_variable_(is_variable), is_undefined_(is_undefined) {}

  virtual ~Type() {}
  virtual Backend backend() const = 0;
  Layout layout() const noexcept { return layout_from_backend(backend()); }
  virtual bool is_cuda() const = 0;
  virtual bool is_hip() const = 0;
  virtual bool is_sparse() const = 0;
  virtual bool is_quantized() const = 0;
  virtual bool is_distributed() const = 0;
  bool is_variable() const noexcept { return is_variable_; }
  bool is_undefined() const noexcept { return is_undefined_; }
  virtual Allocator * allocator() const = 0;
  virtual Device getDeviceFromPtr(void * data) const = 0;
  virtual std::unique_ptr<Generator> generator() const = 0;
  virtual Tensor unsafeTensorFromTH(void * th_pointer, bool retain) const = 0;
  virtual Storage unsafeStorageFromTH(void * th_pointer, bool retain) const = 0;
  virtual const char * toString() const = 0;
  virtual Type & toBackend(Backend b) const = 0;
  virtual Type & toScalarType(ScalarType s) const = 0;
  Type & toSparse() const {
    return this->toBackend(at::toSparse(this->backend()));
  }
  Type & toDense() const {
    return this->toBackend(at::toDense(this->backend()));
  }
  Type & cpu() const {
    return this->toBackend(at::backendToCPU(this->backend()));
  }
  Type & cuda() const {
    return this->toBackend(at::backendToCUDA(this->backend()));
  }
  Type & hip() const {
    return this->toBackend(at::backendToHIP(this->backend()));
  }
  // contiguous IDs for all types in the system
  // for external dispatch
  virtual TypeID ID() const = 0;

  // New-style TensorTypeId that supports open registration.
  TensorTypeId type_id() const { return type_id_; }

  // NB: This will return DeviceType::CPU for Backend::SparseCPU
  DeviceType device_type() const {
    return backendToDeviceType(backend());
  }

  virtual void backward(
      Tensor& self,
      c10::optional<Tensor> gradient,
      bool keep_graph,
      bool create_graph) const = 0;
  virtual void set_data(Tensor & self, Tensor new_data) const = 0;

  bool operator==(const Type& other) const {
    return this == &other;
  }
  bool operator!=(const Type& other) const {
    return this != &other;
  }

  TensorOptions options(ScalarType s, int16_t device_index = -1) const {
    return TensorOptions().dtype(s)
                          .device(device_type(), device_index)
                          .layout(layout())
                          .is_variable(is_variable());
  }

  /// Constructs the `TensorOptions` from a type and a Device.  Asserts that
  /// the device type matches the device type of the type.
  TensorOptions options(ScalarType s, c10::optional<Device> device_opt) const {
    if (!device_opt.has_value()) {
      return options(s, -1);
    } else {
      Device device = device_opt.value();
      AT_ASSERT(device.type() == device_type());
      return options(s, device.index());
    }
  }

#if 0
  // example
  // virtual Tensor * add(Tensor & a, Tensor & b) = 0;
  virtual Tensor abs(const Tensor & self) const = 0;
  virtual Tensor & abs_(Tensor & self) const = 0;
  virtual Tensor acos(const Tensor & self) const = 0;
  virtual Tensor & acos_(Tensor & self) const = 0;
  virtual Tensor add(const Tensor & self, const Tensor & other, Scalar alpha) const = 0;
  virtual Tensor & add_(Tensor & self, const Tensor & other, Scalar alpha) const = 0;
  virtual Tensor add(const Tensor & self, Scalar other, Scalar alpha) const = 0;
  virtual Tensor & add_(Tensor & self, Scalar other, Scalar alpha) const = 0;
  virtual Tensor addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor all(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual bool allclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) const = 0;
  virtual Tensor any(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) const = 0;
  virtual Tensor argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) const = 0;
  virtual Tensor as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) const = 0;
  virtual Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) const = 0;
  virtual Tensor asin(const Tensor & self) const = 0;
  virtual Tensor & asin_(Tensor & self) const = 0;
  virtual Tensor atan(const Tensor & self) const = 0;
  virtual Tensor & atan_(Tensor & self) const = 0;
  virtual Tensor baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & baddbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor bernoulli(const Tensor & self, Generator * generator) const = 0;
  virtual Tensor & bernoulli_(Tensor & self, const Tensor & p, Generator * generator) const = 0;
  virtual Tensor & bernoulli_(Tensor & self, double p, Generator * generator) const = 0;
  virtual Tensor bernoulli(const Tensor & self, double p, Generator * generator) const = 0;
  virtual Tensor bincount(const Tensor & self, const Tensor & weights, int64_t minlength) const = 0;
  virtual Tensor bmm(const Tensor & self, const Tensor & mat2) const = 0;
  virtual Tensor ceil(const Tensor & self) const = 0;
  virtual Tensor & ceil_(Tensor & self) const = 0;
  virtual std::vector<Tensor> chunk(const Tensor & self, int64_t chunks, int64_t dim) const = 0;
  virtual Tensor clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) const = 0;
  virtual Tensor & clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) const = 0;
  virtual Tensor clamp_max(const Tensor & self, Scalar max) const = 0;
  virtual Tensor & clamp_max_(Tensor & self, Scalar max) const = 0;
  virtual Tensor clamp_min(const Tensor & self, Scalar min) const = 0;
  virtual Tensor & clamp_min_(Tensor & self, Scalar min) const = 0;
  virtual Tensor contiguous(const Tensor & self) const = 0;
  virtual Tensor & copy_(Tensor & self, const Tensor & src, bool non_blocking) const = 0;
  virtual Tensor cos(const Tensor & self) const = 0;
  virtual Tensor & cos_(Tensor & self) const = 0;
  virtual Tensor cosh(const Tensor & self) const = 0;
  virtual Tensor & cosh_(Tensor & self) const = 0;
  virtual Tensor cumsum(const Tensor & self, int64_t dim, ScalarType dtype) const = 0;
  virtual Tensor cumsum(const Tensor & self, int64_t dim) const = 0;
  virtual Tensor cumprod(const Tensor & self, int64_t dim, ScalarType dtype) const = 0;
  virtual Tensor cumprod(const Tensor & self, int64_t dim) const = 0;
  virtual Tensor det(const Tensor & self) const = 0;
  virtual Tensor diag_embed(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) const = 0;
  virtual Tensor diagflat(const Tensor & self, int64_t offset) const = 0;
  virtual Tensor diagonal(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) const = 0;
  virtual Tensor div(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & div_(Tensor & self, const Tensor & other) const = 0;
  virtual Tensor div(const Tensor & self, Scalar other) const = 0;
  virtual Tensor & div_(Tensor & self, Scalar other) const = 0;
  virtual Tensor dot(const Tensor & self, const Tensor & tensor) const = 0;
  virtual Tensor & resize_(Tensor & self, IntArrayRef size) const = 0;
  virtual Tensor erf(const Tensor & self) const = 0;
  virtual Tensor & erf_(Tensor & self) const = 0;
  virtual Tensor erfc(const Tensor & self) const = 0;
  virtual Tensor & erfc_(Tensor & self) const = 0;
  virtual Tensor exp(const Tensor & self) const = 0;
  virtual Tensor & exp_(Tensor & self) const = 0;
  virtual Tensor expm1(const Tensor & self) const = 0;
  virtual Tensor & expm1_(Tensor & self) const = 0;
  virtual Tensor expand(const Tensor & self, IntArrayRef size, bool implicit) const = 0;
  virtual Tensor expand_as(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim) const = 0;
  virtual Tensor & fill_(Tensor & self, Scalar value) const = 0;
  virtual Tensor & fill_(Tensor & self, const Tensor & value) const = 0;
  virtual Tensor floor(const Tensor & self) const = 0;
  virtual Tensor & floor_(Tensor & self) const = 0;
  virtual Tensor frac(const Tensor & self) const = 0;
  virtual Tensor & frac_(Tensor & self) const = 0;
  virtual Tensor ger(const Tensor & self, const Tensor & vec2) const = 0;
  virtual Tensor fft(const Tensor & self, int64_t signal_ndim, bool normalized) const = 0;
  virtual Tensor ifft(const Tensor & self, int64_t signal_ndim, bool normalized) const = 0;
  virtual Tensor rfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided) const = 0;
  virtual Tensor irfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided, IntArrayRef signal_sizes) const = 0;
  virtual Tensor index(const Tensor & self, TensorList indices) const = 0;
  virtual Tensor & index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const = 0;
  virtual Tensor index_copy(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const = 0;
  virtual Tensor & index_put_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate) const = 0;
  virtual Tensor index_put(const Tensor & self, TensorList indices, const Tensor & values, bool accumulate) const = 0;
  virtual Tensor inverse(const Tensor & self) const = 0;
  virtual Tensor isclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) const = 0;
  virtual bool is_distributed(const Tensor & self) const = 0;
  virtual bool is_floating_point(const Tensor & self) const = 0;
  virtual bool is_complex(const Tensor & self) const = 0;
  virtual bool is_nonzero(const Tensor & self) const = 0;
  virtual bool is_same_size(const Tensor & self, const Tensor & other) const = 0;
  virtual bool is_signed(const Tensor & self) const = 0;
  virtual std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, int64_t dim, bool keepdim) const = 0;
  virtual Tensor log(const Tensor & self) const = 0;
  virtual Tensor & log_(Tensor & self) const = 0;
  virtual Tensor log10(const Tensor & self) const = 0;
  virtual Tensor & log10_(Tensor & self) const = 0;
  virtual Tensor log1p(const Tensor & self) const = 0;
  virtual Tensor & log1p_(Tensor & self) const = 0;
  virtual Tensor log2(const Tensor & self) const = 0;
  virtual Tensor & log2_(Tensor & self) const = 0;
  virtual Tensor logdet(const Tensor & self) const = 0;
  virtual Tensor log_softmax(const Tensor & self, int64_t dim, ScalarType dtype) const = 0;
  virtual Tensor log_softmax(const Tensor & self, int64_t dim) const = 0;
  virtual Tensor logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim) const = 0;
  virtual Tensor matmul(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor matrix_power(const Tensor & self, int64_t n) const = 0;
  virtual std::tuple<Tensor,Tensor> max(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor max_values(const Tensor & self, IntArrayRef dim, bool keepdim) const = 0;
  virtual Tensor mean(const Tensor & self, ScalarType dtype) const = 0;
  virtual Tensor mean(const Tensor & self) const = 0;
  virtual Tensor mean(const Tensor & self, IntArrayRef dim, bool keepdim, ScalarType dtype) const = 0;
  virtual Tensor mean(const Tensor & self, IntArrayRef dim, bool keepdim) const = 0;
  virtual Tensor mean(const Tensor & self, IntArrayRef dim, ScalarType dtype) const = 0;
  virtual std::tuple<Tensor,Tensor> median(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual std::tuple<Tensor,Tensor> min(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor min_values(const Tensor & self, IntArrayRef dim, bool keepdim) const = 0;
  virtual Tensor mm(const Tensor & self, const Tensor & mat2) const = 0;
  virtual std::tuple<Tensor,Tensor> mode(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor mul(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & mul_(Tensor & self, const Tensor & other) const = 0;
  virtual Tensor mul(const Tensor & self, Scalar other) const = 0;
  virtual Tensor & mul_(Tensor & self, Scalar other) const = 0;
  virtual Tensor mv(const Tensor & self, const Tensor & vec) const = 0;
  virtual Tensor mvlgamma(const Tensor & self, int64_t p) const = 0;
  virtual Tensor & mvlgamma_(Tensor & self, int64_t p) const = 0;
  virtual Tensor narrow_copy(const Tensor & self, int64_t dim, int64_t start, int64_t length) const = 0;
  virtual Tensor narrow(const Tensor & self, int64_t dim, int64_t start, int64_t length) const = 0;
  virtual Tensor permute(const Tensor & self, IntArrayRef dims) const = 0;
  virtual Tensor pin_memory(const Tensor & self) const = 0;
  virtual Tensor pinverse(const Tensor & self, double rcond) const = 0;
  virtual Tensor reciprocal(const Tensor & self) const = 0;
  virtual Tensor & reciprocal_(Tensor & self) const = 0;
  virtual Tensor neg(const Tensor & self) const = 0;
  virtual Tensor & neg_(Tensor & self) const = 0;
  virtual Tensor repeat(const Tensor & self, IntArrayRef repeats) const = 0;
  virtual Tensor repeat_interleave(const Tensor & repeats) const = 0;
  virtual Tensor repeat_interleave(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim) const = 0;
  virtual Tensor repeat_interleave(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim) const = 0;
  virtual Tensor reshape(const Tensor & self, IntArrayRef shape) const = 0;
  virtual Tensor reshape_as(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor round(const Tensor & self) const = 0;
  virtual Tensor & round_(Tensor & self) const = 0;
  virtual Tensor relu(const Tensor & self) const = 0;
  virtual Tensor & relu_(Tensor & self) const = 0;
  virtual Tensor prelu(const Tensor & self, const Tensor & weight) const = 0;
  virtual std::tuple<Tensor,Tensor> prelu_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight) const = 0;
  virtual Tensor hardshrink(const Tensor & self, Scalar lambd) const = 0;
  virtual Tensor hardshrink_backward(const Tensor & grad_out, const Tensor & self, Scalar lambd) const = 0;
  virtual Tensor rsqrt(const Tensor & self) const = 0;
  virtual Tensor & rsqrt_(Tensor & self) const = 0;
  virtual Tensor select(const Tensor & self, int64_t dim, int64_t index) const = 0;
  virtual Tensor sigmoid(const Tensor & self) const = 0;
  virtual Tensor & sigmoid_(Tensor & self) const = 0;
  virtual Tensor sin(const Tensor & self) const = 0;
  virtual Tensor & sin_(Tensor & self) const = 0;
  virtual Tensor sinh(const Tensor & self) const = 0;
  virtual Tensor & sinh_(Tensor & self) const = 0;
  virtual Tensor detach(const Tensor & self) const = 0;
  virtual Tensor & detach_(Tensor & self) const = 0;
  virtual int64_t size(const Tensor & self, int64_t dim) const = 0;
  virtual Tensor slice(const Tensor & self, int64_t dim, int64_t start, int64_t end, int64_t step) const = 0;
  virtual std::tuple<Tensor,Tensor> slogdet(const Tensor & self) const = 0;
  virtual Tensor smm(const Tensor & self, const Tensor & mat2) const = 0;
  virtual Tensor softmax(const Tensor & self, int64_t dim, ScalarType dtype) const = 0;
  virtual Tensor softmax(const Tensor & self, int64_t dim) const = 0;
  virtual std::vector<Tensor> split(const Tensor & self, int64_t split_size, int64_t dim) const = 0;
  virtual std::vector<Tensor> split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim) const = 0;
  virtual Tensor squeeze(const Tensor & self) const = 0;
  virtual Tensor squeeze(const Tensor & self, int64_t dim) const = 0;
  virtual Tensor & squeeze_(Tensor & self) const = 0;
  virtual Tensor & squeeze_(Tensor & self, int64_t dim) const = 0;
  virtual Tensor sspaddmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const Tensor & window, bool normalized, bool onesided) const = 0;
  virtual int64_t stride(const Tensor & self, int64_t dim) const = 0;
  virtual Tensor sum(const Tensor & self, ScalarType dtype) const = 0;
  virtual Tensor sum(const Tensor & self) const = 0;
  virtual Tensor sum(const Tensor & self, IntArrayRef dim, bool keepdim, ScalarType dtype) const = 0;
  virtual Tensor sum(const Tensor & self, IntArrayRef dim, bool keepdim) const = 0;
  virtual Tensor sum(const Tensor & self, IntArrayRef dim, ScalarType dtype) const = 0;
  virtual Tensor sum_to_size(const Tensor & self, IntArrayRef size) const = 0;
  virtual Tensor sqrt(const Tensor & self) const = 0;
  virtual Tensor & sqrt_(Tensor & self) const = 0;
  virtual Tensor std(const Tensor & self, bool unbiased) const = 0;
  virtual Tensor std(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) const = 0;
  virtual Tensor prod(const Tensor & self, ScalarType dtype) const = 0;
  virtual Tensor prod(const Tensor & self) const = 0;
  virtual Tensor prod(const Tensor & self, int64_t dim, bool keepdim, ScalarType dtype) const = 0;
  virtual Tensor prod(const Tensor & self, int64_t dim, bool keepdim) const = 0;
  virtual Tensor prod(const Tensor & self, int64_t dim, ScalarType dtype) const = 0;
  virtual Tensor t(const Tensor & self) const = 0;
  virtual Tensor & t_(Tensor & self) const = 0;
  virtual Tensor tan(const Tensor & self) const = 0;
  virtual Tensor & tan_(Tensor & self) const = 0;
  virtual Tensor tanh(const Tensor & self) const = 0;
  virtual Tensor & tanh_(Tensor & self) const = 0;
  virtual Tensor transpose(const Tensor & self, int64_t dim0, int64_t dim1) const = 0;
  virtual Tensor & transpose_(Tensor & self, int64_t dim0, int64_t dim1) const = 0;
  virtual Tensor flip(const Tensor & self, IntArrayRef dims) const = 0;
  virtual Tensor roll(const Tensor & self, IntArrayRef shifts, IntArrayRef dims) const = 0;
  virtual Tensor rot90(const Tensor & self, int64_t k, IntArrayRef dims) const = 0;
  virtual Tensor trunc(const Tensor & self) const = 0;
  virtual Tensor & trunc_(Tensor & self) const = 0;
  virtual Tensor type_as(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor unsqueeze(const Tensor & self, int64_t dim) const = 0;
  virtual Tensor & unsqueeze_(Tensor & self, int64_t dim) const = 0;
  virtual Tensor var(const Tensor & self, bool unbiased) const = 0;
  virtual Tensor var(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) const = 0;
  virtual Tensor view_as(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor where(const Tensor & condition, const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor norm(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype) const = 0;
  virtual Tensor norm(const Tensor & self, Scalar p) const = 0;
  virtual Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) const = 0;
  virtual Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) const = 0;
  virtual Tensor clone(const Tensor & self) const = 0;
  virtual Tensor & resize_as_(Tensor & self, const Tensor & the_template) const = 0;
  virtual Tensor pow(const Tensor & self, Scalar exponent) const = 0;
  virtual Tensor & zero_(Tensor & self) const = 0;
  virtual Tensor sub(const Tensor & self, const Tensor & other, Scalar alpha) const = 0;
  virtual Tensor & sub_(Tensor & self, const Tensor & other, Scalar alpha) const = 0;
  virtual Tensor sub(const Tensor & self, Scalar other, Scalar alpha) const = 0;
  virtual Tensor & sub_(Tensor & self, Scalar other, Scalar alpha) const = 0;
  virtual Tensor addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & sparse_resize_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) const = 0;
  virtual Tensor & sparse_resize_and_clear_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) const = 0;
  virtual Tensor sparse_mask(const Tensor & self, SparseTensorRef mask) const = 0;
  virtual Tensor to_dense(const Tensor & self) const = 0;
  virtual int64_t sparse_dim(const Tensor & self) const = 0;
  virtual int64_t _dimI(const Tensor & self) const = 0;
  virtual int64_t dense_dim(const Tensor & self) const = 0;
  virtual int64_t _dimV(const Tensor & self) const = 0;
  virtual int64_t _nnz(const Tensor & self) const = 0;
  virtual Tensor coalesce(const Tensor & self) const = 0;
  virtual bool is_coalesced(const Tensor & self) const = 0;
  virtual Tensor _indices(const Tensor & self) const = 0;
  virtual Tensor _values(const Tensor & self) const = 0;
  virtual Tensor & _coalesced_(Tensor & self, bool coalesced) const = 0;
  virtual Tensor indices(const Tensor & self) const = 0;
  virtual Tensor values(const Tensor & self) const = 0;
  virtual int64_t numel(const Tensor & self) const = 0;
  virtual std::vector<Tensor> unbind(const Tensor & self, int64_t dim) const = 0;
  virtual Tensor to_sparse(const Tensor & self, int64_t sparse_dim) const = 0;
  virtual Tensor to_sparse(const Tensor & self) const = 0;
  virtual Tensor to_mkldnn(const Tensor & self) const = 0;
  virtual Tensor quantize_linear(const Tensor & self, double scale, int64_t zero_point) const = 0;
  virtual Tensor dequantize(const Tensor & self) const = 0;
  virtual Scalar q_scale(const Tensor & self) const = 0;
  virtual Scalar q_zero_point(const Tensor & self) const = 0;
  virtual Tensor int_repr(const Tensor & self) const = 0;
  virtual Tensor to(const Tensor & self, const TensorOptions & options, bool non_blocking, bool copy) const = 0;
  virtual Tensor to(const Tensor & self, Device device, ScalarType dtype, bool non_blocking, bool copy) const = 0;
  virtual Tensor to(const Tensor & self, ScalarType dtype, bool non_blocking, bool copy) const = 0;
  virtual Tensor to(const Tensor & self, const Tensor & other, bool non_blocking, bool copy) const = 0;
  virtual Scalar item(const Tensor & self) const = 0;
  virtual void* data_ptr(const Tensor & self) const = 0;
  virtual Tensor & set_(Tensor & self, Storage source) const = 0;
  virtual Tensor & set_(Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride) const = 0;
  virtual Tensor & set_(Tensor & self, const Tensor & source) const = 0;
  virtual Tensor & set_(Tensor & self) const = 0;
  virtual bool is_set_to(const Tensor & self, const Tensor & tensor) const = 0;
  virtual Tensor & masked_fill_(Tensor & self, const Tensor & mask, Scalar value) const = 0;
  virtual Tensor masked_fill(const Tensor & self, const Tensor & mask, Scalar value) const = 0;
  virtual Tensor & masked_fill_(Tensor & self, const Tensor & mask, const Tensor & value) const = 0;
  virtual Tensor masked_fill(const Tensor & self, const Tensor & mask, const Tensor & value) const = 0;
  virtual Tensor & masked_scatter_(Tensor & self, const Tensor & mask, const Tensor & source) const = 0;
  virtual Tensor masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source) const = 0;
  virtual Tensor view(const Tensor & self, IntArrayRef size) const = 0;
  virtual Tensor & put_(Tensor & self, const Tensor & index, const Tensor & source, bool accumulate) const = 0;
  virtual Tensor & index_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const = 0;
  virtual Tensor index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const = 0;
  virtual Tensor & index_fill_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) const = 0;
  virtual Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) const = 0;
  virtual Tensor & index_fill_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) const = 0;
  virtual Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) const = 0;
  virtual Tensor & scatter_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const = 0;
  virtual Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const = 0;
  virtual Tensor & scatter_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) const = 0;
  virtual Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) const = 0;
  virtual Tensor & scatter_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const = 0;
  virtual Tensor scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const = 0;
  virtual Tensor & lt_(Tensor & self, Scalar other) const = 0;
  virtual Tensor & lt_(Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & gt_(Tensor & self, Scalar other) const = 0;
  virtual Tensor & gt_(Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & le_(Tensor & self, Scalar other) const = 0;
  virtual Tensor & le_(Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & ge_(Tensor & self, Scalar other) const = 0;
  virtual Tensor & ge_(Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & eq_(Tensor & self, Scalar other) const = 0;
  virtual Tensor & eq_(Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & ne_(Tensor & self, Scalar other) const = 0;
  virtual Tensor & ne_(Tensor & self, const Tensor & other) const = 0;
  virtual Tensor __and__(const Tensor & self, Scalar other) const = 0;
  virtual Tensor __and__(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & __iand__(Tensor & self, Scalar other) const = 0;
  virtual Tensor & __iand__(Tensor & self, const Tensor & other) const = 0;
  virtual Tensor __or__(const Tensor & self, Scalar other) const = 0;
  virtual Tensor __or__(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & __ior__(Tensor & self, Scalar other) const = 0;
  virtual Tensor & __ior__(Tensor & self, const Tensor & other) const = 0;
  virtual Tensor __xor__(const Tensor & self, Scalar other) const = 0;
  virtual Tensor __xor__(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & __ixor__(Tensor & self, Scalar other) const = 0;
  virtual Tensor & __ixor__(Tensor & self, const Tensor & other) const = 0;
  virtual Tensor __lshift__(const Tensor & self, Scalar other) const = 0;
  virtual Tensor __lshift__(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & __ilshift__(Tensor & self, Scalar other) const = 0;
  virtual Tensor & __ilshift__(Tensor & self, const Tensor & other) const = 0;
  virtual Tensor __rshift__(const Tensor & self, Scalar other) const = 0;
  virtual Tensor __rshift__(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & __irshift__(Tensor & self, Scalar other) const = 0;
  virtual Tensor & __irshift__(Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & lgamma_(Tensor & self) const = 0;
  virtual Tensor & atan2_(Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & tril_(Tensor & self, int64_t diagonal) const = 0;
  virtual Tensor & triu_(Tensor & self, int64_t diagonal) const = 0;
  virtual Tensor & digamma_(Tensor & self) const = 0;
  virtual Tensor & polygamma_(Tensor & self, int64_t n) const = 0;
  virtual Tensor & erfinv_(Tensor & self) const = 0;
  virtual Tensor & renorm_(Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const = 0;
  virtual Tensor & pow_(Tensor & self, Scalar exponent) const = 0;
  virtual Tensor & pow_(Tensor & self, const Tensor & exponent) const = 0;
  virtual Tensor & lerp_(Tensor & self, const Tensor & end, Scalar weight) const = 0;
  virtual Tensor & lerp_(Tensor & self, const Tensor & end, const Tensor & weight) const = 0;
  virtual Tensor & sign_(Tensor & self) const = 0;
  virtual Tensor & fmod_(Tensor & self, Scalar other) const = 0;
  virtual Tensor & fmod_(Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & remainder_(Tensor & self, Scalar other) const = 0;
  virtual Tensor & remainder_(Tensor & self, const Tensor & other) const = 0;
  virtual Tensor & addbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const = 0;
  virtual Tensor & addcmul_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const = 0;
  virtual Tensor & addcdiv_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const = 0;
  virtual Tensor & random_(Tensor & self, int64_t from, int64_t to, Generator * generator) const = 0;
  virtual Tensor & random_(Tensor & self, int64_t to, Generator * generator) const = 0;
  virtual Tensor & random_(Tensor & self, Generator * generator) const = 0;
  virtual Tensor & uniform_(Tensor & self, double from, double to, Generator * generator) const = 0;
  virtual Tensor & normal_(Tensor & self, double mean, double std, Generator * generator) const = 0;
  virtual Tensor & cauchy_(Tensor & self, double median, double sigma, Generator * generator) const = 0;
  virtual Tensor & log_normal_(Tensor & self, double mean, double std, Generator * generator) const = 0;
  virtual Tensor & exponential_(Tensor & self, double lambd, Generator * generator) const = 0;
  virtual Tensor & geometric_(Tensor & self, double p, Generator * generator) const = 0;
  virtual Tensor diag(const Tensor & self, int64_t diagonal) const = 0;
  virtual Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) const = 0;
  virtual Tensor triu(const Tensor & self, int64_t diagonal) const = 0;
  virtual Tensor tril(const Tensor & self, int64_t diagonal) const = 0;
  virtual Tensor trace(const Tensor & self) const = 0;
  virtual Tensor ne(const Tensor & self, Scalar other) const = 0;
  virtual Tensor ne(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor eq(const Tensor & self, Scalar other) const = 0;
  virtual Tensor eq(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor ge(const Tensor & self, Scalar other) const = 0;
  virtual Tensor ge(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor le(const Tensor & self, Scalar other) const = 0;
  virtual Tensor le(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor gt(const Tensor & self, Scalar other) const = 0;
  virtual Tensor gt(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor lt(const Tensor & self, Scalar other) const = 0;
  virtual Tensor lt(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor take(const Tensor & self, const Tensor & index) const = 0;
  virtual Tensor index_select(const Tensor & self, int64_t dim, const Tensor & index) const = 0;
  virtual Tensor masked_select(const Tensor & self, const Tensor & mask) const = 0;
  virtual Tensor nonzero(const Tensor & self) const = 0;
  virtual Tensor gather(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) const = 0;
  virtual Tensor addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const = 0;
  virtual Tensor addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const = 0;
  virtual std::tuple<Tensor,Tensor> gels(const Tensor & self, const Tensor & A) const = 0;
  virtual std::tuple<Tensor,Tensor> triangular_solve(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) const = 0;
  virtual std::tuple<Tensor,Tensor> symeig(const Tensor & self, bool eigenvectors, bool upper) const = 0;
  virtual std::tuple<Tensor,Tensor> eig(const Tensor & self, bool eigenvectors) const = 0;
  virtual std::tuple<Tensor,Tensor,Tensor> svd(const Tensor & self, bool some, bool compute_uv) const = 0;
  virtual Tensor cholesky(const Tensor & self, bool upper) const = 0;
  virtual Tensor cholesky_solve(const Tensor & self, const Tensor & input2, bool upper) const = 0;
  virtual std::tuple<Tensor,Tensor> solve(const Tensor & self, const Tensor & A) const = 0;
  virtual Tensor cholesky_inverse(const Tensor & self, bool upper) const = 0;
  virtual std::tuple<Tensor,Tensor> pstrf(const Tensor & self, bool upper, Scalar tol) const = 0;
  virtual std::tuple<Tensor,Tensor> qr(const Tensor & self) const = 0;
  virtual std::tuple<Tensor,Tensor> geqrf(const Tensor & self) const = 0;
  virtual Tensor orgqr(const Tensor & self, const Tensor & input2) const = 0;
  virtual Tensor ormqr(const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) const = 0;
  virtual Tensor lu_solve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) const = 0;
  virtual Tensor multinomial(const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) const = 0;
  virtual Tensor lgamma(const Tensor & self) const = 0;
  virtual Tensor digamma(const Tensor & self) const = 0;
  virtual Tensor polygamma(int64_t n, const Tensor & self) const = 0;
  virtual Tensor erfinv(const Tensor & self) const = 0;
  virtual Tensor dist(const Tensor & self, const Tensor & other, Scalar p) const = 0;
  virtual Tensor atan2(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor lerp(const Tensor & self, const Tensor & end, Scalar weight) const = 0;
  virtual Tensor lerp(const Tensor & self, const Tensor & end, const Tensor & weight) const = 0;
  virtual Tensor histc(const Tensor & self, int64_t bins, Scalar min, Scalar max) const = 0;
  virtual Tensor sign(const Tensor & self) const = 0;
  virtual Tensor fmod(const Tensor & self, Scalar other) const = 0;
  virtual Tensor fmod(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor remainder(const Tensor & self, Scalar other) const = 0;
  virtual Tensor remainder(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor min(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor min(const Tensor & self) const = 0;
  virtual Tensor max(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor max(const Tensor & self) const = 0;
  virtual Tensor median(const Tensor & self) const = 0;
  virtual std::tuple<Tensor,Tensor> sort(const Tensor & self, int64_t dim, bool descending) const = 0;
  virtual Tensor argsort(const Tensor & self, int64_t dim, bool descending) const = 0;
  virtual std::tuple<Tensor,Tensor> topk(const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) const = 0;
  virtual Tensor all(const Tensor & self) const = 0;
  virtual Tensor any(const Tensor & self) const = 0;
  virtual Tensor renorm(const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const = 0;
  virtual Tensor unfold(const Tensor & self, int64_t dimension, int64_t size, int64_t step) const = 0;
  virtual bool equal(const Tensor & self, const Tensor & other) const = 0;
  virtual Tensor pow(const Tensor & self, const Tensor & exponent) const = 0;
  virtual Tensor pow(Scalar self, const Tensor & exponent) const = 0;
  virtual Tensor alias(const Tensor & self) const = 0;
#endif
  Tensor & _th_set_(Tensor & self, Storage source) const;
  Tensor & _th_set_(Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride) const;
  Tensor & _th_set_(Tensor & self, const Tensor & source) const;
  Tensor & _th_set_(Tensor & self) const;
  Tensor & _th_fill_(Tensor & self, Scalar value) const;
  Tensor & _th_fill_(Tensor & self, const Tensor & value) const;
  bool _th_is_set_to(const Tensor & self, const Tensor & tensor) const;
  Tensor & _th_masked_fill_(Tensor & self, const Tensor & mask, Scalar value) const;
  Tensor & s__th_masked_fill_(Tensor & self, const Tensor & mask, Scalar value) const;
  Tensor & _th_masked_fill_(Tensor & self, const Tensor & mask, const Tensor & value) const;
  Tensor & s__th_masked_fill_(Tensor & self, const Tensor & mask, const Tensor & value) const;
  Tensor & _th_masked_fill_bool_(Tensor & self, const Tensor & mask, Scalar value) const;
  Tensor & _th_masked_fill_bool_(Tensor & self, const Tensor & mask, const Tensor & value) const;
  Tensor & _th_masked_scatter_(Tensor & self, const Tensor & mask, const Tensor & source) const;
  Tensor & s__th_masked_scatter_(Tensor & self, const Tensor & mask, const Tensor & source) const;
  Tensor & _th_masked_scatter_bool_(Tensor & self, const Tensor & mask, const Tensor & source) const;
  Tensor & _th_masked_select_out(Tensor & result, const Tensor & self, const Tensor & mask) const;
  Tensor & s__th_masked_select_out(Tensor & result, const Tensor & self, const Tensor & mask) const;
  Tensor _th_masked_select(const Tensor & self, const Tensor & mask) const;
  Tensor s__th_masked_select(const Tensor & self, const Tensor & mask) const;
  Tensor & _th_masked_select_bool_out(Tensor & result, const Tensor & self, const Tensor & mask) const;
  Tensor _th_masked_select_bool(const Tensor & self, const Tensor & mask) const;
  Tensor & _th_nonzero_out(Tensor & result, const Tensor & self) const;
  Tensor _th_nonzero(const Tensor & self) const;
  Tensor _th_clone(const Tensor & self) const;
  Tensor _th_view(const Tensor & self, IntArrayRef size) const;
  Tensor & _th_resize_as_(Tensor & self, const Tensor & the_template) const;
  Tensor & _th_index_select_out(Tensor & result, const Tensor & self, int64_t dim, const Tensor & index) const;
  Tensor _th_index_select(const Tensor & self, int64_t dim, const Tensor & index) const;
  Tensor & _th_index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const;
  Tensor & _th_take_out(Tensor & result, const Tensor & self, const Tensor & index) const;
  Tensor _th_take(const Tensor & self, const Tensor & index) const;
  Tensor & _th_put_(Tensor & self, const Tensor & index, const Tensor & source, bool accumulate) const;
  Tensor & _th_index_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const;
  Tensor & _th_index_fill_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) const;
  Tensor & _th_index_fill_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) const;
  Tensor & _th_unfold_out(Tensor & result, const Tensor & self, int64_t dimension, int64_t size, int64_t step) const;
  Tensor _th_unfold(const Tensor & self, int64_t dimension, int64_t size, int64_t step) const;
  Tensor & _th_scatter_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const;
  Tensor & _th_scatter_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) const;
  Tensor & _th_scatter_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const;
  Tensor & _th_gather_out(Tensor & result, const Tensor & self, int64_t dim, const Tensor & index) const;
  Tensor _th_gather(const Tensor & self, int64_t dim, const Tensor & index) const;
  bool _th_equal(const Tensor & self, const Tensor & other) const;
  Tensor & _th_and_out(Tensor & result, const Tensor & self, Scalar other) const;
  Tensor _th_and(const Tensor & self, Scalar other) const;
  Tensor & _th_and_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor & s__th_and_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor _th_and(const Tensor & self, const Tensor & other) const;
  Tensor s__th_and(const Tensor & self, const Tensor & other) const;
  Tensor & _th_iand_(Tensor & self, Scalar other) const;
  Tensor & _th_iand_(Tensor & self, const Tensor & other) const;
  Tensor & s__th_iand_(Tensor & self, const Tensor & other) const;
  Tensor & _th_or_out(Tensor & result, const Tensor & self, Scalar other) const;
  Tensor _th_or(const Tensor & self, Scalar other) const;
  Tensor & _th_or_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor & s__th_or_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor _th_or(const Tensor & self, const Tensor & other) const;
  Tensor s__th_or(const Tensor & self, const Tensor & other) const;
  Tensor & _th_ior_(Tensor & self, Scalar other) const;
  Tensor & _th_ior_(Tensor & self, const Tensor & other) const;
  Tensor & s__th_ior_(Tensor & self, const Tensor & other) const;
  Tensor & _th_xor_out(Tensor & result, const Tensor & self, Scalar other) const;
  Tensor _th_xor(const Tensor & self, Scalar other) const;
  Tensor & _th_xor_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor & s__th_xor_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor _th_xor(const Tensor & self, const Tensor & other) const;
  Tensor s__th_xor(const Tensor & self, const Tensor & other) const;
  Tensor & _th_ixor_(Tensor & self, Scalar other) const;
  Tensor & _th_ixor_(Tensor & self, const Tensor & other) const;
  Tensor & s__th_ixor_(Tensor & self, const Tensor & other) const;
  Tensor & _th_lshift_out(Tensor & result, const Tensor & self, Scalar other) const;
  Tensor _th_lshift(const Tensor & self, Scalar other) const;
  Tensor & _th_lshift_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor & s__th_lshift_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor _th_lshift(const Tensor & self, const Tensor & other) const;
  Tensor s__th_lshift(const Tensor & self, const Tensor & other) const;
  Tensor & _th_ilshift_(Tensor & self, Scalar other) const;
  Tensor & _th_ilshift_(Tensor & self, const Tensor & other) const;
  Tensor & s__th_ilshift_(Tensor & self, const Tensor & other) const;
  Tensor & _th_rshift_out(Tensor & result, const Tensor & self, Scalar other) const;
  Tensor _th_rshift(const Tensor & self, Scalar other) const;
  Tensor & _th_rshift_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor & s__th_rshift_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor _th_rshift(const Tensor & self, const Tensor & other) const;
  Tensor s__th_rshift(const Tensor & self, const Tensor & other) const;
  Tensor & _th_irshift_(Tensor & self, Scalar other) const;
  Tensor & _th_irshift_(Tensor & self, const Tensor & other) const;
  Tensor & s__th_irshift_(Tensor & self, const Tensor & other) const;
  Tensor & _th_lt_out(Tensor & result, const Tensor & self, Scalar other) const;
  Tensor _th_lt(const Tensor & self, Scalar other) const;
  Tensor & _th_lt_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor & s__th_lt_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor _th_lt(const Tensor & self, const Tensor & other) const;
  Tensor s__th_lt(const Tensor & self, const Tensor & other) const;
  Tensor & _th_lt_(Tensor & self, Scalar other) const;
  Tensor & _th_lt_(Tensor & self, const Tensor & other) const;
  Tensor & s__th_lt_(Tensor & self, const Tensor & other) const;
  Tensor & _th_gt_out(Tensor & result, const Tensor & self, Scalar other) const;
  Tensor _th_gt(const Tensor & self, Scalar other) const;
  Tensor & _th_gt_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor & s__th_gt_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor _th_gt(const Tensor & self, const Tensor & other) const;
  Tensor s__th_gt(const Tensor & self, const Tensor & other) const;
  Tensor & _th_gt_(Tensor & self, Scalar other) const;
  Tensor & _th_gt_(Tensor & self, const Tensor & other) const;
  Tensor & s__th_gt_(Tensor & self, const Tensor & other) const;
  Tensor & _th_le_out(Tensor & result, const Tensor & self, Scalar other) const;
  Tensor _th_le(const Tensor & self, Scalar other) const;
  Tensor & _th_le_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor & s__th_le_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor _th_le(const Tensor & self, const Tensor & other) const;
  Tensor s__th_le(const Tensor & self, const Tensor & other) const;
  Tensor & _th_le_(Tensor & self, Scalar other) const;
  Tensor & _th_le_(Tensor & self, const Tensor & other) const;
  Tensor & s__th_le_(Tensor & self, const Tensor & other) const;
  Tensor & _th_ge_out(Tensor & result, const Tensor & self, Scalar other) const;
  Tensor _th_ge(const Tensor & self, Scalar other) const;
  Tensor & _th_ge_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor & s__th_ge_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor _th_ge(const Tensor & self, const Tensor & other) const;
  Tensor s__th_ge(const Tensor & self, const Tensor & other) const;
  Tensor & _th_ge_(Tensor & self, Scalar other) const;
  Tensor & _th_ge_(Tensor & self, const Tensor & other) const;
  Tensor & s__th_ge_(Tensor & self, const Tensor & other) const;
  Tensor & _th_eq_out(Tensor & result, const Tensor & self, Scalar other) const;
  Tensor _th_eq(const Tensor & self, Scalar other) const;
  Tensor & _th_eq_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor & s__th_eq_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor _th_eq(const Tensor & self, const Tensor & other) const;
  Tensor s__th_eq(const Tensor & self, const Tensor & other) const;
  Tensor & _th_eq_(Tensor & self, Scalar other) const;
  Tensor & _th_eq_(Tensor & self, const Tensor & other) const;
  Tensor & s__th_eq_(Tensor & self, const Tensor & other) const;
  Tensor & _th_ne_out(Tensor & result, const Tensor & self, Scalar other) const;
  Tensor _th_ne(const Tensor & self, Scalar other) const;
  Tensor & _th_ne_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor & s__th_ne_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor _th_ne(const Tensor & self, const Tensor & other) const;
  Tensor s__th_ne(const Tensor & self, const Tensor & other) const;
  Tensor & _th_ne_(Tensor & self, Scalar other) const;
  Tensor & _th_ne_(Tensor & self, const Tensor & other) const;
  Tensor & s__th_ne_(Tensor & self, const Tensor & other) const;
  Tensor & _th_min_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor & s__th_min_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor _th_min(const Tensor & self, const Tensor & other) const;
  Tensor s__th_min(const Tensor & self, const Tensor & other) const;
  Tensor _th_min(const Tensor & self) const;
  std::tuple<Tensor &,Tensor &> _th_min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) const;
  std::tuple<Tensor,Tensor> _th_min(const Tensor & self, int64_t dim, bool keepdim) const;
  Tensor & _th_max_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor & s__th_max_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor _th_max(const Tensor & self, const Tensor & other) const;
  Tensor s__th_max(const Tensor & self, const Tensor & other) const;
  Tensor _th_max(const Tensor & self) const;
  std::tuple<Tensor &,Tensor &> _th_max_out(Tensor & max, Tensor & max_indices, const Tensor & self, int64_t dim, bool keepdim) const;
  std::tuple<Tensor,Tensor> _th_max(const Tensor & self, int64_t dim, bool keepdim) const;
  std::tuple<Tensor &,Tensor &> _th_mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) const;
  std::tuple<Tensor,Tensor> _th_mode(const Tensor & self, int64_t dim, bool keepdim) const;
  std::tuple<Tensor &,Tensor &> _th_sort_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool descending) const;
  std::tuple<Tensor,Tensor> _th_sort(const Tensor & self, int64_t dim, bool descending) const;
  std::tuple<Tensor &,Tensor &> _th_topk_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) const;
  std::tuple<Tensor,Tensor> _th_topk(const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) const;
  Tensor & _th_abs_out(Tensor & result, const Tensor & self) const;
  Tensor _th_abs(const Tensor & self) const;
  Tensor & _th_sigmoid_out(Tensor & result, const Tensor & self) const;
  Tensor _th_sigmoid(const Tensor & self) const;
  Tensor & _th_log_out(Tensor & result, const Tensor & self) const;
  Tensor _th_log(const Tensor & self) const;
  Tensor & _th_log10_out(Tensor & result, const Tensor & self) const;
  Tensor _th_log10(const Tensor & self) const;
  Tensor & _th_log1p_out(Tensor & result, const Tensor & self) const;
  Tensor _th_log1p(const Tensor & self) const;
  Tensor & _th_log2_out(Tensor & result, const Tensor & self) const;
  Tensor _th_log2(const Tensor & self) const;
  Tensor & _th_lgamma_out(Tensor & result, const Tensor & self) const;
  Tensor _th_lgamma(const Tensor & self) const;
  Tensor & _th_lgamma_(Tensor & self) const;
  Tensor & _th_digamma_out(Tensor & result, const Tensor & self) const;
  Tensor _th_digamma(const Tensor & self) const;
  Tensor & _th_digamma_(Tensor & self) const;
  Tensor & _th_polygamma_out(Tensor & result, int64_t n, const Tensor & self) const;
  Tensor _th_polygamma(int64_t n, const Tensor & self) const;
  Tensor & _th_polygamma_(Tensor & self, int64_t n) const;
  Tensor & _th_exp_out(Tensor & result, const Tensor & self) const;
  Tensor _th_exp(const Tensor & self) const;
  Tensor & _th_expm1_out(Tensor & result, const Tensor & self) const;
  Tensor _th_expm1(const Tensor & self) const;
  Tensor & _th_cos_out(Tensor & result, const Tensor & self) const;
  Tensor _th_cos(const Tensor & self) const;
  Tensor & _th_acos_out(Tensor & result, const Tensor & self) const;
  Tensor _th_acos(const Tensor & self) const;
  Tensor & _th_cosh_out(Tensor & result, const Tensor & self) const;
  Tensor _th_cosh(const Tensor & self) const;
  Tensor & _th_sin_out(Tensor & result, const Tensor & self) const;
  Tensor _th_sin(const Tensor & self) const;
  Tensor & _th_asin_out(Tensor & result, const Tensor & self) const;
  Tensor _th_asin(const Tensor & self) const;
  Tensor & _th_sinh_out(Tensor & result, const Tensor & self) const;
  Tensor _th_sinh(const Tensor & self) const;
  Tensor & _th_tan_out(Tensor & result, const Tensor & self) const;
  Tensor _th_tan(const Tensor & self) const;
  Tensor & _th_atan_out(Tensor & result, const Tensor & self) const;
  Tensor _th_atan(const Tensor & self) const;
  Tensor & _th_tanh_out(Tensor & result, const Tensor & self) const;
  Tensor _th_tanh(const Tensor & self) const;
  Tensor & _th_erf_out(Tensor & result, const Tensor & self) const;
  Tensor _th_erf(const Tensor & self) const;
  Tensor & _th_erfc_out(Tensor & result, const Tensor & self) const;
  Tensor _th_erfc(const Tensor & self) const;
  Tensor & _th_erfinv_(Tensor & self) const;
  Tensor & _th_erfinv_out(Tensor & result, const Tensor & self) const;
  Tensor _th_erfinv(const Tensor & self) const;
  Tensor & _th_sqrt_out(Tensor & result, const Tensor & self) const;
  Tensor _th_sqrt(const Tensor & self) const;
  Tensor & _th_rsqrt_out(Tensor & result, const Tensor & self) const;
  Tensor _th_rsqrt(const Tensor & self) const;
  Tensor & _th_ceil_out(Tensor & result, const Tensor & self) const;
  Tensor _th_ceil(const Tensor & self) const;
  Tensor & _th_floor_out(Tensor & result, const Tensor & self) const;
  Tensor _th_floor(const Tensor & self) const;
  Tensor & _th_round_out(Tensor & result, const Tensor & self) const;
  Tensor _th_round(const Tensor & self) const;
  Tensor & _th_trunc_out(Tensor & result, const Tensor & self) const;
  Tensor _th_trunc(const Tensor & self) const;
  Tensor & _th_frac_(Tensor & self) const;
  Tensor & _th_frac_out(Tensor & result, const Tensor & self) const;
  Tensor _th_frac(const Tensor & self) const;
  Tensor & _th_var_out(Tensor & result, const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const;
  Tensor _th_var(const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const;
  Tensor _th_var(const Tensor & self, bool unbiased) const;
  Tensor & _th_std_out(Tensor & result, const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const;
  Tensor _th_std(const Tensor & self, int64_t dim, bool unbiased, bool keepdim) const;
  Tensor _th_std(const Tensor & self, bool unbiased) const;
  Tensor & _th_renorm_out(Tensor & result, const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const;
  Tensor _th_renorm(const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const;
  Tensor & _th_renorm_(Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const;
  Tensor _th_dist(const Tensor & self, const Tensor & other, Scalar p) const;
  Tensor s__th_dist(const Tensor & self, const Tensor & other, Scalar p) const;
  Tensor & _th_reciprocal_out(Tensor & result, const Tensor & self) const;
  Tensor _th_reciprocal(const Tensor & self) const;
  Tensor & _th_reciprocal_(Tensor & self) const;
  Tensor & _th_neg_out(Tensor & result, const Tensor & self) const;
  Tensor _th_neg(const Tensor & self) const;
  Tensor & _th_neg_(Tensor & self) const;
  Tensor & _th_atan2_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor & s__th_atan2_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor _th_atan2(const Tensor & self, const Tensor & other) const;
  Tensor s__th_atan2(const Tensor & self, const Tensor & other) const;
  Tensor & _th_atan2_(Tensor & self, const Tensor & other) const;
  Tensor & s__th_atan2_(Tensor & self, const Tensor & other) const;
  Tensor & _th_pow_out(Tensor & result, const Tensor & self, Scalar exponent) const;
  Tensor _th_pow(const Tensor & self, Scalar exponent) const;
  Tensor & _th_pow_out(Tensor & result, const Tensor & self, const Tensor & exponent) const;
  Tensor & s__th_pow_out(Tensor & result, const Tensor & self, const Tensor & exponent) const;
  Tensor _th_pow(const Tensor & self, const Tensor & exponent) const;
  Tensor s__th_pow(const Tensor & self, const Tensor & exponent) const;
  Tensor & _th_pow_out(Tensor & result, Scalar self, const Tensor & exponent) const;
  Tensor _th_pow(Scalar self, const Tensor & exponent) const;
  Tensor & _th_pow_(Tensor & self, Scalar exponent) const;
  Tensor & _th_pow_(Tensor & self, const Tensor & exponent) const;
  Tensor & s__th_pow_(Tensor & self, const Tensor & exponent) const;
  Tensor & _th_histc_out(Tensor & result, const Tensor & self, int64_t bins, Scalar min, Scalar max) const;
  Tensor _th_histc(const Tensor & self, int64_t bins, Scalar min, Scalar max) const;
  Tensor & _th_zero_(Tensor & self) const;
  Tensor & _th_cumsum_out(Tensor & result, const Tensor & self, int64_t dim) const;
  Tensor _th_cumsum(const Tensor & self, int64_t dim) const;
  Tensor & _th_cumprod_out(Tensor & result, const Tensor & self, int64_t dim) const;
  Tensor _th_cumprod(const Tensor & self, int64_t dim) const;
  Tensor & _th_sign_out(Tensor & result, const Tensor & self) const;
  Tensor _th_sign(const Tensor & self) const;
  Tensor & _th_sign_(Tensor & self) const;
  Tensor _th_trace(const Tensor & self) const;
  Tensor & _th_fmod_out(Tensor & result, const Tensor & self, Scalar other) const;
  Tensor _th_fmod(const Tensor & self, Scalar other) const;
  Tensor & _th_fmod_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor & s__th_fmod_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor _th_fmod(const Tensor & self, const Tensor & other) const;
  Tensor s__th_fmod(const Tensor & self, const Tensor & other) const;
  Tensor & _th_fmod_(Tensor & self, Scalar other) const;
  Tensor & _th_fmod_(Tensor & self, const Tensor & other) const;
  Tensor & s__th_fmod_(Tensor & self, const Tensor & other) const;
  Tensor & _th_remainder_out(Tensor & result, const Tensor & self, Scalar other) const;
  Tensor _th_remainder(const Tensor & self, Scalar other) const;
  Tensor & _th_remainder_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor & s__th_remainder_out(Tensor & result, const Tensor & self, const Tensor & other) const;
  Tensor _th_remainder(const Tensor & self, const Tensor & other) const;
  Tensor s__th_remainder(const Tensor & self, const Tensor & other) const;
  Tensor & _th_remainder_(Tensor & self, Scalar other) const;
  Tensor & _th_remainder_(Tensor & self, const Tensor & other) const;
  Tensor & s__th_remainder_(Tensor & self, const Tensor & other) const;
  Tensor & _th_clamp_out(Tensor & result, const Tensor & self, Scalar min, Scalar max) const;
  Tensor _th_clamp(const Tensor & self, Scalar min, Scalar max) const;
  Tensor & _th_clamp_min_out(Tensor & result, const Tensor & self, Scalar min) const;
  Tensor _th_clamp_min(const Tensor & self, Scalar min) const;
  Tensor & _th_clamp_max_out(Tensor & result, const Tensor & self, Scalar max) const;
  Tensor _th_clamp_max(const Tensor & self, Scalar max) const;
  Tensor _th_dot(const Tensor & self, const Tensor & tensor) const;
  Tensor & _th_cross_kernel_out(Tensor & result, const Tensor & self, const Tensor & other, int64_t dim) const;
  Tensor _th_cross_kernel(const Tensor & self, const Tensor & other, int64_t dim) const;
  Tensor & _th_diag_out(Tensor & result, const Tensor & self, int64_t diagonal) const;
  Tensor _th_diag(const Tensor & self, int64_t diagonal) const;
  Tensor & _th_addmm_out(Tensor & result, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const;
  Tensor & s__th_addmm_out(Tensor & result, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const;
  Tensor _th_addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const;
  Tensor s__th_addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const;
  Tensor & _th_addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const;
  Tensor & _th_addmv_out(Tensor & result, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const;
  Tensor & s__th_addmv_out(Tensor & result, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const;
  Tensor _th_addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const;
  Tensor s__th_addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const;
  Tensor & _th_addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const;
  Tensor & _th_addr_out(Tensor & result, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const;
  Tensor & s__th_addr_out(Tensor & result, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const;
  Tensor _th_addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const;
  Tensor s__th_addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const;
  Tensor & _th_addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const;
  Tensor & _th_ger_out(Tensor & result, const Tensor & self, const Tensor & vec2) const;
  Tensor _th_ger(const Tensor & self, const Tensor & vec2) const;
  Tensor & _th_mv_out(Tensor & result, const Tensor & self, const Tensor & vec) const;
  Tensor _th_mv(const Tensor & self, const Tensor & vec) const;
  Tensor & _th_mm_out(Tensor & result, const Tensor & self, const Tensor & mat2) const;
  Tensor _th_mm(const Tensor & self, const Tensor & mat2) const;
  Tensor & _th_bmm_out(Tensor & result, const Tensor & self, const Tensor & mat2) const;
  Tensor _th_bmm(const Tensor & self, const Tensor & mat2) const;
  Tensor & _th_addbmm_out(Tensor & result, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const;
  Tensor & s__th_addbmm_out(Tensor & result, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const;
  Tensor _th_addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const;
  Tensor s__th_addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const;
  Tensor & _th_addbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const;
  Tensor & _th_baddbmm_out(Tensor & result, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const;
  Tensor & s__th_baddbmm_out(Tensor & result, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const;
  Tensor _th_baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const;
  Tensor s__th_baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const;
  Tensor & _th_addcmul_out(Tensor & result, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  Tensor & s__th_addcmul_out(Tensor & result, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  Tensor _th_addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  Tensor s__th_addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  Tensor & _th_addcmul_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  Tensor & s__th_addcmul_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  Tensor & _th_addcdiv_out(Tensor & result, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  Tensor & s__th_addcdiv_out(Tensor & result, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  Tensor _th_addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  Tensor s__th_addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  Tensor & _th_addcdiv_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  Tensor & s__th_addcdiv_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  std::tuple<Tensor &,Tensor &> _th_gels_out(Tensor & res1, Tensor & res2, const Tensor & self, const Tensor & A) const;
  std::tuple<Tensor,Tensor> _th_gels(const Tensor & self, const Tensor & A) const;
  std::tuple<Tensor &,Tensor &> _th_symeig_out(Tensor & res1, Tensor & res2, const Tensor & self, bool eigenvectors, bool upper) const;
  std::tuple<Tensor,Tensor> _th_symeig(const Tensor & self, bool eigenvectors, bool upper) const;
  std::tuple<Tensor &,Tensor &> _th_eig_out(Tensor & res1, Tensor & res2, const Tensor & self, bool eigenvectors) const;
  std::tuple<Tensor,Tensor> _th_eig(const Tensor & self, bool eigenvectors) const;
  std::tuple<Tensor &,Tensor &,Tensor &> _th_svd_out(Tensor & res1, Tensor & res2, Tensor & res3, const Tensor & self, bool some, bool compute_uv) const;
  std::tuple<Tensor,Tensor,Tensor> _th_svd(const Tensor & self, bool some, bool compute_uv) const;
  Tensor & _th_getri_single_out(Tensor & output, const Tensor & self) const;
  Tensor _th_getri_single(const Tensor & self) const;
  Tensor & _th_potri_out(Tensor & output, const Tensor & self, bool upper) const;
  Tensor _th_potri(const Tensor & self, bool upper) const;
  std::tuple<Tensor &,Tensor &> _th_pstrf_out(Tensor & res1, Tensor & res2, const Tensor & self, bool upper, Scalar tol) const;
  std::tuple<Tensor,Tensor> _th_pstrf(const Tensor & self, bool upper, Scalar tol) const;
  std::tuple<Tensor &,Tensor &> _th_qr_out(Tensor & res1, Tensor & res2, const Tensor & self) const;
  std::tuple<Tensor,Tensor> _th_qr(const Tensor & self) const;
  std::tuple<Tensor &,Tensor &> _th_geqrf_out(Tensor & res1, Tensor & res2, const Tensor & self) const;
  std::tuple<Tensor,Tensor> _th_geqrf(const Tensor & self) const;
  Tensor & _th_orgqr_out(Tensor & result, const Tensor & self, const Tensor & input2) const;
  Tensor _th_orgqr(const Tensor & self, const Tensor & input2) const;
  Tensor & _th_ormqr_out(Tensor & result, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) const;
  Tensor _th_ormqr(const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) const;
  Tensor & _th_btrisolve_out(Tensor & result, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) const;
  Tensor _th_btrisolve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) const;
  Tensor & _th_random_(Tensor & self, int64_t from, int64_t to, Generator * generator) const;
  Tensor & _th_random_(Tensor & self, int64_t to, Generator * generator) const;
  Tensor & _th_random_(Tensor & self, Generator * generator) const;
  std::tuple<Tensor &,Tensor &> _th_multinomial_alias_setup_out(Tensor & J, Tensor & q, const Tensor & probs) const;
  std::tuple<Tensor,Tensor> _th_multinomial_alias_setup(const Tensor & probs) const;
  Tensor & _th_multinomial_alias_draw_out(Tensor & result, const Tensor & q, const Tensor & J, int64_t num_samples, Generator * generator) const;
  Tensor _th_multinomial_alias_draw(const Tensor & q, const Tensor & J, int64_t num_samples, Generator * generator) const;
  Tensor & _th_multinomial_out(Tensor & result, const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) const;
  Tensor _th_multinomial(const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) const;
  Tensor & _th_uniform_(Tensor & self, double from, double to, Generator * generator) const;
  Tensor & _th_normal_out(Tensor & output, const Tensor & mean, double std, Generator * generator) const;
  Tensor _th_normal(const Tensor & mean, double std, Generator * generator) const;
  Tensor & _th_normal_out(Tensor & output, double mean, const Tensor & std, Generator * generator) const;
  Tensor _th_normal(double mean, const Tensor & std, Generator * generator) const;
  Tensor & _th_normal_out(Tensor & output, const Tensor & mean, const Tensor & std, Generator * generator) const;
  Tensor _th_normal(const Tensor & mean, const Tensor & std, Generator * generator) const;
  Tensor & _th_normal_(Tensor & self, double mean, double std, Generator * generator) const;
  Tensor & _th_cauchy_(Tensor & self, double median, double sigma, Generator * generator) const;
  Tensor & _th_log_normal_(Tensor & self, double mean, double std, Generator * generator) const;
  Tensor & _th_exponential_(Tensor & self, double lambd, Generator * generator) const;
  Tensor & _th_geometric_(Tensor & self, double p, Generator * generator) const;
  Tensor & _th_dirichlet_grad_out(Tensor & output, const Tensor & x, const Tensor & alpha, const Tensor & total) const;
  Tensor _th_dirichlet_grad(const Tensor & x, const Tensor & alpha, const Tensor & total) const;
  Tensor _th_alias(const Tensor & self) const;
  Tensor & _th_copy_ignoring_overlaps_(Tensor & self, const Tensor & src) const;
  Tensor & _th_cat_out(Tensor & self, TensorList tensors, int64_t dim) const;
  Tensor _th_cat(TensorList tensors, int64_t dim) const;
  Tensor & _thnn_binary_cross_entropy_forward_out(Tensor & output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const;
  Tensor _thnn_binary_cross_entropy_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const;
  Tensor & _thnn_binary_cross_entropy_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const;
  Tensor _thnn_binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const;
  Tensor & _thnn_l1_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor _thnn_l1_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & _thnn_l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor _thnn_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & _thnn_mse_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor _thnn_mse_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & _thnn_mse_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor _thnn_mse_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & _thnn_multi_margin_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const;
  Tensor _thnn_multi_margin_loss_forward(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const;
  Tensor & _thnn_multi_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const;
  Tensor _thnn_multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const;
  std::tuple<Tensor &,Tensor &> _thnn_multilabel_margin_loss_forward_out(Tensor & output, Tensor & is_target, const Tensor & self, const Tensor & target, int64_t reduction) const;
  std::tuple<Tensor,Tensor> _thnn_multilabel_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & _thnn_multilabel_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) const;
  Tensor _thnn_multilabel_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) const;
  std::tuple<Tensor &,Tensor &> _thnn_nll_loss_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const;
  std::tuple<Tensor,Tensor> _thnn_nll_loss_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const;
  Tensor & _thnn_nll_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const;
  Tensor _thnn_nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const;
  std::tuple<Tensor &,Tensor &> _thnn_nll_loss2d_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const;
  std::tuple<Tensor,Tensor> _thnn_nll_loss2d_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const;
  Tensor & _thnn_nll_loss2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const;
  Tensor _thnn_nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const;
  Tensor & _thnn_smooth_l1_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor _thnn_smooth_l1_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & _thnn_smooth_l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor _thnn_smooth_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & _thnn_soft_margin_loss_forward_out(Tensor & output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor _thnn_soft_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & _thnn_soft_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor _thnn_soft_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & _thnn_elu_forward_out(Tensor & output, const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const;
  Tensor _thnn_elu_forward(const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const;
  Tensor & _thnn_elu_backward_out(Tensor & grad_input, const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) const;
  Tensor _thnn_elu_backward(const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) const;
  Tensor & _thnn_elu_(Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const;
  Tensor & _thnn_elu_forward_(Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const;
  Tensor & _thnn_glu_forward_out(Tensor & output, const Tensor & self, int64_t dim) const;
  Tensor _thnn_glu_forward(const Tensor & self, int64_t dim) const;
  Tensor & _thnn_glu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, int64_t dim) const;
  Tensor _thnn_glu_backward(const Tensor & grad_output, const Tensor & self, int64_t dim) const;
  Tensor & _thnn_hardtanh_forward_out(Tensor & output, const Tensor & self, Scalar min_val, Scalar max_val) const;
  Tensor _thnn_hardtanh_forward(const Tensor & self, Scalar min_val, Scalar max_val) const;
  Tensor & _thnn_hardtanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) const;
  Tensor _thnn_hardtanh_backward(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) const;
  Tensor & _thnn_hardtanh_(Tensor & self, Scalar min_val, Scalar max_val) const;
  Tensor & _thnn_hardtanh_forward_(Tensor & self, Scalar min_val, Scalar max_val) const;
  Tensor & _thnn_leaky_relu_forward_out(Tensor & output, const Tensor & self, Scalar negative_slope) const;
  Tensor _thnn_leaky_relu_forward(const Tensor & self, Scalar negative_slope) const;
  Tensor & _thnn_leaky_relu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar negative_slope) const;
  Tensor _thnn_leaky_relu_backward(const Tensor & grad_output, const Tensor & self, Scalar negative_slope) const;
  Tensor & _thnn_leaky_relu_(Tensor & self, Scalar negative_slope) const;
  Tensor & _thnn_leaky_relu_forward_(Tensor & self, Scalar negative_slope) const;
  std::tuple<Tensor &,Tensor &> _thnn_log_sigmoid_forward_out(Tensor & output, Tensor & buffer, const Tensor & self) const;
  std::tuple<Tensor,Tensor> _thnn_log_sigmoid_forward(const Tensor & self) const;
  Tensor & _thnn_log_sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & buffer) const;
  Tensor _thnn_log_sigmoid_backward(const Tensor & grad_output, const Tensor & self, const Tensor & buffer) const;
  Tensor & _thnn_rrelu_with_noise_forward_out(Tensor & output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const;
  Tensor _thnn_rrelu_with_noise_forward(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const;
  Tensor & _thnn_rrelu_with_noise_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) const;
  Tensor _thnn_rrelu_with_noise_backward(const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) const;
  Tensor & _thnn_rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const;
  Tensor & _thnn_rrelu_with_noise_forward_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const;
  Tensor & _thnn_softplus_forward_out(Tensor & output, const Tensor & self, Scalar beta, Scalar threshold) const;
  Tensor _thnn_softplus_forward(const Tensor & self, Scalar beta, Scalar threshold) const;
  Tensor & _thnn_softplus_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) const;
  Tensor _thnn_softplus_backward(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) const;
  Tensor & _thnn_softshrink_forward_out(Tensor & output, const Tensor & self, Scalar lambd) const;
  Tensor _thnn_softshrink_forward(const Tensor & self, Scalar lambd) const;
  Tensor & _thnn_softshrink_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar lambd) const;
  Tensor _thnn_softshrink_backward(const Tensor & grad_output, const Tensor & self, Scalar lambd) const;
  Tensor & _thnn_adaptive_avg_pool3d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size) const;
  Tensor _thnn_adaptive_avg_pool3d_forward(const Tensor & self, IntArrayRef output_size) const;
  Tensor & _thnn_adaptive_avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self) const;
  Tensor _thnn_adaptive_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self) const;
  Tensor & _thnn_avg_pool2d_forward_out(Tensor & output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  Tensor _thnn_avg_pool2d_forward(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  Tensor & _thnn_avg_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  Tensor _thnn_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  Tensor & _thnn_avg_pool3d_forward_out(Tensor & output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  Tensor _thnn_avg_pool3d_forward(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  Tensor & _thnn_avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  Tensor _thnn_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  std::tuple<Tensor &,Tensor &> _thnn_max_pool2d_with_indices_forward_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const;
  std::tuple<Tensor,Tensor> _thnn_max_pool2d_with_indices_forward(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const;
  Tensor & _thnn_max_pool2d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const;
  Tensor _thnn_max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const;
  std::tuple<Tensor &,Tensor &> _thnn_max_pool3d_with_indices_forward_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const;
  std::tuple<Tensor,Tensor> _thnn_max_pool3d_with_indices_forward(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const;
  Tensor & _thnn_max_pool3d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const;
  Tensor _thnn_max_pool3d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const;
  Tensor & _thnn_max_unpool2d_forward_out(Tensor & output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) const;
  Tensor _thnn_max_unpool2d_forward(const Tensor & self, const Tensor & indices, IntArrayRef output_size) const;
  Tensor & _thnn_max_unpool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) const;
  Tensor _thnn_max_unpool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) const;
  Tensor & _thnn_max_unpool3d_forward_out(Tensor & output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const;
  Tensor _thnn_max_unpool3d_forward(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const;
  Tensor & _thnn_max_unpool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const;
  Tensor _thnn_max_unpool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const;
  Tensor & _thnn_upsample_linear1d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size, bool align_corners) const;
  Tensor _thnn_upsample_linear1d_forward(const Tensor & self, IntArrayRef output_size, bool align_corners) const;
  Tensor & _thnn_upsample_linear1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const;
  Tensor _thnn_upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const;
  Tensor & _thnn_upsample_bilinear2d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size, bool align_corners) const;
  Tensor _thnn_upsample_bilinear2d_forward(const Tensor & self, IntArrayRef output_size, bool align_corners) const;
  Tensor & _thnn_upsample_bilinear2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const;
  Tensor _thnn_upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const;
  Tensor & _thnn_upsample_bicubic2d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size, bool align_corners) const;
  Tensor _thnn_upsample_bicubic2d_forward(const Tensor & self, IntArrayRef output_size, bool align_corners) const;
  Tensor & _thnn_upsample_bicubic2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const;
  Tensor _thnn_upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const;
  Tensor & _thnn_upsample_trilinear3d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size, bool align_corners) const;
  Tensor _thnn_upsample_trilinear3d_forward(const Tensor & self, IntArrayRef output_size, bool align_corners) const;
  Tensor & _thnn_upsample_trilinear3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const;
  Tensor _thnn_upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const;
  Tensor & _thnn_upsample_nearest1d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size) const;
  Tensor _thnn_upsample_nearest1d_forward(const Tensor & self, IntArrayRef output_size) const;
  Tensor & _thnn_upsample_nearest1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const;
  Tensor _thnn_upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const;
  Tensor & _thnn_upsample_nearest2d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size) const;
  Tensor _thnn_upsample_nearest2d_forward(const Tensor & self, IntArrayRef output_size) const;
  Tensor & _thnn_upsample_nearest2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const;
  Tensor _thnn_upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const;
  Tensor & _thnn_upsample_nearest3d_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size) const;
  Tensor _thnn_upsample_nearest3d_forward(const Tensor & self, IntArrayRef output_size) const;
  Tensor & _thnn_upsample_nearest3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const;
  Tensor _thnn_upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const;
  Tensor & _thnn_sigmoid_forward_out(Tensor & output, const Tensor & self) const;
  Tensor _thnn_sigmoid_forward(const Tensor & self) const;
  Tensor & _thnn_sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) const;
  Tensor _thnn_sigmoid_backward(const Tensor & grad_output, const Tensor & output) const;
  Tensor & _thnn_tanh_forward_out(Tensor & output, const Tensor & self) const;
  Tensor _thnn_tanh_forward(const Tensor & self) const;
  Tensor & _thnn_tanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) const;
  Tensor _thnn_tanh_backward(const Tensor & grad_output, const Tensor & output) const;
  std::tuple<Tensor &,Tensor &,Tensor &> _thnn_conv_transpose2d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const;
  std::tuple<Tensor,Tensor,Tensor> _thnn_conv_transpose2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const;
  std::tuple<Tensor &,Tensor &,Tensor &> _thnn_conv_transpose2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) const;
  std::tuple<Tensor,Tensor,Tensor> _thnn_conv_transpose2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const;
  std::tuple<Tensor &,Tensor &,Tensor &> _thnn_conv_transpose3d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const;
  std::tuple<Tensor,Tensor,Tensor> _thnn_conv_transpose3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const;
  std::tuple<Tensor &,Tensor &,Tensor &> _thnn_conv_transpose3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input) const;
  std::tuple<Tensor,Tensor,Tensor> _thnn_conv_transpose3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const;
  std::tuple<Tensor &,Tensor &,Tensor &> _thnn_conv2d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const;
  std::tuple<Tensor,Tensor,Tensor> _thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const;
  std::tuple<Tensor &,Tensor &,Tensor &> _thnn_conv2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) const;
  std::tuple<Tensor,Tensor,Tensor> _thnn_conv2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const;
  Tensor & _thnn_conv_depthwise2d_forward_out(Tensor & output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  Tensor _thnn_conv_depthwise2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  std::tuple<Tensor &,Tensor &> _thnn_conv_depthwise2d_backward_out(Tensor & grad_input, Tensor & grad_weight, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  std::tuple<Tensor,Tensor> _thnn_conv_depthwise2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,2> output_mask) const;
  std::tuple<Tensor &,Tensor &,Tensor &> _thnn_conv3d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const;
  std::tuple<Tensor,Tensor,Tensor> _thnn_conv3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const;
  std::tuple<Tensor &,Tensor &,Tensor &> _thnn_conv3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) const;
  std::tuple<Tensor,Tensor,Tensor> _thnn_conv3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const;
  std::tuple<Tensor &,Tensor &,Tensor &> _thnn_conv_dilated2d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  std::tuple<Tensor,Tensor,Tensor> _thnn_conv_dilated2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  std::tuple<Tensor &,Tensor &,Tensor &> _thnn_conv_dilated2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) const;
  std::tuple<Tensor,Tensor,Tensor> _thnn_conv_dilated2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const;
  std::tuple<Tensor &,Tensor &,Tensor &> _thnn_conv_dilated3d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  std::tuple<Tensor,Tensor,Tensor> _thnn_conv_dilated3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  std::tuple<Tensor &,Tensor &,Tensor &> _thnn_conv_dilated3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) const;
  std::tuple<Tensor,Tensor,Tensor> _thnn_conv_dilated3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const;
  Tensor & _thnn_col2im_forward_out(Tensor & output, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const;
  Tensor _thnn_col2im_forward(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const;
  Tensor & _thnn_col2im_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const;
  Tensor _thnn_col2im_backward(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const;
  Tensor & _thnn_im2col_forward_out(Tensor & output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const;
  Tensor _thnn_im2col_forward(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const;
  Tensor & _thnn_im2col_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const;
  Tensor _thnn_im2col_backward(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const;
  Tensor _cast_Byte(const Tensor & self, bool non_blocking) const;
  Tensor _cast_Char(const Tensor & self, bool non_blocking) const;
  Tensor _cast_Double(const Tensor & self, bool non_blocking) const;
  Tensor _cast_Float(const Tensor & self, bool non_blocking) const;
  Tensor _cast_Int(const Tensor & self, bool non_blocking) const;
  Tensor _cast_Long(const Tensor & self, bool non_blocking) const;
  Tensor _cast_Short(const Tensor & self, bool non_blocking) const;
  Tensor _cast_Half(const Tensor & self, bool non_blocking) const;
  std::tuple<Tensor,Tensor> _cudnn_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool deterministic, bool zero_infinity) const;
  Tensor _cudnn_rnn_flatten_weight(TensorList weight_arr, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, bool bidirectional) const;
  std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state) const;
  std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> _cudnn_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) const;
  Tensor _cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, const TensorOptions & options) const;
  int64_t _debug_has_internal_overlap(const Tensor & self) const;
  std::tuple<Tensor,Tensor> _fused_dropout(const Tensor & self, double p, Generator * generator) const;
  Tensor _masked_scale(const Tensor & self, const Tensor & mask, double scale) const;
  std::tuple<Tensor,Tensor> _sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype) const;
  Tensor & _sobol_engine_ff_(Tensor & self, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated) const;
  Tensor & _sobol_engine_scramble_(Tensor & self, const Tensor & ltm, int64_t dimension) const;
  Tensor & _sobol_engine_initialize_state_(Tensor & self, int64_t dimension) const;
  Tensor _reshape_from_tensor(const Tensor & self, const Tensor & shape) const;
  Tensor _shape_as_tensor(const Tensor & self) const;
  Tensor dropout(const Tensor & input, double p, bool train) const;
  Tensor & dropout_(Tensor & self, double p, bool train) const;
  Tensor feature_dropout(const Tensor & input, double p, bool train) const;
  Tensor & feature_dropout_(Tensor & self, double p, bool train) const;
  Tensor alpha_dropout(const Tensor & input, double p, bool train) const;
  Tensor & alpha_dropout_(Tensor & self, double p, bool train) const;
  Tensor feature_alpha_dropout(const Tensor & input, double p, bool train) const;
  Tensor & feature_alpha_dropout_(Tensor & self, double p, bool train) const;
  Tensor abs(const Tensor & self) const;
  Tensor & abs_(Tensor & self) const;
  Tensor & abs_out(Tensor & out, const Tensor & self) const;
  Tensor acos(const Tensor & self) const;
  Tensor & acos_(Tensor & self) const;
  Tensor & acos_out(Tensor & out, const Tensor & self) const;
  Tensor avg_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  Tensor adaptive_avg_pool1d(const Tensor & self, IntArrayRef output_size) const;
  std::tuple<Tensor,Tensor> adaptive_max_pool1d(const Tensor & self, IntArrayRef output_size) const;
  Tensor add(const Tensor & self, const Tensor & other, Scalar alpha) const;
  Tensor & add_(Tensor & self, const Tensor & other, Scalar alpha) const;
  Tensor & add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) const;
  Tensor add(const Tensor & self, Scalar other, Scalar alpha) const;
  Tensor & add_(Tensor & self, Scalar other, Scalar alpha) const;
  Tensor addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const;
  Tensor & addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const;
  Tensor & addmv_out(Tensor & out, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) const;
  Tensor addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const;
  Tensor & addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const;
  Tensor & addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) const;
  Tensor affine_grid_generator(const Tensor & theta, IntArrayRef size) const;
  Tensor affine_grid_generator_backward(const Tensor & grad, IntArrayRef size) const;
  Tensor all(const Tensor & self, int64_t dim, bool keepdim) const;
  Tensor & all_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) const;
  bool allclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) const;
  Tensor any(const Tensor & self, int64_t dim, bool keepdim) const;
  Tensor & any_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) const;
  Tensor arange(Scalar end, const TensorOptions & options) const;
  Tensor arange(Scalar start, Scalar end, const TensorOptions & options) const;
  Tensor arange(Scalar start, Scalar end, Scalar step, const TensorOptions & options) const;
  Tensor & arange_out(Tensor & out, Scalar end) const;
  Tensor & arange_out(Tensor & out, Scalar start, Scalar end, Scalar step) const;
  Tensor _dim_arange(const Tensor & like, int64_t dim) const;
  Tensor argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) const;
  Tensor argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) const;
  Tensor as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) const;
  Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) const;
  Tensor asin(const Tensor & self) const;
  Tensor & asin_(Tensor & self) const;
  Tensor & asin_out(Tensor & out, const Tensor & self) const;
  Tensor atan(const Tensor & self) const;
  Tensor & atan_(Tensor & self) const;
  Tensor & atan_out(Tensor & out, const Tensor & self) const;
  Tensor baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const;
  Tensor & baddbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const;
  Tensor & _baddbmm_mkl_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const;
  Tensor & baddbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const;
  Tensor bartlett_window(int64_t window_length, const TensorOptions & options) const;
  Tensor bartlett_window(int64_t window_length, bool periodic, const TensorOptions & options) const;
  Tensor batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) const;
  std::tuple<Tensor,Tensor,Tensor,int64_t> _batch_norm_impl_index(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) const;
  std::tuple<Tensor,Tensor,Tensor> _batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var_transform, bool train, double eps, std::array<bool,3> output_mask) const;
  Tensor bernoulli(const Tensor & self, Generator * generator) const;
  Tensor & bernoulli_out(Tensor & out, const Tensor & self, Generator * generator) const;
  Tensor & bernoulli_(Tensor & self, const Tensor & p, Generator * generator) const;
  Tensor & bernoulli_(Tensor & self, double p, Generator * generator) const;
  Tensor bernoulli(const Tensor & self, double p, Generator * generator) const;
  Tensor bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const Tensor & bias) const;
  Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) const;
  Tensor binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) const;
  Tensor bincount(const Tensor & self, const Tensor & weights, int64_t minlength) const;
  Tensor blackman_window(int64_t window_length, const TensorOptions & options) const;
  Tensor blackman_window(int64_t window_length, bool periodic, const TensorOptions & options) const;
  Tensor bmm(const Tensor & self, const Tensor & mat2) const;
  Tensor & bmm_out(Tensor & out, const Tensor & self, const Tensor & mat2) const;
  std::vector<Tensor> broadcast_tensors(TensorList tensors) const;
  Tensor cat(TensorList tensors, int64_t dim) const;
  Tensor & cat_out(Tensor & out, TensorList tensors, int64_t dim) const;
  Tensor ceil(const Tensor & self) const;
  Tensor & ceil_(Tensor & self) const;
  Tensor & ceil_out(Tensor & out, const Tensor & self) const;
  Tensor chain_matmul(TensorList matrices) const;
  std::vector<Tensor> chunk(const Tensor & self, int64_t chunks, int64_t dim) const;
  Tensor clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) const;
  Tensor & clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) const;
  Tensor & clamp_out(Tensor & out, const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) const;
  Tensor clamp_max(const Tensor & self, Scalar max) const;
  Tensor & clamp_max_(Tensor & self, Scalar max) const;
  Tensor & clamp_max_out(Tensor & out, const Tensor & self, Scalar max) const;
  Tensor clamp_min(const Tensor & self, Scalar min) const;
  Tensor & clamp_min_(Tensor & self, Scalar min) const;
  Tensor & clamp_min_out(Tensor & out, const Tensor & self, Scalar min) const;
  bool cudnn_is_acceptable(const Tensor & self) const;
  Tensor constant_pad_nd(const Tensor & self, IntArrayRef pad, Scalar value) const;
  Tensor contiguous(const Tensor & self) const;
  Tensor convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) const;
  Tensor _convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) const;
  Tensor _convolution_nogroup(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding) const;
  std::tuple<Tensor,Tensor,Tensor> _convolution_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask) const;
  Tensor conv1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) const;
  Tensor conv2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) const;
  Tensor conv3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) const;
  Tensor conv_tbc(const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad) const;
  std::tuple<Tensor,Tensor,Tensor> conv_tbc_backward(const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad) const;
  Tensor conv_transpose1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) const;
  Tensor conv_transpose2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) const;
  Tensor conv_transpose3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) const;
  virtual Tensor & copy_(Tensor & self, const Tensor & src, bool non_blocking) const;
  Tensor & s_copy_(Tensor & self, const Tensor & src, bool non_blocking) const;
  Tensor _s_copy_from(const Tensor & self, const Tensor & dst, bool non_blocking) const;
  void _copy_same_type_(Tensor & self, const Tensor & src) const;
  Tensor cos(const Tensor & self) const;
  Tensor & cos_(Tensor & self) const;
  Tensor & cos_out(Tensor & out, const Tensor & self) const;
  Tensor cosh(const Tensor & self) const;
  Tensor & cosh_(Tensor & self) const;
  Tensor & cosh_out(Tensor & out, const Tensor & self) const;
  Tensor cosine_embedding_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) const;
  Tensor cudnn_affine_grid_generator(const Tensor & theta, int64_t N, int64_t C, int64_t H, int64_t W) const;
  Tensor cudnn_affine_grid_generator_backward(const Tensor & grad, int64_t N, int64_t C, int64_t H, int64_t W) const;
  std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon) const;
  std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon) const;
  Tensor cudnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const;
  Tensor cudnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const;
  std::tuple<Tensor,Tensor,Tensor> cudnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const;
  Tensor cudnn_convolution_backward_bias(const Tensor & grad_output) const;
  Tensor cudnn_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const;
  Tensor cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const;
  std::tuple<Tensor,Tensor,Tensor> cudnn_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const;
  Tensor cudnn_convolution_transpose_backward_bias(const Tensor & grad_output) const;
  Tensor cudnn_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const;
  Tensor cudnn_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const;
  Tensor cudnn_grid_sampler(const Tensor & self, const Tensor & grid) const;
  std::tuple<Tensor,Tensor> cudnn_grid_sampler_backward(const Tensor & self, const Tensor & grid, const Tensor & grad_output) const;
  Tensor cumsum(const Tensor & self, int64_t dim, ScalarType dtype) const;
  Tensor cumsum(const Tensor & self, int64_t dim) const;
  Tensor & cumsum_out(Tensor & out, const Tensor & self, int64_t dim, ScalarType dtype) const;
  Tensor & cumsum_out(Tensor & out, const Tensor & self, int64_t dim) const;
  Tensor cumprod(const Tensor & self, int64_t dim, ScalarType dtype) const;
  Tensor cumprod(const Tensor & self, int64_t dim) const;
  Tensor & cumprod_out(Tensor & out, const Tensor & self, int64_t dim, ScalarType dtype) const;
  Tensor & cumprod_out(Tensor & out, const Tensor & self, int64_t dim) const;
  Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) const;
  Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) const;
  std::tuple<Tensor,Tensor> _ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool zero_infinity) const;
  Tensor _ctc_loss_backward(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity) const;
  Tensor det(const Tensor & self) const;
  Tensor diag_embed(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) const;
  Tensor diagflat(const Tensor & self, int64_t offset) const;
  Tensor diagonal(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) const;
  Tensor div(const Tensor & self, const Tensor & other) const;
  Tensor & div_(Tensor & self, const Tensor & other) const;
  Tensor & div_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor div(const Tensor & self, Scalar other) const;
  Tensor & div_(Tensor & self, Scalar other) const;
  Tensor dot(const Tensor & self, const Tensor & tensor) const;
  Tensor & dot_out(Tensor & out, const Tensor & self, const Tensor & tensor) const;
  Tensor einsum(std::string equation, TensorList tensors) const;
  Tensor embedding(const Tensor & weight, const Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) const;
  Tensor embedding_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) const;
  Tensor embedding_dense_backward(const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) const;
  Tensor & embedding_renorm_(Tensor & self, const Tensor & indices, double max_norm, double norm_type) const;
  Tensor embedding_sparse_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) const;
  std::tuple<Tensor,Tensor,Tensor,Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) const;
  std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) const;
  Tensor _embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) const;
  Tensor _embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) const;
  Tensor _embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) const;
  Tensor _embedding_bag_per_sample_weights_backward(const Tensor & grad, const Tensor & weight, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, int64_t mode) const;
  Tensor empty(IntArrayRef size, const TensorOptions & options) const;
  Tensor _empty_affine_quantized(IntArrayRef size, const TensorOptions & options, double scale, int64_t zero_point) const;
  virtual Tensor & resize_(Tensor & self, IntArrayRef size) const;
  Tensor & empty_out(Tensor & out, IntArrayRef size) const;
  Tensor empty_like(const Tensor & self) const;
  Tensor empty_like(const Tensor & self, const TensorOptions & options) const;
  Tensor empty_strided(IntArrayRef size, IntArrayRef stride, const TensorOptions & options) const;
  Tensor erf(const Tensor & self) const;
  Tensor & erf_(Tensor & self) const;
  Tensor & erf_out(Tensor & out, const Tensor & self) const;
  Tensor erfc(const Tensor & self) const;
  Tensor & erfc_(Tensor & self) const;
  Tensor & erfc_out(Tensor & out, const Tensor & self) const;
  Tensor exp(const Tensor & self) const;
  Tensor & exp_(Tensor & self) const;
  Tensor & exp_out(Tensor & out, const Tensor & self) const;
  Tensor expm1(const Tensor & self) const;
  Tensor & expm1_(Tensor & self) const;
  Tensor & expm1_out(Tensor & out, const Tensor & self) const;
  Tensor expand(const Tensor & self, IntArrayRef size, bool implicit) const;
  Tensor expand_as(const Tensor & self, const Tensor & other) const;
  Tensor eye(int64_t n, const TensorOptions & options) const;
  Tensor eye(int64_t n, int64_t m, const TensorOptions & options) const;
  Tensor & eye_out(Tensor & out, int64_t n) const;
  Tensor & eye_out(Tensor & out, int64_t n, int64_t m) const;
  Tensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim) const;
  Tensor & fill_(Tensor & self, Scalar value) const;
  Tensor & fill_(Tensor & self, const Tensor & value) const;
  Tensor floor(const Tensor & self) const;
  Tensor & floor_(Tensor & self) const;
  Tensor & floor_out(Tensor & out, const Tensor & self) const;
  Tensor frac(const Tensor & self) const;
  Tensor & frac_(Tensor & self) const;
  Tensor & frac_out(Tensor & out, const Tensor & self) const;
  Tensor full(IntArrayRef size, Scalar fill_value, const TensorOptions & options) const;
  Tensor & full_out(Tensor & out, IntArrayRef size, Scalar fill_value) const;
  Tensor full_like(const Tensor & self, Scalar fill_value) const;
  Tensor full_like(const Tensor & self, Scalar fill_value, const TensorOptions & options) const;
  Tensor from_file(std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, const TensorOptions & options) const;
  Tensor grid_sampler(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const;
  Tensor grid_sampler_2d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const;
  std::tuple<Tensor,Tensor> grid_sampler_2d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const;
  Tensor grid_sampler_3d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const;
  std::tuple<Tensor,Tensor> grid_sampler_3d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const;
  Tensor hann_window(int64_t window_length, const TensorOptions & options) const;
  Tensor hann_window(int64_t window_length, bool periodic, const TensorOptions & options) const;
  Tensor hamming_window(int64_t window_length, const TensorOptions & options) const;
  Tensor hamming_window(int64_t window_length, bool periodic, const TensorOptions & options) const;
  Tensor hamming_window(int64_t window_length, bool periodic, double alpha, const TensorOptions & options) const;
  Tensor hamming_window(int64_t window_length, bool periodic, double alpha, double beta, const TensorOptions & options) const;
  Tensor hinge_embedding_loss(const Tensor & self, const Tensor & target, double margin, int64_t reduction) const;
  Tensor ger(const Tensor & self, const Tensor & vec2) const;
  Tensor & ger_out(Tensor & out, const Tensor & self, const Tensor & vec2) const;
  Tensor group_norm(const Tensor & input, int64_t num_groups, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enabled) const;
  Tensor fft(const Tensor & self, int64_t signal_ndim, bool normalized) const;
  Tensor ifft(const Tensor & self, int64_t signal_ndim, bool normalized) const;
  Tensor rfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided) const;
  Tensor irfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided, IntArrayRef signal_sizes) const;
  Tensor _fft_with_size(const Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, IntArrayRef checked_signal_sizes, bool normalized, bool onesided, IntArrayRef output_sizes) const;
  int64_t _cufft_get_plan_cache_size(int64_t device_index) const;
  int64_t _cufft_get_plan_cache_max_size(int64_t device_index) const;
  void _cufft_set_plan_cache_max_size(int64_t device_index, int64_t max_size) const;
  void _cufft_clear_plan_cache(int64_t device_index) const;
  Tensor index(const Tensor & self, TensorList indices) const;
  Tensor & index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const;
  Tensor index_copy(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const;
  Tensor & index_put_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate) const;
  Tensor index_put(const Tensor & self, TensorList indices, const Tensor & values, bool accumulate) const;
  Tensor instance_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) const;
  Tensor inverse(const Tensor & self) const;
  Tensor & inverse_out(Tensor & out, const Tensor & self) const;
  Tensor _inverse_helper(const Tensor & self) const;
  Tensor isclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) const;
  Tensor isnan(const Tensor & self) const;
  bool is_distributed(const Tensor & self) const;
  bool is_floating_point(const Tensor & self) const;
  bool is_complex(const Tensor & self) const;
  bool is_nonzero(const Tensor & self) const;
  bool is_same_size(const Tensor & self, const Tensor & other) const;
  bool is_signed(const Tensor & self) const;
  Tensor kl_div(const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor kl_div_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, int64_t dim, bool keepdim) const;
  std::tuple<Tensor &,Tensor &> kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool keepdim) const;
  Tensor layer_norm(const Tensor & input, IntArrayRef normalized_shape, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enable) const;
  Tensor linear(const Tensor & input, const Tensor & weight, const Tensor & bias) const;
  Tensor mkldnn_linear(const Tensor & input, const Tensor & weight, const Tensor & bias) const;
  Tensor fbgemm_linear_int8_weight(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) const;
  std::tuple<Tensor,Tensor,double,int64_t> fbgemm_linear_quantize_weight(const Tensor & input) const;
  Tensor fbgemm_pack_quantized_matrix(const Tensor & input, int64_t K, int64_t N) const;
  bool fbgemm_is_cpu_supported() const;
  Tensor linspace(Scalar start, Scalar end, int64_t steps, const TensorOptions & options) const;
  Tensor & linspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps) const;
  Tensor log(const Tensor & self) const;
  Tensor & log_(Tensor & self) const;
  Tensor & log_out(Tensor & out, const Tensor & self) const;
  Tensor log10(const Tensor & self) const;
  Tensor & log10_(Tensor & self) const;
  Tensor & log10_out(Tensor & out, const Tensor & self) const;
  Tensor log1p(const Tensor & self) const;
  Tensor & log1p_(Tensor & self) const;
  Tensor & log1p_out(Tensor & out, const Tensor & self) const;
  Tensor log2(const Tensor & self) const;
  Tensor & log2_(Tensor & self) const;
  Tensor & log2_out(Tensor & out, const Tensor & self) const;
  Tensor logdet(const Tensor & self) const;
  Tensor logspace(Scalar start, Scalar end, int64_t steps, double base, const TensorOptions & options) const;
  Tensor & logspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps, double base) const;
  Tensor log_softmax(const Tensor & self, int64_t dim, ScalarType dtype) const;
  Tensor log_softmax(const Tensor & self, int64_t dim) const;
  Tensor _log_softmax(const Tensor & self, int64_t dim, bool half_to_float) const;
  Tensor _log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) const;
  Tensor logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim) const;
  Tensor & logsumexp_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) const;
  Tensor margin_ranking_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) const;
  Tensor matmul(const Tensor & self, const Tensor & other) const;
  Tensor & matmul_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor matrix_rank(const Tensor & self, double tol, bool symmetric) const;
  Tensor matrix_rank(const Tensor & self, bool symmetric) const;
  Tensor matrix_power(const Tensor & self, int64_t n) const;
  std::tuple<Tensor,Tensor> max(const Tensor & self, int64_t dim, bool keepdim) const;
  std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim) const;
  Tensor max_values(const Tensor & self, IntArrayRef dim, bool keepdim) const;
  std::tuple<Tensor,Tensor> max_pool1d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const;
  Tensor max_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const;
  Tensor max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const;
  Tensor mkldnn_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const;
  Tensor max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const;
  Tensor mean(const Tensor & self, ScalarType dtype) const;
  Tensor mean(const Tensor & self) const;
  Tensor mean(const Tensor & self, IntArrayRef dim, bool keepdim, ScalarType dtype) const;
  Tensor mean(const Tensor & self, IntArrayRef dim, bool keepdim) const;
  Tensor mean(const Tensor & self, IntArrayRef dim, ScalarType dtype) const;
  Tensor & mean_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, ScalarType dtype) const;
  Tensor & mean_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) const;
  Tensor & mean_out(Tensor & out, const Tensor & self, IntArrayRef dim, ScalarType dtype) const;
  std::tuple<Tensor,Tensor> median(const Tensor & self, int64_t dim, bool keepdim) const;
  std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) const;
  std::tuple<Tensor,Tensor> min(const Tensor & self, int64_t dim, bool keepdim) const;
  std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) const;
  Tensor min_values(const Tensor & self, IntArrayRef dim, bool keepdim) const;
  Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) const;
  Tensor mkldnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) const;
  std::tuple<Tensor,Tensor> mkldnn_convolution_backward_weights(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) const;
  std::tuple<Tensor,Tensor,Tensor> mkldnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask) const;
  std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon) const;
  std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon) const;
  Tensor miopen_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const;
  Tensor miopen_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const;
  std::tuple<Tensor,Tensor,Tensor> miopen_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const;
  Tensor miopen_convolution_backward_bias(const Tensor & grad_output) const;
  Tensor miopen_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const;
  Tensor miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const;
  std::tuple<Tensor,Tensor,Tensor> miopen_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const;
  Tensor miopen_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const;
  Tensor miopen_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const;
  Tensor miopen_depthwise_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const;
  Tensor miopen_depthwise_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const;
  std::tuple<Tensor,Tensor,Tensor> miopen_depthwise_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const;
  Tensor miopen_depthwise_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) const;
  Tensor mm(const Tensor & self, const Tensor & mat2) const;
  Tensor & mm_out(Tensor & out, const Tensor & self, const Tensor & mat2) const;
  Tensor _sparse_mm(const Tensor & sparse, const Tensor & dense) const;
  std::tuple<Tensor,Tensor> mode(const Tensor & self, int64_t dim, bool keepdim) const;
  std::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) const;
  Tensor mul(const Tensor & self, const Tensor & other) const;
  Tensor & mul_(Tensor & self, const Tensor & other) const;
  Tensor & mul_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor mul(const Tensor & self, Scalar other) const;
  Tensor & mul_(Tensor & self, Scalar other) const;
  Tensor mv(const Tensor & self, const Tensor & vec) const;
  Tensor & mv_out(Tensor & out, const Tensor & self, const Tensor & vec) const;
  Tensor mvlgamma(const Tensor & self, int64_t p) const;
  Tensor & mvlgamma_(Tensor & self, int64_t p) const;
  Tensor narrow_copy(const Tensor & self, int64_t dim, int64_t start, int64_t length) const;
  Tensor narrow(const Tensor & self, int64_t dim, int64_t start, int64_t length) const;
  std::tuple<Tensor,Tensor,Tensor> native_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps) const;
  std::tuple<Tensor,Tensor> batch_norm_stats(const Tensor & input, double eps) const;
  Tensor batch_norm_elemt(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & mean, const Tensor & invstd, double eps) const;
  std::tuple<Tensor,Tensor> batch_norm_gather_stats(const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & running_mean, const Tensor & running_var, double momentum, double eps, int64_t count) const;
  std::tuple<Tensor,Tensor,Tensor> native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask) const;
  std::tuple<Tensor,Tensor,Tensor,Tensor> batch_norm_backward_reduce(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, bool input_g, bool weight_g, bool bias_g) const;
  Tensor batch_norm_backward_elemt(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu) const;
  std::tuple<Tensor,Tensor> batch_norm_update_stats(const Tensor & input, const Tensor & running_mean, const Tensor & running_var, double momentum) const;
  bool _nnpack_available() const;
  Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef padding) const;
  std::tuple<Tensor,Tensor,Tensor> _nnpack_spatial_convolution_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, std::array<bool,3> output_mask) const;
  Tensor _nnpack_spatial_convolution_backward_input(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding) const;
  Tensor _nnpack_spatial_convolution_backward_weight(const Tensor & input, IntArrayRef weightsize, const Tensor & grad_output, IntArrayRef padding) const;
  Tensor ones(IntArrayRef size, const TensorOptions & options) const;
  Tensor & ones_out(Tensor & out, IntArrayRef size) const;
  Tensor ones_like(const Tensor & self) const;
  Tensor ones_like(const Tensor & self, const TensorOptions & options) const;
  Tensor pairwise_distance(const Tensor & x1, const Tensor & x2, double p, double eps, bool keepdim) const;
  Tensor cdist(const Tensor & x1, const Tensor & x2, double p) const;
  Tensor _cdist_backward(const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist) const;
  Tensor pdist(const Tensor & self, double p) const;
  Tensor _pdist_forward(const Tensor & self, double p) const;
  Tensor _pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist) const;
  Tensor cosine_similarity(const Tensor & x1, const Tensor & x2, int64_t dim, double eps) const;
  Tensor permute(const Tensor & self, IntArrayRef dims) const;
  Tensor pixel_shuffle(const Tensor & self, int64_t upscale_factor) const;
  Tensor pin_memory(const Tensor & self) const;
  Tensor pinverse(const Tensor & self, double rcond) const;
  Tensor scalar_tensor(Scalar s, const TensorOptions & options) const;
  Tensor rand(IntArrayRef size, const TensorOptions & options) const;
  Tensor rand(IntArrayRef size, Generator * generator, const TensorOptions & options) const;
  Tensor & rand_out(Tensor & out, IntArrayRef size) const;
  Tensor & rand_out(Tensor & out, IntArrayRef size, Generator * generator) const;
  Tensor rand_like(const Tensor & self) const;
  Tensor rand_like(const Tensor & self, const TensorOptions & options) const;
  Tensor randint(int64_t high, IntArrayRef size, const TensorOptions & options) const;
  Tensor randint(int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options) const;
  Tensor randint(int64_t low, int64_t high, IntArrayRef size, const TensorOptions & options) const;
  Tensor randint(int64_t low, int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options) const;
  Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size) const;
  Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size, Generator * generator) const;
  Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size) const;
  Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size, Generator * generator) const;
  Tensor randint_like(const Tensor & self, int64_t high) const;
  Tensor randint_like(const Tensor & self, int64_t low, int64_t high) const;
  Tensor randint_like(const Tensor & self, int64_t high, const TensorOptions & options) const;
  Tensor randint_like(const Tensor & self, int64_t low, int64_t high, const TensorOptions & options) const;
  Tensor randn(IntArrayRef size, const TensorOptions & options) const;
  Tensor randn(IntArrayRef size, Generator * generator, const TensorOptions & options) const;
  Tensor & randn_out(Tensor & out, IntArrayRef size) const;
  Tensor & randn_out(Tensor & out, IntArrayRef size, Generator * generator) const;
  Tensor randn_like(const Tensor & self) const;
  Tensor randn_like(const Tensor & self, const TensorOptions & options) const;
  Tensor randperm(int64_t n, const TensorOptions & options) const;
  Tensor randperm(int64_t n, Generator * generator, const TensorOptions & options) const;
  Tensor & randperm_out(Tensor & out, int64_t n) const;
  Tensor & randperm_out(Tensor & out, int64_t n, Generator * generator) const;
  Tensor range(Scalar start, Scalar end, Scalar step, const TensorOptions & options) const;
  Tensor range(Scalar start, Scalar end, const TensorOptions & options) const;
  Tensor & range_out(Tensor & out, Scalar start, Scalar end, Scalar step) const;
  Tensor reciprocal(const Tensor & self) const;
  Tensor & reciprocal_(Tensor & self) const;
  Tensor & reciprocal_out(Tensor & out, const Tensor & self) const;
  Tensor neg(const Tensor & self) const;
  Tensor & neg_(Tensor & self) const;
  Tensor & neg_out(Tensor & out, const Tensor & self) const;
  Tensor repeat(const Tensor & self, IntArrayRef repeats) const;
  Tensor repeat_interleave(const Tensor & repeats) const;
  Tensor repeat_interleave(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim) const;
  Tensor repeat_interleave(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim) const;
  Tensor reshape(const Tensor & self, IntArrayRef shape) const;
  Tensor mkldnn_reshape(const Tensor & self, IntArrayRef shape) const;
  Tensor reshape_as(const Tensor & self, const Tensor & other) const;
  Tensor round(const Tensor & self) const;
  Tensor & round_(Tensor & self) const;
  Tensor & round_out(Tensor & out, const Tensor & self) const;
  Tensor rrelu(const Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator) const;
  Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator) const;
  Tensor relu(const Tensor & self) const;
  Tensor & relu_(Tensor & self) const;
  Tensor prelu(const Tensor & self, const Tensor & weight) const;
  std::tuple<Tensor,Tensor> prelu_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight) const;
  Tensor hardshrink(const Tensor & self, Scalar lambd) const;
  Tensor hardshrink_backward(const Tensor & grad_out, const Tensor & self, Scalar lambd) const;
  Tensor rsqrt(const Tensor & self) const;
  Tensor & rsqrt_(Tensor & self) const;
  Tensor & rsqrt_out(Tensor & out, const Tensor & self) const;
  Tensor select(const Tensor & self, int64_t dim, int64_t index) const;
  Tensor selu(const Tensor & self) const;
  Tensor & selu_(Tensor & self) const;
  Tensor celu(const Tensor & self, Scalar alpha) const;
  Tensor & celu_(Tensor & self, Scalar alpha) const;
  Tensor sigmoid(const Tensor & self) const;
  Tensor & sigmoid_(Tensor & self) const;
  Tensor & sigmoid_out(Tensor & out, const Tensor & self) const;
  Tensor sin(const Tensor & self) const;
  Tensor & sin_(Tensor & self) const;
  Tensor & sin_out(Tensor & out, const Tensor & self) const;
  Tensor sinh(const Tensor & self) const;
  Tensor & sinh_(Tensor & self) const;
  Tensor & sinh_out(Tensor & out, const Tensor & self) const;
  virtual Tensor detach(const Tensor & self) const;
  virtual Tensor & detach_(Tensor & self) const;
  int64_t size(const Tensor & self, int64_t dim) const;
  Tensor slice(const Tensor & self, int64_t dim, int64_t start, int64_t end, int64_t step) const;
  std::tuple<Tensor,Tensor> slogdet(const Tensor & self) const;
  Tensor smm(const Tensor & self, const Tensor & mat2) const;
  Tensor softmax(const Tensor & self, int64_t dim, ScalarType dtype) const;
  Tensor softmax(const Tensor & self, int64_t dim) const;
  Tensor _softmax(const Tensor & self, int64_t dim, bool half_to_float) const;
  Tensor _softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) const;
  Tensor & _sparse_add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) const;
  Tensor & _sparse_dense_add_out(Tensor & out, const Tensor & self, SparseTensorRef other, Scalar alpha) const;
  Tensor & _sparse_div_zerodim_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor & _sparse_div_scalar_out(Tensor & out, const Tensor & self, Scalar other) const;
  Tensor & _sparse_mul_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor & _sparse_mul_zerodim_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor & _sparse_mul_scalar_out(Tensor & out, const Tensor & self, Scalar other) const;
  std::vector<Tensor> split(const Tensor & self, int64_t split_size, int64_t dim) const;
  std::vector<Tensor> split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim) const;
  Tensor squeeze(const Tensor & self) const;
  Tensor squeeze(const Tensor & self, int64_t dim) const;
  Tensor & squeeze_(Tensor & self) const;
  Tensor & squeeze_(Tensor & self, int64_t dim) const;
  Tensor sspaddmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const;
  Tensor & sspaddmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const;
  Tensor stack(TensorList tensors, int64_t dim) const;
  Tensor & stack_out(Tensor & out, TensorList tensors, int64_t dim) const;
  Tensor stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const Tensor & window, bool normalized, bool onesided) const;
  int64_t stride(const Tensor & self, int64_t dim) const;
  Tensor sum(const Tensor & self, ScalarType dtype) const;
  Tensor sum(const Tensor & self) const;
  Tensor sum(const Tensor & self, IntArrayRef dim, bool keepdim, ScalarType dtype) const;
  Tensor sum(const Tensor & self, IntArrayRef dim, bool keepdim) const;
  Tensor sum(const Tensor & self, IntArrayRef dim, ScalarType dtype) const;
  Tensor & sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, ScalarType dtype) const;
  Tensor & sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) const;
  Tensor & sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, ScalarType dtype) const;
  Tensor sum_to_size(const Tensor & self, IntArrayRef size) const;
  Tensor sqrt(const Tensor & self) const;
  Tensor & sqrt_(Tensor & self) const;
  Tensor & sqrt_out(Tensor & out, const Tensor & self) const;
  Tensor std(const Tensor & self, bool unbiased) const;
  Tensor std(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) const;
  Tensor & std_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) const;
  Tensor prod(const Tensor & self, ScalarType dtype) const;
  Tensor prod(const Tensor & self) const;
  Tensor prod(const Tensor & self, int64_t dim, bool keepdim, ScalarType dtype) const;
  Tensor prod(const Tensor & self, int64_t dim, bool keepdim) const;
  Tensor prod(const Tensor & self, int64_t dim, ScalarType dtype) const;
  Tensor & prod_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim, ScalarType dtype) const;
  Tensor & prod_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) const;
  Tensor & prod_out(Tensor & out, const Tensor & self, int64_t dim, ScalarType dtype) const;
  Tensor t(const Tensor & self) const;
  Tensor & t_(Tensor & self) const;
  Tensor tan(const Tensor & self) const;
  Tensor & tan_(Tensor & self) const;
  Tensor & tan_out(Tensor & out, const Tensor & self) const;
  Tensor tanh(const Tensor & self) const;
  Tensor & tanh_(Tensor & self) const;
  Tensor & tanh_out(Tensor & out, const Tensor & self) const;
  Tensor tensordot(const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other) const;
  Tensor threshold(const Tensor & self, Scalar threshold, Scalar value) const;
  Tensor & threshold_(Tensor & self, Scalar threshold, Scalar value) const;
  Tensor & threshold_out(Tensor & out, const Tensor & self, Scalar threshold, Scalar value) const;
  Tensor threshold_backward(const Tensor & grad_output, const Tensor & self, Scalar threshold) const;
  Tensor transpose(const Tensor & self, int64_t dim0, int64_t dim1) const;
  Tensor & transpose_(Tensor & self, int64_t dim0, int64_t dim1) const;
  Tensor one_hot(const Tensor & self, int64_t num_classes) const;
  Tensor flip(const Tensor & self, IntArrayRef dims) const;
  Tensor roll(const Tensor & self, IntArrayRef shifts, IntArrayRef dims) const;
  Tensor rot90(const Tensor & self, int64_t k, IntArrayRef dims) const;
  Tensor _trilinear(const Tensor & i1, const Tensor & i2, const Tensor & i3, IntArrayRef expand1, IntArrayRef expand2, IntArrayRef expand3, IntArrayRef sumdim, int64_t unroll_dim) const;
  Tensor triplet_margin_loss(const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction) const;
  Tensor trunc(const Tensor & self) const;
  Tensor & trunc_(Tensor & self) const;
  Tensor & trunc_out(Tensor & out, const Tensor & self) const;
  Tensor type_as(const Tensor & self, const Tensor & other) const;
  std::tuple<Tensor,Tensor> _unique(const Tensor & self, bool sorted, bool return_inverse) const;
  std::tuple<Tensor,Tensor,Tensor> unique_dim(const Tensor & self, int64_t dim, bool sorted, bool return_inverse, bool return_counts) const;
  std::tuple<Tensor,Tensor,Tensor> unique_consecutive(const Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) const;
  std::tuple<Tensor,Tensor,Tensor> unique_dim_consecutive(const Tensor & self, int64_t dim, bool return_inverse, bool return_counts) const;
  std::tuple<Tensor,Tensor,Tensor> _unique2(const Tensor & self, bool sorted, bool return_inverse, bool return_counts) const;
  Tensor _unsafe_view(const Tensor & self, IntArrayRef size) const;
  Tensor unsqueeze(const Tensor & self, int64_t dim) const;
  Tensor & unsqueeze_(Tensor & self, int64_t dim) const;
  Tensor var(const Tensor & self, bool unbiased) const;
  Tensor var(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) const;
  Tensor & var_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) const;
  Tensor view_as(const Tensor & self, const Tensor & other) const;
  Tensor where(const Tensor & condition, const Tensor & self, const Tensor & other) const;
  Tensor _s_where(const Tensor & condition, const Tensor & self, const Tensor & other) const;
  Tensor norm_except_dim(const Tensor & v, int64_t pow, int64_t dim) const;
  Tensor _weight_norm(const Tensor & v, const Tensor & g, int64_t dim) const;
  std::tuple<Tensor,Tensor> _weight_norm_cuda_interface(const Tensor & v, const Tensor & g, int64_t dim) const;
  std::tuple<Tensor,Tensor> _weight_norm_cuda_interface_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) const;
  std::tuple<Tensor,Tensor> _weight_norm_differentiable_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) const;
  Tensor zeros(IntArrayRef size, const TensorOptions & options) const;
  Tensor & zeros_out(Tensor & out, IntArrayRef size) const;
  Tensor zeros_like(const Tensor & self) const;
  Tensor zeros_like(const Tensor & self, const TensorOptions & options) const;
  Tensor _standard_gamma_grad(const Tensor & self, const Tensor & output) const;
  Tensor _standard_gamma(const Tensor & self, Generator * generator) const;
  Tensor _sample_dirichlet(const Tensor & self, Generator * generator) const;
  Tensor poisson(const Tensor & self, Generator * generator) const;
  Tensor native_norm(const Tensor & self, Scalar p) const;
  Tensor _sparse_sum(const Tensor & self) const;
  Tensor _sparse_sum(const Tensor & self, ScalarType dtype) const;
  Tensor _sparse_sum(const Tensor & self, IntArrayRef dim) const;
  Tensor _sparse_sum(const Tensor & self, IntArrayRef dim, ScalarType dtype) const;
  Tensor _sparse_sum_backward(const Tensor & grad, const Tensor & self, IntArrayRef dim) const;
  Tensor norm(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype) const;
  Tensor norm(const Tensor & self, Scalar p) const;
  Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) const;
  Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) const;
  Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) const;
  Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) const;
  Tensor frobenius_norm(const Tensor & self) const;
  Tensor frobenius_norm(const Tensor & self, IntArrayRef dim, bool keepdim) const;
  Tensor & frobenius_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) const;
  Tensor nuclear_norm(const Tensor & self, bool keepdim) const;
  Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, bool keepdim) const;
  Tensor clone(const Tensor & self) const;
  virtual Tensor & resize_as_(Tensor & self, const Tensor & the_template) const;
  Tensor & pow_out(Tensor & out, const Tensor & self, Scalar exponent) const;
  Tensor pow(const Tensor & self, Scalar exponent) const;
  Tensor & zero_(Tensor & self) const;
  Tensor & sub_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) const;
  Tensor sub(const Tensor & self, const Tensor & other, Scalar alpha) const;
  Tensor & sub_(Tensor & self, const Tensor & other, Scalar alpha) const;
  Tensor sub(const Tensor & self, Scalar other, Scalar alpha) const;
  Tensor & sub_(Tensor & self, Scalar other, Scalar alpha) const;
  Tensor rsub(const Tensor & self, const Tensor & other, Scalar alpha) const;
  Tensor rsub(const Tensor & self, Scalar other, Scalar alpha) const;
  Tensor & s_native_addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const;
  Tensor s_native_addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const;
  Tensor & s_native_addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const;
  Tensor _sparse_addmm(const Tensor & self, const Tensor & sparse, const Tensor & dense, Scalar beta, Scalar alpha) const;
  Tensor & addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const;
  Tensor addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const;
  Tensor & addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) const;
  Tensor sparse_coo_tensor(IntArrayRef size, const TensorOptions & options) const;
  Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, const TensorOptions & options) const;
  Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) const;
  Tensor _sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) const;
  Tensor _sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const TensorOptions & options) const;
  Tensor _sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, const TensorOptions & options) const;
  Tensor & sparse_resize_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) const;
  Tensor & sparse_resize_and_clear_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) const;
  Tensor sparse_mask(const Tensor & self, SparseTensorRef mask) const;
  Tensor to_dense(const Tensor & self) const;
  Tensor to_dense_backward(const Tensor & grad, const Tensor & input) const;
  int64_t sparse_dim(const Tensor & self) const;
  int64_t _dimI(const Tensor & self) const;
  int64_t dense_dim(const Tensor & self) const;
  int64_t _dimV(const Tensor & self) const;
  int64_t _nnz(const Tensor & self) const;
  Tensor coalesce(const Tensor & self) const;
  bool is_coalesced(const Tensor & self) const;
  Tensor _indices(const Tensor & self) const;
  Tensor _values(const Tensor & self) const;
  Tensor & _coalesced_(Tensor & self, bool coalesced) const;
  Tensor indices(const Tensor & self) const;
  Tensor values(const Tensor & self) const;
  Tensor & hspmm_out(Tensor & out, const Tensor & mat1, const Tensor & mat2) const;
  Tensor hspmm(const Tensor & mat1, const Tensor & mat2) const;
  Tensor & copy_sparse_to_sparse_(Tensor & self, const Tensor & src, bool non_blocking) const;
  int64_t numel(const Tensor & self) const;
  std::vector<Tensor> unbind(const Tensor & self, int64_t dim) const;
  Tensor to_sparse(const Tensor & self, int64_t sparse_dim) const;
  Tensor to_sparse(const Tensor & self) const;
  Tensor to_mkldnn(const Tensor & self) const;
  Tensor mkldnn_reorder_conv2d_weight(const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) const;
  Tensor to_mkldnn_backward(const Tensor & grad, const Tensor & input) const;
  Tensor quantize_linear(const Tensor & self, double scale, int64_t zero_point) const;
  Tensor dequantize(const Tensor & self) const;
  Scalar q_scale(const Tensor & self) const;
  Scalar q_zero_point(const Tensor & self) const;
  Tensor int_repr(const Tensor & self) const;
  Tensor to(const Tensor & self, const TensorOptions & options, bool non_blocking, bool copy) const;
  Tensor to(const Tensor & self, Device device, ScalarType dtype, bool non_blocking, bool copy) const;
  Tensor to(const Tensor & self, ScalarType dtype, bool non_blocking, bool copy) const;
  Tensor to(const Tensor & self, const Tensor & other, bool non_blocking, bool copy) const;
  std::vector<Tensor> meshgrid(TensorList tensors) const;
  Tensor cartesian_prod(TensorList tensors) const;
  Tensor combinations(const Tensor & self, int64_t r, bool with_replacement) const;
  Scalar item(const Tensor & self) const;
  Scalar _local_scalar_dense(const Tensor & self) const;
  std::tuple<Tensor,Tensor,Tensor> _thnn_fused_lstm_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const Tensor & input_bias, const Tensor & hidden_bias) const;
  std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias) const;
  std::tuple<Tensor,Tensor> _thnn_fused_gru_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias) const;
  std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_gru_cell_backward(const Tensor & grad_hy, const Tensor & workspace, bool has_bias) const;
  std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const;
  std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) const;
  std::tuple<Tensor,Tensor> gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const;
  std::tuple<Tensor,Tensor> gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) const;
  std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const;
  std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) const;
  std::tuple<Tensor,Tensor> rnn_relu(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const;
  std::tuple<Tensor,Tensor> rnn_relu(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) const;
  std::tuple<Tensor,Tensor> lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) const;
  Tensor gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) const;
  Tensor rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) const;
  Tensor rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) const;
  std::tuple<Tensor,Tensor,Tensor> quantized_lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const;
  std::tuple<Tensor,Tensor> quantized_lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) const;
  Tensor quantized_gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) const;
  Tensor quantized_rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) const;
  Tensor quantized_rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) const;
  std::tuple<Tensor,Tensor> _pack_padded_sequence(const Tensor & input, const Tensor & lengths, bool batch_first) const;
  Tensor _pack_padded_sequence_backward(const Tensor & grad, IntArrayRef input_size, const Tensor & batch_sizes, bool batch_first) const;
  std::tuple<Tensor,Tensor> _pad_packed_sequence(const Tensor & data, const Tensor & batch_sizes, bool batch_first, Scalar padding_value, int64_t total_length) const;
  void* data_ptr(const Tensor & self) const;
  Tensor & set_(Tensor & self, Storage source) const;
  Tensor & set_(Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride) const;
  Tensor & set_(Tensor & self, const Tensor & source) const;
  Tensor & set_(Tensor & self) const;
  bool is_set_to(const Tensor & self, const Tensor & tensor) const;
  Tensor & masked_fill_(Tensor & self, const Tensor & mask, Scalar value) const;
  Tensor masked_fill(const Tensor & self, const Tensor & mask, Scalar value) const;
  Tensor & masked_fill_(Tensor & self, const Tensor & mask, const Tensor & value) const;
  Tensor masked_fill(const Tensor & self, const Tensor & mask, const Tensor & value) const;
  Tensor & masked_scatter_(Tensor & self, const Tensor & mask, const Tensor & source) const;
  Tensor masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source) const;
  Tensor view(const Tensor & self, IntArrayRef size) const;
  Tensor & put_(Tensor & self, const Tensor & index, const Tensor & source, bool accumulate) const;
  Tensor & index_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const;
  Tensor index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) const;
  Tensor & index_fill_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) const;
  Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) const;
  Tensor & index_fill_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) const;
  Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) const;
  Tensor & scatter_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const;
  Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const;
  Tensor & scatter_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) const;
  Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) const;
  Tensor & scatter_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const;
  Tensor scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) const;
  Tensor & lt_(Tensor & self, Scalar other) const;
  Tensor & lt_(Tensor & self, const Tensor & other) const;
  Tensor & gt_(Tensor & self, Scalar other) const;
  Tensor & gt_(Tensor & self, const Tensor & other) const;
  Tensor & le_(Tensor & self, Scalar other) const;
  Tensor & le_(Tensor & self, const Tensor & other) const;
  Tensor & ge_(Tensor & self, Scalar other) const;
  Tensor & ge_(Tensor & self, const Tensor & other) const;
  Tensor & eq_(Tensor & self, Scalar other) const;
  Tensor & eq_(Tensor & self, const Tensor & other) const;
  Tensor & ne_(Tensor & self, Scalar other) const;
  Tensor & ne_(Tensor & self, const Tensor & other) const;
  Tensor __and__(const Tensor & self, Scalar other) const;
  Tensor __and__(const Tensor & self, const Tensor & other) const;
  Tensor & __iand__(Tensor & self, Scalar other) const;
  Tensor & __iand__(Tensor & self, const Tensor & other) const;
  Tensor __or__(const Tensor & self, Scalar other) const;
  Tensor __or__(const Tensor & self, const Tensor & other) const;
  Tensor & __ior__(Tensor & self, Scalar other) const;
  Tensor & __ior__(Tensor & self, const Tensor & other) const;
  Tensor __xor__(const Tensor & self, Scalar other) const;
  Tensor __xor__(const Tensor & self, const Tensor & other) const;
  Tensor & __ixor__(Tensor & self, Scalar other) const;
  Tensor & __ixor__(Tensor & self, const Tensor & other) const;
  Tensor __lshift__(const Tensor & self, Scalar other) const;
  Tensor __lshift__(const Tensor & self, const Tensor & other) const;
  Tensor & __ilshift__(Tensor & self, Scalar other) const;
  Tensor & __ilshift__(Tensor & self, const Tensor & other) const;
  Tensor __rshift__(const Tensor & self, Scalar other) const;
  Tensor __rshift__(const Tensor & self, const Tensor & other) const;
  Tensor & __irshift__(Tensor & self, Scalar other) const;
  Tensor & __irshift__(Tensor & self, const Tensor & other) const;
  Tensor & lgamma_(Tensor & self) const;
  Tensor & atan2_(Tensor & self, const Tensor & other) const;
  Tensor & tril_(Tensor & self, int64_t diagonal) const;
  Tensor & triu_(Tensor & self, int64_t diagonal) const;
  Tensor & digamma_(Tensor & self) const;
  Tensor & polygamma_(Tensor & self, int64_t n) const;
  Tensor & erfinv_(Tensor & self) const;
  Tensor & renorm_(Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const;
  Tensor & pow_(Tensor & self, Scalar exponent) const;
  Tensor & pow_(Tensor & self, const Tensor & exponent) const;
  Tensor & lerp_(Tensor & self, const Tensor & end, Scalar weight) const;
  Tensor & lerp_(Tensor & self, const Tensor & end, const Tensor & weight) const;
  Tensor & sign_(Tensor & self) const;
  Tensor & fmod_(Tensor & self, Scalar other) const;
  Tensor & fmod_(Tensor & self, const Tensor & other) const;
  Tensor & remainder_(Tensor & self, Scalar other) const;
  Tensor & remainder_(Tensor & self, const Tensor & other) const;
  Tensor & addbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const;
  Tensor & addbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const;
  Tensor addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) const;
  Tensor & addcmul_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  Tensor & addcdiv_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  Tensor & random_(Tensor & self, int64_t from, int64_t to, Generator * generator) const;
  Tensor & random_(Tensor & self, int64_t to, Generator * generator) const;
  Tensor & random_(Tensor & self, Generator * generator) const;
  Tensor & uniform_(Tensor & self, double from, double to, Generator * generator) const;
  Tensor & normal_(Tensor & self, double mean, double std, Generator * generator) const;
  Tensor & cauchy_(Tensor & self, double median, double sigma, Generator * generator) const;
  Tensor & log_normal_(Tensor & self, double mean, double std, Generator * generator) const;
  Tensor & exponential_(Tensor & self, double lambd, Generator * generator) const;
  Tensor & geometric_(Tensor & self, double p, Generator * generator) const;
  Tensor & diag_out(Tensor & out, const Tensor & self, int64_t diagonal) const;
  Tensor diag(const Tensor & self, int64_t diagonal) const;
  Tensor & cross_out(Tensor & out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) const;
  Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) const;
  Tensor & triu_out(Tensor & out, const Tensor & self, int64_t diagonal) const;
  Tensor triu(const Tensor & self, int64_t diagonal) const;
  Tensor & tril_out(Tensor & out, const Tensor & self, int64_t diagonal) const;
  Tensor tril(const Tensor & self, int64_t diagonal) const;
  Tensor tril_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) const;
  Tensor triu_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) const;
  Tensor trace(const Tensor & self) const;
  Tensor & ne_out(Tensor & out, const Tensor & self, Scalar other) const;
  Tensor ne(const Tensor & self, Scalar other) const;
  Tensor & ne_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor ne(const Tensor & self, const Tensor & other) const;
  Tensor & eq_out(Tensor & out, const Tensor & self, Scalar other) const;
  Tensor eq(const Tensor & self, Scalar other) const;
  Tensor & eq_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor eq(const Tensor & self, const Tensor & other) const;
  Tensor & ge_out(Tensor & out, const Tensor & self, Scalar other) const;
  Tensor ge(const Tensor & self, Scalar other) const;
  Tensor & ge_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor ge(const Tensor & self, const Tensor & other) const;
  Tensor & le_out(Tensor & out, const Tensor & self, Scalar other) const;
  Tensor le(const Tensor & self, Scalar other) const;
  Tensor & le_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor le(const Tensor & self, const Tensor & other) const;
  Tensor & gt_out(Tensor & out, const Tensor & self, Scalar other) const;
  Tensor gt(const Tensor & self, Scalar other) const;
  Tensor & gt_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor gt(const Tensor & self, const Tensor & other) const;
  Tensor & lt_out(Tensor & out, const Tensor & self, Scalar other) const;
  Tensor lt(const Tensor & self, Scalar other) const;
  Tensor & lt_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor lt(const Tensor & self, const Tensor & other) const;
  Tensor & take_out(Tensor & out, const Tensor & self, const Tensor & index) const;
  Tensor take(const Tensor & self, const Tensor & index) const;
  Tensor & index_select_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index) const;
  Tensor index_select(const Tensor & self, int64_t dim, const Tensor & index) const;
  Tensor & masked_select_out(Tensor & out, const Tensor & self, const Tensor & mask) const;
  Tensor masked_select(const Tensor & self, const Tensor & mask) const;
  Tensor & nonzero_out(Tensor & out, const Tensor & self) const;
  Tensor nonzero(const Tensor & self) const;
  Tensor & gather_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) const;
  Tensor gather(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) const;
  Tensor _gather_sparse_backward(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & grad) const;
  Tensor & addcmul_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  Tensor addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  Tensor & addcdiv_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  Tensor addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) const;
  std::tuple<Tensor &,Tensor &> gels_out(Tensor & X, Tensor & qr, const Tensor & self, const Tensor & A) const;
  std::tuple<Tensor,Tensor> gels(const Tensor & self, const Tensor & A) const;
  std::tuple<Tensor &,Tensor &> triangular_solve_out(Tensor & X, Tensor & M, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) const;
  std::tuple<Tensor,Tensor> triangular_solve(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) const;
  std::tuple<Tensor,Tensor> _triangular_solve_helper(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) const;
  std::tuple<Tensor &,Tensor &> symeig_out(Tensor & e, Tensor & V, const Tensor & self, bool eigenvectors, bool upper) const;
  std::tuple<Tensor,Tensor> symeig(const Tensor & self, bool eigenvectors, bool upper) const;
  std::tuple<Tensor &,Tensor &> eig_out(Tensor & e, Tensor & v, const Tensor & self, bool eigenvectors) const;
  std::tuple<Tensor,Tensor> eig(const Tensor & self, bool eigenvectors) const;
  std::tuple<Tensor &,Tensor &,Tensor &> svd_out(Tensor & U, Tensor & S, Tensor & V, const Tensor & self, bool some, bool compute_uv) const;
  std::tuple<Tensor,Tensor,Tensor> svd(const Tensor & self, bool some, bool compute_uv) const;
  Tensor & cholesky_out(Tensor & out, const Tensor & self, bool upper) const;
  Tensor cholesky(const Tensor & self, bool upper) const;
  Tensor _cholesky_helper(const Tensor & self, bool upper) const;
  Tensor & cholesky_solve_out(Tensor & out, const Tensor & self, const Tensor & input2, bool upper) const;
  Tensor cholesky_solve(const Tensor & self, const Tensor & input2, bool upper) const;
  Tensor _cholesky_solve_helper(const Tensor & self, const Tensor & A, bool upper) const;
  std::tuple<Tensor,Tensor> solve(const Tensor & self, const Tensor & A) const;
  std::tuple<Tensor &,Tensor &> solve_out(Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A) const;
  std::tuple<Tensor,Tensor> _solve_helper(const Tensor & self, const Tensor & A) const;
  Tensor & cholesky_inverse_out(Tensor & out, const Tensor & self, bool upper) const;
  Tensor cholesky_inverse(const Tensor & self, bool upper) const;
  std::tuple<Tensor &,Tensor &> pstrf_out(Tensor & u, Tensor & pivot, const Tensor & self, bool upper, Scalar tol) const;
  std::tuple<Tensor,Tensor> pstrf(const Tensor & self, bool upper, Scalar tol) const;
  std::tuple<Tensor &,Tensor &> qr_out(Tensor & Q, Tensor & R, const Tensor & self) const;
  std::tuple<Tensor,Tensor> qr(const Tensor & self) const;
  std::tuple<Tensor &,Tensor &> geqrf_out(Tensor & a, Tensor & tau, const Tensor & self) const;
  std::tuple<Tensor,Tensor> geqrf(const Tensor & self) const;
  Tensor & orgqr_out(Tensor & out, const Tensor & self, const Tensor & input2) const;
  Tensor orgqr(const Tensor & self, const Tensor & input2) const;
  Tensor & ormqr_out(Tensor & out, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) const;
  Tensor ormqr(const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) const;
  std::tuple<Tensor,Tensor,Tensor> _lu_with_info(const Tensor & self, bool pivot, bool check_errors) const;
  Tensor & lu_solve_out(Tensor & out, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) const;
  Tensor lu_solve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) const;
  Tensor & multinomial_out(Tensor & out, const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) const;
  Tensor multinomial(const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) const;
  std::tuple<Tensor,Tensor> _multinomial_alias_setup(const Tensor & probs) const;
  Tensor _multinomial_alias_draw(const Tensor & J, const Tensor & q, int64_t num_samples, Generator * generator) const;
  Tensor & lgamma_out(Tensor & out, const Tensor & self) const;
  Tensor lgamma(const Tensor & self) const;
  Tensor & digamma_out(Tensor & out, const Tensor & self) const;
  Tensor digamma(const Tensor & self) const;
  Tensor & polygamma_out(Tensor & out, int64_t n, const Tensor & self) const;
  Tensor polygamma(int64_t n, const Tensor & self) const;
  Tensor & erfinv_out(Tensor & out, const Tensor & self) const;
  Tensor erfinv(const Tensor & self) const;
  Tensor dist(const Tensor & self, const Tensor & other, Scalar p) const;
  Tensor & atan2_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor atan2(const Tensor & self, const Tensor & other) const;
  Tensor & lerp_out(Tensor & out, const Tensor & self, const Tensor & end, Scalar weight) const;
  Tensor & lerp_out(Tensor & out, const Tensor & self, const Tensor & end, const Tensor & weight) const;
  Tensor lerp(const Tensor & self, const Tensor & end, Scalar weight) const;
  Tensor lerp(const Tensor & self, const Tensor & end, const Tensor & weight) const;
  Tensor & histc_out(Tensor & out, const Tensor & self, int64_t bins, Scalar min, Scalar max) const;
  Tensor histc(const Tensor & self, int64_t bins, Scalar min, Scalar max) const;
  Tensor & sign_out(Tensor & out, const Tensor & self) const;
  Tensor sign(const Tensor & self) const;
  Tensor & fmod_out(Tensor & out, const Tensor & self, Scalar other) const;
  Tensor fmod(const Tensor & self, Scalar other) const;
  Tensor & fmod_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor fmod(const Tensor & self, const Tensor & other) const;
  Tensor & remainder_out(Tensor & out, const Tensor & self, Scalar other) const;
  Tensor remainder(const Tensor & self, Scalar other) const;
  Tensor & remainder_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor remainder(const Tensor & self, const Tensor & other) const;
  Tensor & min_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor min(const Tensor & self, const Tensor & other) const;
  Tensor min(const Tensor & self) const;
  Tensor & max_out(Tensor & out, const Tensor & self, const Tensor & other) const;
  Tensor max(const Tensor & self, const Tensor & other) const;
  Tensor max(const Tensor & self) const;
  Tensor median(const Tensor & self) const;
  std::tuple<Tensor &,Tensor &> sort_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool descending) const;
  std::tuple<Tensor,Tensor> sort(const Tensor & self, int64_t dim, bool descending) const;
  Tensor argsort(const Tensor & self, int64_t dim, bool descending) const;
  std::tuple<Tensor &,Tensor &> topk_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) const;
  std::tuple<Tensor,Tensor> topk(const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) const;
  Tensor all(const Tensor & self) const;
  Tensor any(const Tensor & self) const;
  Tensor & renorm_out(Tensor & out, const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const;
  Tensor renorm(const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) const;
  Tensor unfold(const Tensor & self, int64_t dimension, int64_t size, int64_t step) const;
  bool equal(const Tensor & self, const Tensor & other) const;
  Tensor & pow_out(Tensor & out, const Tensor & self, const Tensor & exponent) const;
  Tensor pow(const Tensor & self, const Tensor & exponent) const;
  Tensor & pow_out(Tensor & out, Scalar self, const Tensor & exponent) const;
  Tensor pow(Scalar self, const Tensor & exponent) const;
  Tensor & normal_out(Tensor & out, const Tensor & mean, double std, Generator * generator) const;
  Tensor normal(const Tensor & mean, double std, Generator * generator) const;
  Tensor & normal_out(Tensor & out, double mean, const Tensor & std, Generator * generator) const;
  Tensor normal(double mean, const Tensor & std, Generator * generator) const;
  Tensor & normal_out(Tensor & out, const Tensor & mean, const Tensor & std, Generator * generator) const;
  Tensor normal(const Tensor & mean, const Tensor & std, Generator * generator) const;
  Tensor alias(const Tensor & self) const;
  Tensor & _dirichlet_grad_out(Tensor & out, const Tensor & x, const Tensor & alpha, const Tensor & total) const;
  Tensor _dirichlet_grad(const Tensor & x, const Tensor & alpha, const Tensor & total) const;
  Tensor & binary_cross_entropy_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const;
  Tensor binary_cross_entropy(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const;
  Tensor & binary_cross_entropy_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const;
  Tensor binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) const;
  Tensor & mse_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor mse_loss(const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & mse_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor mse_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & multi_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const;
  Tensor multi_margin_loss(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const;
  Tensor & multi_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const;
  Tensor multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) const;
  Tensor & multilabel_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor multilabel_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) const;
  std::tuple<Tensor &,Tensor &> multilabel_margin_loss_forward_out(Tensor & output, Tensor & is_target, const Tensor & self, const Tensor & target, int64_t reduction) const;
  std::tuple<Tensor,Tensor> multilabel_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & multilabel_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) const;
  Tensor multilabel_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) const;
  Tensor & nll_loss_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const;
  Tensor nll_loss(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const;
  std::tuple<Tensor &,Tensor &> nll_loss_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const;
  std::tuple<Tensor,Tensor> nll_loss_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const;
  Tensor & nll_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const;
  Tensor nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const;
  Tensor & nll_loss2d_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const;
  Tensor nll_loss2d(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const;
  std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const;
  std::tuple<Tensor,Tensor> nll_loss2d_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) const;
  Tensor & nll_loss2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const;
  Tensor nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) const;
  Tensor & smooth_l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor smooth_l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & smooth_l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor smooth_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & soft_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor soft_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & soft_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor soft_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) const;
  Tensor & elu_out(Tensor & out, const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const;
  Tensor elu(const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const;
  Tensor & elu_backward_out(Tensor & grad_input, const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) const;
  Tensor elu_backward(const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) const;
  Tensor & elu_(Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) const;
  Tensor & glu_out(Tensor & out, const Tensor & self, int64_t dim) const;
  Tensor glu(const Tensor & self, int64_t dim) const;
  Tensor & glu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, int64_t dim) const;
  Tensor glu_backward(const Tensor & grad_output, const Tensor & self, int64_t dim) const;
  Tensor & hardtanh_out(Tensor & out, const Tensor & self, Scalar min_val, Scalar max_val) const;
  Tensor hardtanh(const Tensor & self, Scalar min_val, Scalar max_val) const;
  Tensor & hardtanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) const;
  Tensor hardtanh_backward(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) const;
  Tensor & hardtanh_(Tensor & self, Scalar min_val, Scalar max_val) const;
  Tensor & leaky_relu_out(Tensor & out, const Tensor & self, Scalar negative_slope) const;
  Tensor leaky_relu(const Tensor & self, Scalar negative_slope) const;
  Tensor & leaky_relu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar negative_slope) const;
  Tensor leaky_relu_backward(const Tensor & grad_output, const Tensor & self, Scalar negative_slope) const;
  Tensor & leaky_relu_(Tensor & self, Scalar negative_slope) const;
  Tensor & log_sigmoid_out(Tensor & out, const Tensor & self) const;
  Tensor log_sigmoid(const Tensor & self) const;
  std::tuple<Tensor &,Tensor &> log_sigmoid_forward_out(Tensor & output, Tensor & buffer, const Tensor & self) const;
  std::tuple<Tensor,Tensor> log_sigmoid_forward(const Tensor & self) const;
  Tensor & log_sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & buffer) const;
  Tensor log_sigmoid_backward(const Tensor & grad_output, const Tensor & self, const Tensor & buffer) const;
  Tensor & rrelu_with_noise_out(Tensor & out, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const;
  Tensor rrelu_with_noise(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const;
  Tensor & rrelu_with_noise_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) const;
  Tensor rrelu_with_noise_backward(const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) const;
  Tensor & rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) const;
  Tensor & softplus_out(Tensor & out, const Tensor & self, Scalar beta, Scalar threshold) const;
  Tensor softplus(const Tensor & self, Scalar beta, Scalar threshold) const;
  Tensor & softplus_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) const;
  Tensor softplus_backward(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) const;
  Tensor & softshrink_out(Tensor & out, const Tensor & self, Scalar lambd) const;
  Tensor softshrink(const Tensor & self, Scalar lambd) const;
  Tensor & softshrink_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar lambd) const;
  Tensor softshrink_backward(const Tensor & grad_output, const Tensor & self, Scalar lambd) const;
  Tensor & adaptive_avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) const;
  Tensor adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) const;
  Tensor mkldnn_adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) const;
  Tensor _adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) const;
  Tensor _adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self) const;
  Tensor & adaptive_avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) const;
  Tensor adaptive_avg_pool3d(const Tensor & self, IntArrayRef output_size) const;
  Tensor & adaptive_avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self) const;
  Tensor adaptive_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self) const;
  std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) const;
  std::tuple<Tensor,Tensor> adaptive_max_pool2d(const Tensor & self, IntArrayRef output_size) const;
  Tensor & adaptive_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) const;
  Tensor adaptive_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) const;
  std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) const;
  std::tuple<Tensor,Tensor> adaptive_max_pool3d(const Tensor & self, IntArrayRef output_size) const;
  Tensor & adaptive_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) const;
  Tensor adaptive_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) const;
  Tensor & avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  Tensor avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  Tensor & avg_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  Tensor avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  Tensor & avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  Tensor avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  Tensor & avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  Tensor avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) const;
  std::tuple<Tensor &,Tensor &> fractional_max_pool2d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) const;
  std::tuple<Tensor,Tensor> fractional_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) const;
  Tensor & fractional_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) const;
  Tensor fractional_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) const;
  std::tuple<Tensor &,Tensor &> fractional_max_pool3d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) const;
  std::tuple<Tensor,Tensor> fractional_max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) const;
  Tensor & fractional_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) const;
  Tensor fractional_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) const;
  std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const;
  std::tuple<Tensor,Tensor> max_pool2d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const;
  Tensor & max_pool2d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const;
  Tensor max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const;
  std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const;
  std::tuple<Tensor,Tensor> max_pool3d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) const;
  Tensor & max_pool3d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const;
  Tensor max_pool3d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) const;
  Tensor & max_unpool2d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size) const;
  Tensor max_unpool2d(const Tensor & self, const Tensor & indices, IntArrayRef output_size) const;
  Tensor & max_unpool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) const;
  Tensor max_unpool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) const;
  Tensor & max_unpool3d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const;
  Tensor max_unpool3d(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const;
  Tensor & max_unpool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const;
  Tensor max_unpool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) const;
  Tensor & reflection_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding) const;
  Tensor reflection_pad1d(const Tensor & self, IntArrayRef padding) const;
  Tensor & reflection_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const;
  Tensor reflection_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const;
  Tensor & reflection_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding) const;
  Tensor reflection_pad2d(const Tensor & self, IntArrayRef padding) const;
  Tensor & reflection_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const;
  Tensor reflection_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const;
  Tensor & replication_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding) const;
  Tensor replication_pad1d(const Tensor & self, IntArrayRef padding) const;
  Tensor & replication_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const;
  Tensor replication_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const;
  Tensor & replication_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding) const;
  Tensor replication_pad2d(const Tensor & self, IntArrayRef padding) const;
  Tensor & replication_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const;
  Tensor replication_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const;
  Tensor & replication_pad3d_out(Tensor & out, const Tensor & self, IntArrayRef padding) const;
  Tensor replication_pad3d(const Tensor & self, IntArrayRef padding) const;
  Tensor & replication_pad3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const;
  Tensor replication_pad3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) const;
  Tensor & upsample_linear1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) const;
  Tensor upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners) const;
  Tensor & upsample_linear1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const;
  Tensor upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const;
  Tensor & upsample_bilinear2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) const;
  Tensor upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners) const;
  Tensor & upsample_bilinear2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const;
  Tensor upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const;
  Tensor & upsample_bicubic2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) const;
  Tensor upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners) const;
  Tensor & upsample_bicubic2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const;
  Tensor upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const;
  Tensor & upsample_trilinear3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) const;
  Tensor upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners) const;
  Tensor & upsample_trilinear3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const;
  Tensor upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) const;
  Tensor & upsample_nearest1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) const;
  Tensor upsample_nearest1d(const Tensor & self, IntArrayRef output_size) const;
  Tensor & upsample_nearest1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const;
  Tensor upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const;
  Tensor & upsample_nearest2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) const;
  Tensor upsample_nearest2d(const Tensor & self, IntArrayRef output_size) const;
  Tensor & upsample_nearest2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const;
  Tensor upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const;
  Tensor & upsample_nearest3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) const;
  Tensor upsample_nearest3d(const Tensor & self, IntArrayRef output_size) const;
  Tensor & upsample_nearest3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const;
  Tensor upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) const;
  Tensor & sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) const;
  Tensor sigmoid_backward(const Tensor & grad_output, const Tensor & output) const;
  Tensor & tanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) const;
  Tensor tanh_backward(const Tensor & grad_output, const Tensor & output) const;
  Tensor & thnn_conv_transpose2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const;
  Tensor thnn_conv_transpose2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const;
  std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv_transpose2d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const;
  std::tuple<Tensor,Tensor,Tensor> thnn_conv_transpose2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const;
  std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv_transpose2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) const;
  std::tuple<Tensor,Tensor,Tensor> thnn_conv_transpose2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const;
  Tensor & thnn_conv_transpose3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const;
  Tensor thnn_conv_transpose3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const;
  std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv_transpose3d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const;
  std::tuple<Tensor,Tensor,Tensor> thnn_conv_transpose3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) const;
  std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv_transpose3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input) const;
  std::tuple<Tensor,Tensor,Tensor> thnn_conv_transpose3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const;
  Tensor & thnn_conv2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const;
  Tensor thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const;
  std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const;
  std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const;
  std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) const;
  std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const;
  Tensor & thnn_conv_depthwise2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  Tensor thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  Tensor & thnn_conv_depthwise2d_forward_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  Tensor thnn_conv_depthwise2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  std::tuple<Tensor &,Tensor &> thnn_conv_depthwise2d_backward_out(Tensor & grad_input, Tensor & grad_weight, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  std::tuple<Tensor,Tensor> thnn_conv_depthwise2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,2> output_mask) const;
  Tensor & thnn_conv3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const;
  Tensor thnn_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const;
  std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv3d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const;
  std::tuple<Tensor,Tensor,Tensor> thnn_conv3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) const;
  std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) const;
  std::tuple<Tensor,Tensor,Tensor> thnn_conv3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) const;
  Tensor & thnn_conv_dilated2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  Tensor thnn_conv_dilated2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv_dilated2d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  std::tuple<Tensor,Tensor,Tensor> thnn_conv_dilated2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv_dilated2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) const;
  std::tuple<Tensor,Tensor,Tensor> thnn_conv_dilated2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const;
  Tensor & thnn_conv_dilated3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  Tensor thnn_conv_dilated3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv_dilated3d_forward_out(Tensor & output, Tensor & columns, Tensor & ones, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  std::tuple<Tensor,Tensor,Tensor> thnn_conv_dilated3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) const;
  std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv_dilated3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) const;
  std::tuple<Tensor,Tensor,Tensor> thnn_conv_dilated3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) const;
  Tensor thnn_col2im(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const;
  Tensor thnn_col2im_backward(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const;
  Tensor thnn_im2col(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const;
  Tensor thnn_im2col_backward(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) const;

protected:
  TensorTypeId type_id_;
  bool is_variable_;
  bool is_undefined_;
};

} // namespace at
