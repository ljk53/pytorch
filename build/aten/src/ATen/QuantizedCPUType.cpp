// required for old g++ to compile PRId64 macros, see
// https://github.com/pytorch/pytorch/issues/3571
// for context
#ifndef __STDC_FORMAT_MACROS
#define __STDC_FORMAT_MACROS
#endif

#include <ATen/QuantizedCPUType.h>

// @generated by aten/src/ATen/gen.py from TypeDerived.cpp

#include <c10/core/TensorImpl.h>
#include <ATen/CPUGeneratorImpl.h>
#include <c10/core/Allocator.h>
#include <ATen/DeviceGuard.h>
#include <ATen/NativeFunctions.h>
#include <ATen/NamedTensorUtils.h>
#include <ATen/Utils.h>
#include <ATen/WrapDimUtils.h>
#include <ATen/Dispatch.h>
#include <c10/util/Half.h>
#include <c10/core/TensorImpl.h>
#include <c10/core/UndefinedTensorImpl.h>
#include <c10/util/Optional.h>

#include <cstddef>
#include <functional>
#include <memory>
#include <utility>

#include <ATen/Config.h>
#include <ATen/core/op_registration/hacky_wrapper_for_legacy_signatures.h>
#include <torch/library.h>



namespace {
static const char* named_tensors_unsupported_error =
  " is not yet supported with named tensors. Please drop names via "
  "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
  "and set names on the result of the operation.";
}

namespace at {

/* example
Tensor * QuantizedCPUType::add(Tensor & a, Tensor & b) {
  std::cout << "add Tensor with backend QuantizedCPU\n";
  return &a;
}
*/

namespace QuantizedCPUType {

Tensor as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
    return at::native::as_strided_qtensorimpl(self, size, stride, storage_offset);
}
Tensor quantized_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & mean, const Tensor & var, double eps, double output_scale, int64_t output_zero_point) {
    return at::native::quantized_batch_norm(input, weight, bias, mean, var, eps, output_scale, output_zero_point);
}
Tensor clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
    return at::native::quantized_clamp(self, min, max);
}
Tensor _empty_affine_quantized(IntArrayRef size, const TensorOptions & options, double scale, int64_t zero_point, c10::optional<MemoryFormat> memory_format) {
    return at::native::empty_affine_quantized(size, options, scale, zero_point, memory_format);
}
Tensor _empty_per_channel_affine_quantized(IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    return at::native::empty_per_channel_affine_quantized_cpu(size, scales, zero_points, axis, options, memory_format);
}
Tensor empty_quantized(IntArrayRef size, const Tensor & qtensor) {
    return at::native::empty_quantized(size, qtensor);
}
Tensor quantized_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
    return at::native::quantized_max_pool2d(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor mean(const Tensor & self, c10::optional<ScalarType> dtype) {
    return at::native::quantized_mean_cpu(self, dtype);
}
Tensor mean_dim(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
    return at::native::quantized_mean_cpu(self, dim, keepdim, dtype);
}
Tensor & mean_out_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
    return at::native::quantized_mean_out_cpu(out, self, dim, keepdim, dtype);
}
Tensor channel_shuffle(const Tensor & self, int64_t groups) {
    return at::native::quantized_channel_shuffle(self, groups);
}
Tensor relu(const Tensor & self) {
    return at::native::quantized_relu(self);
}
Tensor & relu_(Tensor & self) {
    return at::native::quantized_relu_(self);
}
Tensor sigmoid(const Tensor & self) {
    return at::native::quantized_sigmoid(self);
}
Tensor tanh(const Tensor & self) {
    return at::native::quantized_tanh(self);
}
Tensor threshold(const Tensor & self, Scalar threshold, Scalar value) {
    return at::native::quantized_threshold(self, threshold, value);
}
Tensor clone(const Tensor & self, c10::optional<MemoryFormat> memory_format) {
    return at::native::quantized_clone(self, memory_format);
}
Tensor dequantize_self(const Tensor & self) {
    return at::native::dequantize_quant(self);
}
std::vector<Tensor> dequantize_tensors(TensorList tensors) {
    return at::native::dequantize_tensors_quant(tensors);
}
double q_scale(const Tensor & self) {
    return at::native::q_scale_quant(self);
}
int64_t q_zero_point(const Tensor & self) {
    return at::native::q_zero_point_quant(self);
}
Tensor q_per_channel_scales(const Tensor & self) {
    return at::native::q_per_channel_scales_quant(self);
}
Tensor q_per_channel_zero_points(const Tensor & self) {
    return at::native::q_per_channel_zero_points_quant(self);
}
int64_t q_per_channel_axis(const Tensor & self) {
    return at::native::q_per_channel_axis_quant(self);
}
Tensor int_repr(const Tensor & self) {
    return at::native::int_repr_quant_cpu(self);
}
QScheme qscheme(const Tensor & self) {
    return at::native::qscheme_quant(self);
}
Tensor & set__source_Storage_storage_offset(Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride) {
    return at::native::set_storage_quantized_(self, source, storage_offset, size, stride);
}
Tensor & set_quantizer_(Tensor & self, ConstQuantizerPtr quantizer) {
    return at::native::set_quantizer_(self, quantizer);
}
Tensor view(const Tensor & self, IntArrayRef size) {
    return at::native::view(self, size);
}
Tensor & ne_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::ne_out_quantized_cpu(out, self, other);
}
Tensor ne_Scalar(const Tensor & self, Scalar other) {
    return at::native::ne_quantized_cpu(self, other);
}
Tensor & ne_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::ne_out_quantized_cpu(out, self, other);
}
Tensor ne_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::ne_quantized_cpu(self, other);
}
Tensor & eq_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::eq_out_quantized_cpu(out, self, other);
}
Tensor eq_Scalar(const Tensor & self, Scalar other) {
    return at::native::eq_quantized_cpu(self, other);
}
Tensor & eq_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::eq_out_quantized_cpu(out, self, other);
}
Tensor eq_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::eq_quantized_cpu(self, other);
}
Tensor & ge_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::ge_out_quantized_cpu(out, self, other);
}
Tensor ge_Scalar(const Tensor & self, Scalar other) {
    return at::native::ge_quantized_cpu(self, other);
}
Tensor & ge_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::ge_out_quantized_cpu(out, self, other);
}
Tensor ge_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::ge_quantized_cpu(self, other);
}
Tensor & le_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::le_out_quantized_cpu(out, self, other);
}
Tensor le_Scalar(const Tensor & self, Scalar other) {
    return at::native::le_quantized_cpu(self, other);
}
Tensor & le_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::le_out_quantized_cpu(out, self, other);
}
Tensor le_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::le_quantized_cpu(self, other);
}
Tensor & gt_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::gt_out_quantized_cpu(out, self, other);
}
Tensor gt_Scalar(const Tensor & self, Scalar other) {
    return at::native::gt_quantized_cpu(self, other);
}
Tensor & gt_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::gt_out_quantized_cpu(out, self, other);
}
Tensor gt_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::gt_quantized_cpu(self, other);
}
Tensor & lt_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::lt_out_quantized_cpu(out, self, other);
}
Tensor lt_Scalar(const Tensor & self, Scalar other) {
    return at::native::lt_quantized_cpu(self, other);
}
Tensor & lt_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::lt_out_quantized_cpu(out, self, other);
}
Tensor lt_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::lt_quantized_cpu(self, other);
}
Tensor min(const Tensor & self) {
    return at::native::min_quant(self);
}
Tensor max(const Tensor & self) {
    return at::native::max_quant(self);
}
std::tuple<Tensor,Tensor> sort(const Tensor & self, int64_t dim, bool descending) {
    return at::native::sort_quant(self, dim, descending);
}
std::tuple<Tensor,Tensor> topk(const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
    return at::native::quantized_topk_cpu(self, k, dim, largest, sorted);
}
Tensor unfold(const Tensor & self, int64_t dimension, int64_t size, int64_t step) {
    return at::native::unfold(self, dimension, size, step);
}
bool equal(const Tensor & self, const Tensor & other) {
    return at::native::quantized_equal_cpu(self, other);
}
Tensor _cat(TensorList tensors, int64_t dim) {
    return at::native::quantized_cat(tensors, dim);
}
Tensor & _cat_out_out(Tensor & out, TensorList tensors, int64_t dim) {
    return at::native::quantized_cat_out(out, tensors, dim);
}
Tensor hardsigmoid(const Tensor & self) {
    return at::native::quantized_hardsigmoid(self);
}
Tensor & hardtanh_out_out(Tensor & out, const Tensor & self, Scalar min_val, Scalar max_val) {
    return at::native::quantized_hardtanh_out(out, self, min_val, max_val);
}
Tensor hardtanh(const Tensor & self, Scalar min_val, Scalar max_val) {
    return at::native::quantized_hardtanh(self, min_val, max_val);
}
Tensor & hardtanh_(Tensor & self, Scalar min_val, Scalar max_val) {
    return at::native::quantized_hardtanh_(self, min_val, max_val);
}
Tensor & leaky_relu_out_out(Tensor & out, const Tensor & self, Scalar negative_slope) {
    return at::native::quantized_leaky_relu_out(out, self, negative_slope);
}
Tensor leaky_relu(const Tensor & self, Scalar negative_slope) {
    return at::native::quantized_leaky_relu(self, negative_slope);
}
Tensor & leaky_relu_(Tensor & self, Scalar negative_slope) {
    return at::native::quantized_leaky_relu_(self, negative_slope);
}
Tensor _adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) {
    return at::native::quantized_adaptive_avg_pool2d(self, output_size);
}
Tensor & adaptive_avg_pool3d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {
    return at::native::quantized_adaptive_avg_pool3d_out(out, self, output_size);
}
Tensor adaptive_avg_pool3d(const Tensor & self, IntArrayRef output_size) {
    return at::native::quantized_adaptive_avg_pool3d(self, output_size);
}
Tensor avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    return at::native::quantized_avg_pool2d(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    return at::native::quantized_avg_pool3d(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor reflection_pad1d(const Tensor & self, IntArrayRef padding) {
    return at::native::reflection_pad1d_cpu(self, padding);
}
Tensor upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::quantized_upsample_bilinear2d_cpu(self, output_size, align_corners, scales_h, scales_w);
}
Tensor upsample_nearest2d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::quantized_upsample_nearest2d_cpu(self, output_size, scales_h, scales_w);
}
Tensor upsample_nearest3d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::quantized_upsample_nearest3d_cpu(self, output_size, scales_d, scales_h, scales_w);
}

}  // namespace QuantizedCPUType

TORCH_LIBRARY_IMPL(aten, QuantizedCPU, m) {
  m.impl("as_strided",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::as_strided)))
  );
  m.impl("quantized_batch_norm",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::quantized_batch_norm))
  );
  m.impl("clamp",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::clamp)))
  );
  m.impl("_empty_affine_quantized",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::_empty_affine_quantized)))
  );
  m.impl("_empty_per_channel_affine_quantized",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::_empty_per_channel_affine_quantized)))
  );
  m.impl("empty_quantized",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::empty_quantized))
  );
  m.impl("quantized_max_pool2d",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::quantized_max_pool2d)))
  );
  m.impl("mean",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::mean)))
  );
  m.impl("mean.dim",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::mean_dim)))
  );
  m.impl("mean.out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::mean_out_out))
  );
  m.impl("channel_shuffle",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::channel_shuffle)))
  );
  m.impl("relu",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::relu)))
  );
  m.impl("relu_",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::relu_))
  );
  m.impl("sigmoid",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::sigmoid)))
  );
  m.impl("tanh",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::tanh)))
  );
  m.impl("threshold",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::threshold)))
  );
  m.impl("clone",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::clone)))
  );
  m.impl("dequantize.self",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::dequantize_self)))
  );
  m.impl("dequantize.tensors",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::dequantize_tensors)))
  );
  m.impl("q_scale",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::q_scale)))
  );
  m.impl("q_zero_point",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::q_zero_point)))
  );
  m.impl("q_per_channel_scales",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::q_per_channel_scales)))
  );
  m.impl("q_per_channel_zero_points",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::q_per_channel_zero_points)))
  );
  m.impl("q_per_channel_axis",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::q_per_channel_axis)))
  );
  m.impl("int_repr",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::int_repr)))
  );
  m.impl("qscheme",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::qscheme)))
  );
  m.impl("set_.source_Storage_storage_offset",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::set__source_Storage_storage_offset))
  );
  m.impl("set_quantizer_",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::set_quantizer_))
  );
  m.impl("view",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::view)))
  );
  m.impl("ne.Scalar_out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::ne_out_Scalar_out))
  );
  m.impl("ne.Scalar",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::ne_Scalar)))
  );
  m.impl("ne.Tensor_out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::ne_out_Tensor_out))
  );
  m.impl("ne.Tensor",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::ne_Tensor)))
  );
  m.impl("eq.Scalar_out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::eq_out_Scalar_out))
  );
  m.impl("eq.Scalar",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::eq_Scalar)))
  );
  m.impl("eq.Tensor_out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::eq_out_Tensor_out))
  );
  m.impl("eq.Tensor",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::eq_Tensor)))
  );
  m.impl("ge.Scalar_out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::ge_out_Scalar_out))
  );
  m.impl("ge.Scalar",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::ge_Scalar)))
  );
  m.impl("ge.Tensor_out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::ge_out_Tensor_out))
  );
  m.impl("ge.Tensor",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::ge_Tensor)))
  );
  m.impl("le.Scalar_out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::le_out_Scalar_out))
  );
  m.impl("le.Scalar",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::le_Scalar)))
  );
  m.impl("le.Tensor_out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::le_out_Tensor_out))
  );
  m.impl("le.Tensor",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::le_Tensor)))
  );
  m.impl("gt.Scalar_out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::gt_out_Scalar_out))
  );
  m.impl("gt.Scalar",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::gt_Scalar)))
  );
  m.impl("gt.Tensor_out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::gt_out_Tensor_out))
  );
  m.impl("gt.Tensor",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::gt_Tensor)))
  );
  m.impl("lt.Scalar_out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::lt_out_Scalar_out))
  );
  m.impl("lt.Scalar",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::lt_Scalar)))
  );
  m.impl("lt.Tensor_out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::lt_out_Tensor_out))
  );
  m.impl("lt.Tensor",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::lt_Tensor)))
  );
  m.impl("min",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::min)))
  );
  m.impl("max",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::max)))
  );
  m.impl("sort",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::sort)))
  );
  m.impl("topk",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::topk)))
  );
  m.impl("unfold",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::unfold)))
  );
  m.impl("equal",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::equal)))
  );
  m.impl("_cat",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::_cat)))
  );
  m.impl("_cat.out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::_cat_out_out))
  );
  m.impl("hardsigmoid",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::hardsigmoid)))
  );
  m.impl("hardtanh.out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::hardtanh_out_out))
  );
  m.impl("hardtanh",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::hardtanh)))
  );
  m.impl("hardtanh_",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::hardtanh_))
  );
  m.impl("leaky_relu.out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::leaky_relu_out_out))
  );
  m.impl("leaky_relu",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::leaky_relu)))
  );
  m.impl("leaky_relu_",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::leaky_relu_))
  );
  m.impl("_adaptive_avg_pool2d",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::_adaptive_avg_pool2d)))
  );
  m.impl("adaptive_avg_pool3d.out",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         torch::CppFunction::makeUnboxedOnly(&QuantizedCPUType::adaptive_avg_pool3d_out_out))
  );
  m.impl("adaptive_avg_pool3d",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::adaptive_avg_pool3d)))
  );
  m.impl("avg_pool2d",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::avg_pool2d)))
  );
  m.impl("avg_pool3d",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::avg_pool3d)))
  );
  m.impl("reflection_pad1d",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::reflection_pad1d)))
  );
  m.impl("upsample_bilinear2d",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::upsample_bilinear2d)))
  );
  m.impl("upsample_nearest2d",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::upsample_nearest2d)))
  );
  m.impl("upsample_nearest3d",
         torch::dispatch(DispatchKey::QuantizedCPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(QuantizedCPUType::upsample_nearest3d)))
  );
}

} // namespace at
