// required for old g++ to compile PRId64 macros, see
// https://github.com/pytorch/pytorch/issues/3571
// for context
#ifndef __STDC_FORMAT_MACROS
#define __STDC_FORMAT_MACROS
#endif

#include <ATen/CPUType.h>

// @generated by aten/src/ATen/gen.py from TypeDerived.cpp

#include <c10/core/TensorImpl.h>
#include <ATen/CPUGeneratorImpl.h>
#include <c10/core/Allocator.h>
#include <ATen/DeviceGuard.h>
#include <ATen/NativeFunctions.h>
#include <ATen/NamedTensorUtils.h>
#include <ATen/Utils.h>
#include <ATen/WrapDimUtils.h>
#include <ATen/Dispatch.h>
#include <c10/util/Half.h>
#include <c10/core/TensorImpl.h>
#include <c10/core/UndefinedTensorImpl.h>
#include <c10/util/Optional.h>

#include <cstddef>
#include <functional>
#include <memory>
#include <utility>

#include <ATen/Config.h>
#include <ATen/core/op_registration/hacky_wrapper_for_legacy_signatures.h>
#include <torch/library.h>

#include <ATen/LegacyTHFunctionsCPU.h>

namespace {
static const char* named_tensors_unsupported_error =
  " is not yet supported with named tensors. Please drop names via "
  "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
  "and set names on the result of the operation.";
}

namespace at {

/* example
Tensor * CPUType::add(Tensor & a, Tensor & b) {
  std::cout << "add Tensor with backend CPU\n";
  return &a;
}
*/

namespace CPUType {

Tensor absolute(const Tensor & self) {
    return at::native::abs(self);
}
Tensor & absolute_(Tensor & self) {
    return at::native::abs_(self);
}
Tensor & absolute_out_out(Tensor & out, const Tensor & self) {
    return at::native::abs_out(out, self);
}
Tensor add_Tensor(const Tensor & self, const Tensor & other, Scalar alpha) {
    return at::native::add(self, other, alpha);
}
Tensor & add__Tensor(Tensor & self, const Tensor & other, Scalar alpha) {
    return at::native::add_(self, other, alpha);
}
Tensor & add_out_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) {
    return at::native::add_out(out, self, other, alpha);
}
Tensor & _addmv_impl_(Tensor & self, const Tensor & self2, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {
    return at::native::addmv_impl_cpu(self, self2, mat, vec, beta, alpha);
}
Tensor & arange_out_start_out(Tensor & out, Scalar start, Scalar end, Scalar step) {
    return at::native::arange_cpu_out(out, start, end, step);
}
Tensor argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
    return at::native::argmax(self, dim, keepdim);
}
Tensor argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
    return at::native::argmin(self, dim, keepdim);
}
Tensor as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
    return at::native::as_strided_tensorimpl(self, size, stride, storage_offset);
}
Tensor baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
    return at::native::baddbmm_cpu(self, batch1, batch2, beta, alpha);
}
Tensor & baddbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
    return at::native::baddbmm__cpu(self, batch1, batch2, beta, alpha);
}
Tensor & baddbmm_out_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
    return at::native::baddbmm_out_cpu(out, self, batch1, batch2, beta, alpha);
}
Tensor binary_cross_entropy(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
    return at::native::binary_cross_entropy_cpu(self, target, weight, reduction);
}
Tensor & binary_cross_entropy_out_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
    return at::native::binary_cross_entropy_out_cpu(out, self, target, weight, reduction);
}
Tensor binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
    return at::native::binary_cross_entropy_backward_cpu(grad_output, self, target, weight, reduction);
}
Tensor & binary_cross_entropy_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
    return at::native::binary_cross_entropy_backward_out_cpu(grad_input, grad_output, self, target, weight, reduction);
}
Tensor bincount(const Tensor & self, const Tensor & weights, int64_t minlength) {
    return at::native::_bincount_cpu(self, weights, minlength);
}
Tensor & bitwise_not_out_out(Tensor & out, const Tensor & self) {
    return at::native::bitwise_not_out(out, self);
}
Tensor & logical_not_out_out(Tensor & out, const Tensor & self) {
    return at::native::logical_not_out(out, self);
}
Tensor & logical_xor_out_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::logical_xor_out(out, self, other);
}
Tensor & logical_and_out_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::logical_and_out(out, self, other);
}
Tensor & logical_or_out_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::logical_or_out(out, self, other);
}
Tensor bmm(const Tensor & self, const Tensor & mat2) {
    return at::native::bmm_cpu(self, mat2);
}
Tensor & bmm_out_out(Tensor & out, const Tensor & self, const Tensor & mat2) {
    return at::native::bmm_out_cpu(out, self, mat2);
}
Tensor & ceil_out_out(Tensor & out, const Tensor & self) {
    return at::native::ceil_out(out, self);
}
Tensor clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
    return at::native::clamp(self, min, max);
}
void _cummax_helper(const Tensor & self, Tensor & values, Tensor & indices, int64_t dim) {
 at::native::cummax_helper_cpu(self, values, indices, dim);
}
void _cummin_helper(const Tensor & self, Tensor & values, Tensor & indices, int64_t dim) {
 at::native::cummin_helper_cpu(self, values, indices, dim);
}
std::tuple<Tensor,Tensor> _ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool zero_infinity) {
    return at::native::ctc_loss_cpu(log_probs, targets, input_lengths, target_lengths, blank, zero_infinity);
}
Tensor _ctc_loss_backward(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity) {
    return at::native::ctc_loss_backward_cpu(grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity);
}
Tensor div_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::div(self, other);
}
Tensor & div__Tensor(Tensor & self, const Tensor & other) {
    return at::native::div_(self, other);
}
Tensor & div_out_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::div_out(out, self, other);
}
Tensor dot(const Tensor & self, const Tensor & tensor) {
    return at::native::dot(self, tensor);
}
Tensor embedding_dense_backward(const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
    return at::native::embedding_dense_backward_cpu(grad_output, indices, num_weights, padding_idx, scale_grad_by_freq);
}
Tensor & embedding_renorm_(Tensor & self, const Tensor & indices, double max_norm, double norm_type) {
    return at::native::embedding_renorm_cpu_(self, indices, max_norm, norm_type);
}
std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag_forward_only(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights, bool include_last_offset) {
    return at::native::_embedding_bag_forward_only_cpu(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
}
std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights, bool include_last_offset) {
    return at::native::_embedding_bag_cpu(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
}
Tensor _embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) {
    return at::native::_embedding_bag_dense_backward_cpu(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights);
}
Tensor _embedding_bag_per_sample_weights_backward(const Tensor & grad, const Tensor & weight, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, int64_t mode) {
    return at::native::_embedding_bag_per_sample_weights_backward_cpu(grad, weight, indices, offsets, offset2bag, mode);
}
Tensor empty_memory_format(IntArrayRef size, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    return at::native::empty_cpu(size, options, memory_format);
}
Tensor _empty_affine_quantized(IntArrayRef size, const TensorOptions & options, double scale, int64_t zero_point, c10::optional<MemoryFormat> memory_format) {
    return at::native::empty_affine_quantized_other_backends_stub(size, options, scale, zero_point, memory_format);
}
Tensor _empty_per_channel_affine_quantized(IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    return at::native::empty_per_channel_affine_quantized_other_backends_stub(size, scales, zero_points, axis, options, memory_format);
}
Tensor empty_strided(IntArrayRef size, IntArrayRef stride, const TensorOptions & options) {
    return at::native::empty_strided_cpu(size, stride, options);
}
Tensor & expm1_out_out(Tensor & out, const Tensor & self) {
    return at::native::expm1_out(out, self);
}
Tensor & eye_out_out(Tensor & out, int64_t n) {
    return at::native::eye_out_cpu(out, n);
}
Tensor & eye_out_m_out(Tensor & out, int64_t n, int64_t m) {
    return at::native::eye_out_cpu(out, n, m);
}
Tensor & floor_out_out(Tensor & out, const Tensor & self) {
    return at::native::floor_out(out, self);
}
Tensor floor_divide(const Tensor & self, const Tensor & other) {
    return at::native::floor_divide(self, other);
}
Tensor & floor_divide__Tensor(Tensor & self, const Tensor & other) {
    return at::native::floor_divide_(self, other);
}
Tensor & floor_divide_out_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::floor_divide_out(out, self, other);
}
Tensor from_file(std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, const TensorOptions & options) {
    return at::native::from_file(filename, shared, size, options);
}
Tensor grid_sampler_2d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
    return at::native::grid_sampler_2d_cpu(input, grid, interpolation_mode, padding_mode, align_corners);
}
std::tuple<Tensor,Tensor> grid_sampler_2d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
    return at::native::grid_sampler_2d_backward_cpu(grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
}
Tensor grid_sampler_3d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
    return at::native::grid_sampler_3d_cpu(input, grid, interpolation_mode, padding_mode, align_corners);
}
std::tuple<Tensor,Tensor> grid_sampler_3d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
    return at::native::grid_sampler_3d_backward_cpu(grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
}
std::tuple<Tensor,Tensor,Tensor> native_group_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t N, int64_t C, int64_t HxW, int64_t group, double eps) {
    return at::native::native_group_norm(input, weight, bias, N, C, HxW, group, eps);
}
std::tuple<Tensor,Tensor,Tensor> native_group_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t N, int64_t C, int64_t HxW, int64_t group, std::array<bool,3> output_mask) {
    return at::native::native_group_norm_backward(grad_out, input, mean, rstd, weight, N, C, HxW, group, output_mask);
}
Tensor _fft_with_size(const Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, IntArrayRef checked_signal_sizes, bool normalized, bool onesided, IntArrayRef output_sizes) {
    return at::native::_fft_mkl(self, signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes);
}
Tensor _inverse_helper(const Tensor & self) {
    return at::native::_inverse_helper_cpu(self);
}
Tensor isnan(const Tensor & self) {
    return at::native::isnan(self);
}
Tensor kl_div_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, bool log_target) {
    return at::native::kl_div_backward_cpu(grad_output, self, target, reduction, log_target);
}
std::tuple<Tensor &,Tensor &> kthvalue_out_values(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool keepdim) {
    return at::native::kthvalue_out_cpu(values, indices, self, k, dim, keepdim);
}
std::tuple<Tensor,Tensor,Tensor> native_layer_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t M, int64_t N, double eps) {
    return at::native::layer_norm_cpu(input, weight, bias, M, N, eps);
}
std::tuple<Tensor,Tensor,Tensor> native_layer_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask) {
    return at::native::layer_norm_backward_cpu(grad_out, input, mean, rstd, weight, M, N, output_mask);
}
Tensor & linspace_out_out(Tensor & out, Scalar start, Scalar end, int64_t steps) {
    return at::native::linspace_cpu_out(out, start, end, steps);
}
Tensor & log_out_out(Tensor & out, const Tensor & self) {
    return at::native::log_out(out, self);
}
Tensor & log10_out_out(Tensor & out, const Tensor & self) {
    return at::native::log10_out(out, self);
}
Tensor & log1p_(Tensor & self) {
    return at::native::log1p_(self);
}
Tensor & log1p_out_out(Tensor & out, const Tensor & self) {
    return at::native::log1p_out(out, self);
}
Tensor & log2_out_out(Tensor & out, const Tensor & self) {
    return at::native::log2_out(out, self);
}
Tensor & logspace_out_out(Tensor & out, Scalar start, Scalar end, int64_t steps, double base) {
    return at::native::logspace_cpu_out(out, start, end, steps, base);
}
Tensor _log_softmax(const Tensor & self, int64_t dim, bool half_to_float) {
    return at::native::log_softmax_cpu(self, dim, half_to_float);
}
Tensor _log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) {
    return at::native::log_softmax_backward_cpu(grad_output, output, dim, self);
}
Tensor _logcumsumexp(const Tensor & self, int64_t dim) {
    return at::native::_logcumsumexp_cpu(self, dim);
}
Tensor & _logcumsumexp_out_out(Tensor & out, const Tensor & self, int64_t dim) {
    return at::native::_logcumsumexp_out_cpu(out, self, dim);
}
Tensor mean(const Tensor & self, c10::optional<ScalarType> dtype) {
    return at::native::mean_cpu_gpu(self, dtype);
}
Tensor mean_dim(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
    return at::native::mean_cpu_gpu(self, dim, keepdim, dtype);
}
Tensor & mean_out_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
    return at::native::mean_out_cpu_gpu(out, self, dim, keepdim, dtype);
}
Tensor mm(const Tensor & self, const Tensor & mat2) {
    return at::native::mm_cpu(self, mat2);
}
Tensor & mm_out_out(Tensor & out, const Tensor & self, const Tensor & mat2) {
    return at::native::mm_cpu_out(out, self, mat2);
}
Tensor mul_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::mul(self, other);
}
Tensor & mul__Tensor(Tensor & self, const Tensor & other) {
    return at::native::mul_(self, other);
}
Tensor & mul_out_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::mul_out(out, self, other);
}
Tensor mv(const Tensor & self, const Tensor & vec) {
    return at::native::mv(self, vec);
}
Tensor narrow_copy(const Tensor & self, int64_t dim, int64_t start, int64_t length) {
    return at::native::narrow_copy_dense(self, dim, start, length);
}
std::tuple<Tensor,Tensor,Tensor> native_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps) {
    return at::native::batch_norm_cpu(input, weight, bias, running_mean, running_var, training, momentum, eps);
}
std::tuple<Tensor,Tensor,Tensor> native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask) {
    return at::native::batch_norm_backward_cpu(grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask);
}
std::tuple<Tensor,Tensor> batch_norm_update_stats(const Tensor & input, const Tensor & running_mean, const Tensor & running_var, double momentum) {
    return at::native::batch_norm_update_stats_cpu(input, running_mean, running_var, momentum);
}
Tensor channel_shuffle(const Tensor & self, int64_t groups) {
    return at::native::channel_shuffle(self, groups);
}
Tensor & randperm_out_generator_out(Tensor & out, int64_t n, c10::optional<Generator> generator) {
    return at::native::randperm_out_cpu(out, n, generator);
}
Tensor & range_out_out(Tensor & out, Scalar start, Scalar end, Scalar step) {
    return at::native::range_cpu_out(out, start, end, step);
}
Tensor & neg_out_out(Tensor & out, const Tensor & self) {
    return at::native::neg_out(out, self);
}
Tensor repeat_interleave_Tensor(const Tensor & repeats) {
    return at::native::repeat_interleave_cpu(repeats);
}
Tensor & round_out_out(Tensor & out, const Tensor & self) {
    return at::native::round_out(out, self);
}
Tensor relu(const Tensor & self) {
    return at::native::relu(self);
}
Tensor & relu_(Tensor & self) {
    return at::native::relu_(self);
}
Tensor prelu(const Tensor & self, const Tensor & weight) {
    return at::native::prelu_cpu(self, weight);
}
std::tuple<Tensor,Tensor> prelu_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight) {
    return at::native::prelu_backward_cpu(grad_output, self, weight);
}
Tensor gelu(const Tensor & self) {
    return at::native::gelu_cpu(self);
}
Tensor gelu_backward(const Tensor & grad, const Tensor & self) {
    return at::native::gelu_backward_cpu(grad, self);
}
Tensor & rsqrt_out_out(Tensor & out, const Tensor & self) {
    return at::native::rsqrt_out(out, self);
}
Tensor sigmoid(const Tensor & self) {
    return at::native::sigmoid(self);
}
Tensor & sigmoid_(Tensor & self) {
    return at::native::sigmoid_(self);
}
Tensor & sin_out_out(Tensor & out, const Tensor & self) {
    return at::native::sin_out(out, self);
}
Tensor _softmax(const Tensor & self, int64_t dim, bool half_to_float) {
    return at::native::softmax_cpu(self, dim, half_to_float);
}
Tensor _softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) {
    return at::native::softmax_backward_cpu(grad_output, output, dim, self);
}
Tensor & sspaddmm_out_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
    return at::native::_sspaddmm_out_only_sparse(out, self, mat1, mat2, beta, alpha);
}
Tensor tanh(const Tensor & self) {
    return at::native::tanh(self);
}
Tensor threshold(const Tensor & self, Scalar threshold, Scalar value) {
    return at::native::threshold(self, threshold, value);
}
Tensor & threshold_(Tensor & self, Scalar threshold, Scalar value) {
    return at::native::threshold_(self, threshold, value);
}
Tensor & threshold_out_out(Tensor & out, const Tensor & self, Scalar threshold, Scalar value) {
    return at::native::threshold_out(out, self, threshold, value);
}
Tensor threshold_backward(const Tensor & grad_output, const Tensor & self, Scalar threshold) {
    return at::native::threshold_backward(grad_output, self, threshold);
}
Tensor flip(const Tensor & self, IntArrayRef dims) {
    return at::native::flip_cpu(self, dims);
}
Tensor roll(const Tensor & self, IntArrayRef shifts, IntArrayRef dims) {
    return at::native::roll_cpu(self, shifts, dims);
}
Tensor true_divide_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::true_divide(self, other);
}
Tensor & true_divide__Tensor(Tensor & self, const Tensor & other) {
    return at::native::true_divide_(self, other);
}
Tensor & true_divide_out_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::true_divide_out(out, self, other);
}
Tensor & trunc_out_out(Tensor & out, const Tensor & self) {
    return at::native::trunc_out(out, self);
}
std::tuple<Tensor,Tensor> _unique(const Tensor & self, bool sorted, bool return_inverse) {
    return at::native::_unique_cpu(self, sorted, return_inverse);
}
std::tuple<Tensor,Tensor,Tensor> unique_dim(const Tensor & self, int64_t dim, bool sorted, bool return_inverse, bool return_counts) {
    return at::native::unique_dim_cpu(self, dim, sorted, return_inverse, return_counts);
}
std::tuple<Tensor,Tensor,Tensor> unique_consecutive(const Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) {
    return at::native::unique_consecutive_cpu(self, return_inverse, return_counts, dim);
}
std::tuple<Tensor,Tensor,Tensor> unique_dim_consecutive(const Tensor & self, int64_t dim, bool return_inverse, bool return_counts) {
    return at::native::unique_dim_consecutive_cpu(self, dim, return_inverse, return_counts);
}
std::tuple<Tensor,Tensor,Tensor> _unique2(const Tensor & self, bool sorted, bool return_inverse, bool return_counts) {
    return at::native::_unique2_cpu(self, sorted, return_inverse, return_counts);
}
Tensor _standard_gamma_grad(const Tensor & self, const Tensor & output) {
    return at::native::_standard_gamma_grad_cpu(self, output);
}
Tensor _standard_gamma(const Tensor & self, c10::optional<Generator> generator) {
    return at::native::_s_gamma_cpu(self, generator);
}
Tensor _dirichlet_grad(const Tensor & x, const Tensor & alpha, const Tensor & total) {
    return at::native::_dirichlet_grad_cpu(x, alpha, total);
}
Tensor _sample_dirichlet(const Tensor & self, c10::optional<Generator> generator) {
    return at::native::_s_dirichlet_cpu(self, generator);
}
Tensor poisson(const Tensor & self, c10::optional<Generator> generator) {
    return at::native::_s_poisson_cpu(self, generator);
}
Tensor binomial(const Tensor & count, const Tensor & prob, c10::optional<Generator> generator) {
    return at::native::_s_binomial_cpu(count, prob, generator);
}
Tensor clone(const Tensor & self, c10::optional<MemoryFormat> memory_format) {
    return at::native::clone(self, memory_format);
}
Tensor & pow_out_Tensor_Scalar_out(Tensor & out, const Tensor & self, Scalar exponent) {
    return at::native::pow_out(out, self, exponent);
}
Tensor pow_Tensor_Scalar(const Tensor & self, Scalar exponent) {
    return at::native::pow(self, exponent);
}
Tensor & zero_(Tensor & self) {
    return at::native::zero_(self);
}
Tensor & sub_out_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) {
    return at::native::sub_out(out, self, other, alpha);
}
Tensor sub_Tensor(const Tensor & self, const Tensor & other, Scalar alpha) {
    return at::native::sub(self, other, alpha);
}
Tensor & sub__Tensor(Tensor & self, const Tensor & other, Scalar alpha) {
    return at::native::sub_(self, other, alpha);
}
Tensor & addmm_out_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
    return at::native::addmm_cpu_out(out, self, mat1, mat2, beta, alpha);
}
Tensor addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
    return at::native::addmm_cpu(self, mat1, mat2, beta, alpha);
}
Tensor & addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
    return at::native::legacy::cpu::_th_addmm_(self, mat1, mat2, beta, alpha);
}
Tensor to_sparse_sparse_dim(const Tensor & self, int64_t sparse_dim) {
    return at::native::dense_to_sparse(self, sparse_dim);
}
Tensor to_sparse(const Tensor & self) {
    return at::native::dense_to_sparse(self);
}
Tensor to_mkldnn(const Tensor & self) {
    return at::native::dense_to_mkldnn(self);
}
Tensor quantize_per_tensor(const Tensor & self, double scale, int64_t zero_point, ScalarType dtype) {
    return at::native::quantize_per_tensor(self, scale, zero_point, dtype);
}
std::vector<Tensor> quantize_per_tensor_tensors(TensorList tensors, const Tensor & scales, const Tensor & zero_points, ScalarType dtype) {
    return at::native::quantize_per_tensor_list_cpu(tensors, scales, zero_points, dtype);
}
Tensor quantize_per_channel(const Tensor & self, const Tensor & scales, const Tensor & zero_points, int64_t axis, ScalarType dtype) {
    return at::native::quantize_per_channel_cpu(self, scales, zero_points, axis, dtype);
}
Tensor _make_per_tensor_quantized_tensor(const Tensor & self, double scale, int64_t zero_point) {
    return at::native::make_per_tensor_quantized_tensor_cpu(self, scale, zero_point);
}
Tensor _make_per_channel_quantized_tensor(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis) {
    return at::native::make_per_channel_quantized_tensor_cpu(self, scale, zero_point, axis);
}
Scalar _local_scalar_dense(const Tensor & self) {
    return at::native::_local_scalar_dense_cpu(self);
}
Tensor & set__source_Storage(Tensor & self, Storage source) {
    return at::native::set_(self, source);
}
Tensor & set__source_Storage_storage_offset(Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride) {
    return at::native::set_storage_cpu_(self, source, storage_offset, size, stride);
}
Tensor & set__source_Tensor(Tensor & self, const Tensor & source) {
    return at::native::set_tensor_(self, source);
}
Tensor & set_(Tensor & self) {
    return at::native::set_cpu_(self);
}
bool is_set_to(const Tensor & self, const Tensor & tensor) {
    return at::native::is_set_to(self, tensor);
}
Tensor & masked_fill__Scalar(Tensor & self, const Tensor & mask, Scalar value) {
    return at::native::masked_fill__cpu(self, mask, value);
}
Tensor & masked_fill__Tensor(Tensor & self, const Tensor & mask, const Tensor & value) {
    return at::native::masked_fill__cpu(self, mask, value);
}
Tensor & masked_scatter_(Tensor & self, const Tensor & mask, const Tensor & source) {
    return at::native::masked_scatter__cpu(self, mask, source);
}
Tensor view(const Tensor & self, IntArrayRef size) {
    return at::native::view(self, size);
}
Tensor & put_(Tensor & self, const Tensor & index, const Tensor & source, bool accumulate) {
    return at::native::legacy::cpu::_th_put_(self, index, source, accumulate);
}
Tensor & index_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
    return at::native::index_add_cpu_(self, dim, index, source);
}
Tensor & index_fill__int_Scalar(Tensor & self, int64_t dim, const Tensor & index, Scalar value) {
    return at::native::legacy::cpu::_th_index_fill_(self, dim, index, value);
}
Tensor & index_fill__int_Tensor(Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) {
    return at::native::index_fill_(self, dim, index, value);
}
Tensor & scatter__src(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
    return at::native::scatter_(self, dim, index, src);
}
Tensor & scatter__value(Tensor & self, int64_t dim, const Tensor & index, Scalar value) {
    return at::native::scatter_fill_(self, dim, index, value);
}
Tensor & scatter__reduce(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src, std::string reduce) {
    return at::native::scatter_cpu_reduce_(self, dim, index, src, reduce);
}
Tensor & scatter__value_reduce(Tensor & self, int64_t dim, const Tensor & index, Scalar value, std::string reduce) {
    return at::native::scatter_cpu_scalar_reduce_(self, dim, index, value, reduce);
}
Tensor & scatter_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
    return at::native::scatter_add_(self, dim, index, src);
}
Tensor & bitwise_and_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::bitwise_and_out(out, self, other);
}
Tensor & bitwise_and_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::bitwise_and_out(out, self, other);
}
Tensor & bitwise_or_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::bitwise_or_out(out, self, other);
}
Tensor & bitwise_or_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::bitwise_or_out(out, self, other);
}
Tensor & bitwise_xor_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::bitwise_xor_out(out, self, other);
}
Tensor & bitwise_xor_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::bitwise_xor_out(out, self, other);
}
Tensor __lshift___Scalar(const Tensor & self, Scalar other) {
    return at::native::__lshift__(self, other);
}
Tensor __lshift___Tensor(const Tensor & self, const Tensor & other) {
    return at::native::__lshift__(self, other);
}
Tensor & __ilshift___Scalar(Tensor & self, Scalar other) {
    return at::native::__ilshift__(self, other);
}
Tensor & __ilshift___Tensor(Tensor & self, const Tensor & other) {
    return at::native::__ilshift__(self, other);
}
Tensor __rshift___Scalar(const Tensor & self, Scalar other) {
    return at::native::__rshift__(self, other);
}
Tensor __rshift___Tensor(const Tensor & self, const Tensor & other) {
    return at::native::__rshift__(self, other);
}
Tensor & __irshift___Scalar(Tensor & self, Scalar other) {
    return at::native::__irshift__(self, other);
}
Tensor & __irshift___Tensor(Tensor & self, const Tensor & other) {
    return at::native::__irshift__(self, other);
}
Tensor & lgamma_(Tensor & self) {
    return at::native::_lgamma__cpu(self);
}
Tensor & tril_(Tensor & self, int64_t diagonal) {
    return at::native::tril_cpu_(self, diagonal);
}
Tensor & triu_(Tensor & self, int64_t diagonal) {
    return at::native::triu_cpu_(self, diagonal);
}
Tensor & renorm_(Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) {
    return at::native::legacy::cpu::_th_renorm_(self, p, dim, maxnorm);
}
Tensor & pow__Scalar(Tensor & self, Scalar exponent) {
    return at::native::pow_(self, exponent);
}
Tensor & pow__Tensor(Tensor & self, const Tensor & exponent) {
    return at::native::pow_(self, exponent);
}
Tensor & lerp__Scalar(Tensor & self, const Tensor & end, Scalar weight) {
    return at::native::lerp_cpu_scalar_(self, end, weight);
}
Tensor & lerp__Tensor(Tensor & self, const Tensor & end, const Tensor & weight) {
    return at::native::lerp_cpu_tensor_(self, end, weight);
}
Tensor & fmod__Scalar(Tensor & self, Scalar other) {
    return at::native::fmod_(self, other);
}
Tensor & fmod__Tensor(Tensor & self, const Tensor & other) {
    return at::native::fmod_(self, other);
}
Tensor & remainder__Scalar(Tensor & self, Scalar other) {
    return at::native::remainder_(self, other);
}
Tensor & remainder__Tensor(Tensor & self, const Tensor & other) {
    return at::native::remainder_(self, other);
}
Tensor & addbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
    return at::native::legacy::cpu::_th_addbmm_(self, batch1, batch2, beta, alpha);
}
Tensor & addbmm_out_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
    return at::native::addbmm_cpu_out(out, self, batch1, batch2, beta, alpha);
}
Tensor addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
    return at::native::addbmm_cpu(self, batch1, batch2, beta, alpha);
}
Tensor & diag_out_out(Tensor & out, const Tensor & self, int64_t diagonal) {
    return at::native::diag_cpu_out(out, self, diagonal);
}
Tensor & triu_out_out(Tensor & out, const Tensor & self, int64_t diagonal) {
    return at::native::triu_cpu_out(out, self, diagonal);
}
Tensor & tril_out_out(Tensor & out, const Tensor & self, int64_t diagonal) {
    return at::native::tril_cpu_out(out, self, diagonal);
}
Tensor tril_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) {
    return at::native::tril_indices_cpu(row, col, offset, options);
}
Tensor triu_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) {
    return at::native::triu_indices_cpu(row, col, offset, options);
}
Tensor trace(const Tensor & self) {
    return at::native::legacy::cpu::_th_trace(self);
}
Tensor & ne_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::ne_out(out, self, other);
}
Tensor ne_Scalar(const Tensor & self, Scalar other) {
    return at::native::ne(self, other);
}
Tensor & ne_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::ne_out(out, self, other);
}
Tensor ne_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::ne(self, other);
}
Tensor & eq_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::eq_out(out, self, other);
}
Tensor eq_Scalar(const Tensor & self, Scalar other) {
    return at::native::eq(self, other);
}
Tensor & eq_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::eq_out(out, self, other);
}
Tensor eq_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::eq(self, other);
}
Tensor & ge_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::ge_out(out, self, other);
}
Tensor ge_Scalar(const Tensor & self, Scalar other) {
    return at::native::ge(self, other);
}
Tensor & ge_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::ge_out(out, self, other);
}
Tensor ge_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::ge(self, other);
}
Tensor & le_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::le_out(out, self, other);
}
Tensor le_Scalar(const Tensor & self, Scalar other) {
    return at::native::le(self, other);
}
Tensor & le_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::le_out(out, self, other);
}
Tensor le_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::le(self, other);
}
Tensor & gt_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::gt_out(out, self, other);
}
Tensor gt_Scalar(const Tensor & self, Scalar other) {
    return at::native::gt(self, other);
}
Tensor & gt_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::gt_out(out, self, other);
}
Tensor gt_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::gt(self, other);
}
Tensor & lt_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::lt_out(out, self, other);
}
Tensor lt_Scalar(const Tensor & self, Scalar other) {
    return at::native::lt(self, other);
}
Tensor & lt_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::lt_out(out, self, other);
}
Tensor lt_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::lt(self, other);
}
Tensor & take_out_out(Tensor & out, const Tensor & self, const Tensor & index) {
    return at::native::legacy::cpu::_th_take_out(out, self, index);
}
Tensor take(const Tensor & self, const Tensor & index) {
    return at::native::legacy::cpu::_th_take(self, index);
}
Tensor & index_select_out_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index) {
    return at::native::index_select_out_cpu_(out, self, dim, index);
}
Tensor index_select(const Tensor & self, int64_t dim, const Tensor & index) {
    return at::native::index_select_cpu_(self, dim, index);
}
Tensor & masked_select_out_out(Tensor & out, const Tensor & self, const Tensor & mask) {
    return at::native::masked_select_out_cpu(out, self, mask);
}
Tensor masked_select(const Tensor & self, const Tensor & mask) {
    return at::native::masked_select_cpu(self, mask);
}
Tensor & nonzero_out_out(Tensor & out, const Tensor & self) {
    return at::native::legacy::cpu::_th_nonzero_out(out, self);
}
Tensor nonzero(const Tensor & self) {
    return at::native::legacy::cpu::_th_nonzero(self);
}
Tensor & gather_out_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) {
    return at::native::gather_out_cpu_cuda(out, self, dim, index, sparse_grad);
}
Tensor gather(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) {
    return at::native::gather(self, dim, index, sparse_grad);
}
std::tuple<Tensor &,Tensor &> lstsq_out_X(Tensor & X, Tensor & qr, const Tensor & self, const Tensor & A) {
    return at::native::legacy::cpu::_th_gels_out(X, qr, self, A);
}
std::tuple<Tensor,Tensor> lstsq(const Tensor & self, const Tensor & A) {
    return at::native::legacy::cpu::_th_gels(self, A);
}
std::tuple<Tensor,Tensor> _triangular_solve_helper(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {
    return at::native::_triangular_solve_helper_cpu(self, A, upper, transpose, unitriangular);
}
std::tuple<Tensor,Tensor> _symeig_helper(const Tensor & self, bool eigenvectors, bool upper) {
    return at::native::_symeig_helper_cpu(self, eigenvectors, upper);
}
std::tuple<Tensor &,Tensor &> eig_out_e(Tensor & e, Tensor & v, const Tensor & self, bool eigenvectors) {
    return at::native::legacy::cpu::_th_eig_out(e, v, self, eigenvectors);
}
std::tuple<Tensor,Tensor> eig(const Tensor & self, bool eigenvectors) {
    return at::native::legacy::cpu::_th_eig(self, eigenvectors);
}
std::tuple<Tensor,Tensor,Tensor> _svd_helper(const Tensor & self, bool some, bool compute_uv) {
    return at::native::_svd_helper_cpu(self, some, compute_uv);
}
Tensor _cholesky_helper(const Tensor & self, bool upper) {
    return at::native::_cholesky_helper_cpu(self, upper);
}
Tensor _cholesky_solve_helper(const Tensor & self, const Tensor & A, bool upper) {
    return at::native::_cholesky_solve_helper_cpu(self, A, upper);
}
std::tuple<Tensor,Tensor> _solve_helper(const Tensor & self, const Tensor & A) {
    return at::native::_solve_helper_cpu(self, A);
}
Tensor & cholesky_inverse_out_out(Tensor & out, const Tensor & self, bool upper) {
    return at::native::legacy::cpu::_th_potri_out(out, self, upper);
}
Tensor cholesky_inverse(const Tensor & self, bool upper) {
    return at::native::legacy::cpu::_th_potri(self, upper);
}
std::tuple<Tensor,Tensor> _qr_helper(const Tensor & self, bool some) {
    return at::native::_qr_helper_cpu(self, some);
}
std::tuple<Tensor &,Tensor &> geqrf_out_a(Tensor & a, Tensor & tau, const Tensor & self) {
    return at::native::legacy::cpu::_th_geqrf_out(a, tau, self);
}
std::tuple<Tensor,Tensor> geqrf(const Tensor & self) {
    return at::native::legacy::cpu::_th_geqrf(self);
}
Tensor & orgqr_out_out(Tensor & out, const Tensor & self, const Tensor & input2) {
    return at::native::legacy::cpu::_th_orgqr_out(out, self, input2);
}
Tensor orgqr(const Tensor & self, const Tensor & input2) {
    return at::native::legacy::cpu::_th_orgqr(self, input2);
}
Tensor & ormqr_out_out(Tensor & out, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) {
    return at::native::legacy::cpu::_th_ormqr_out(out, self, input2, input3, left, transpose);
}
Tensor ormqr(const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) {
    return at::native::legacy::cpu::_th_ormqr(self, input2, input3, left, transpose);
}
std::tuple<Tensor,Tensor,Tensor> _lu_with_info(const Tensor & self, bool pivot, bool check_errors) {
    return at::native::_lu_with_info_cpu(self, pivot, check_errors);
}
Tensor _lu_solve_helper(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {
    return at::native::_lu_solve_helper_cpu(self, LU_data, LU_pivots);
}
Tensor & multinomial_out_out(Tensor & out, const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator) {
    return at::native::multinomial_out(out, self, num_samples, replacement, generator);
}
Tensor multinomial(const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator) {
    return at::native::multinomial(self, num_samples, replacement, generator);
}
std::tuple<Tensor,Tensor> _multinomial_alias_setup(const Tensor & probs) {
    return at::native::legacy::cpu::_th_multinomial_alias_setup(probs);
}
Tensor _multinomial_alias_draw(const Tensor & J, const Tensor & q, int64_t num_samples, c10::optional<Generator> generator) {
    return at::native::legacy::cpu::_th_multinomial_alias_draw(J, q, num_samples, generator);
}
Tensor & lgamma_out_out(Tensor & out, const Tensor & self) {
    return at::native::_lgamma_out_cpu(out, self);
}
Tensor lgamma(const Tensor & self) {
    return at::native::lgamma(self);
}
Tensor erfinv(const Tensor & self) {
    return at::native::erfinv(self);
}
Tensor & erfinv_(Tensor & self) {
    return at::native::_erfinv__cpu(self);
}
Tensor & erfinv_out_out(Tensor & out, const Tensor & self) {
    return at::native::_erfinv_out_cpu(out, self);
}
Tensor & sign_out_out(Tensor & out, const Tensor & self) {
    return at::native::sign_out(out, self);
}
Tensor & lerp_out_Scalar_out(Tensor & out, const Tensor & self, const Tensor & end, Scalar weight) {
    return at::native::lerp_cpu_scalar_out(out, self, end, weight);
}
Tensor & lerp_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & end, const Tensor & weight) {
    return at::native::lerp_cpu_tensor_out(out, self, end, weight);
}
Tensor lerp_Scalar(const Tensor & self, const Tensor & end, Scalar weight) {
    return at::native::lerp_cpu_scalar(self, end, weight);
}
Tensor lerp_Tensor(const Tensor & self, const Tensor & end, const Tensor & weight) {
    return at::native::lerp_cpu_tensor(self, end, weight);
}
Tensor & histc_out_out(Tensor & out, const Tensor & self, int64_t bins, Scalar min, Scalar max) {
    return at::native::legacy::cpu::_th_histc_out(out, self, bins, min, max);
}
Tensor histc(const Tensor & self, int64_t bins, Scalar min, Scalar max) {
    return at::native::legacy::cpu::_th_histc(self, bins, min, max);
}
Tensor & fmod_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::fmod_out(out, self, other);
}
Tensor fmod_Scalar(const Tensor & self, Scalar other) {
    return at::native::fmod(self, other);
}
Tensor & fmod_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::fmod_out(out, self, other);
}
Tensor fmod_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::fmod(self, other);
}
Tensor & remainder_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    return at::native::remainder_out(out, self, other);
}
Tensor remainder_Scalar(const Tensor & self, Scalar other) {
    return at::native::remainder(self, other);
}
Tensor & remainder_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    return at::native::remainder_out(out, self, other);
}
Tensor remainder_Tensor(const Tensor & self, const Tensor & other) {
    return at::native::remainder(self, other);
}
Tensor min(const Tensor & self) {
    return at::native::min(self);
}
Tensor max(const Tensor & self) {
    return at::native::max(self);
}
Tensor median(const Tensor & self) {
    return at::native::median_cpu(self);
}
std::tuple<Tensor &,Tensor &> sort_out_values(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool descending) {
    return at::native::legacy::cpu::_th_sort_out(values, indices, self, dim, descending);
}
std::tuple<Tensor,Tensor> sort(const Tensor & self, int64_t dim, bool descending) {
    return at::native::legacy::cpu::_th_sort(self, dim, descending);
}
std::tuple<Tensor &,Tensor &> topk_out_values(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
    return at::native::topk_out_cpu(values, indices, self, k, dim, largest, sorted);
}
std::tuple<Tensor,Tensor> topk(const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
    return at::native::topk(self, k, dim, largest, sorted);
}
Tensor any(const Tensor & self) {
    return at::native::any(self);
}
Tensor & renorm_out_out(Tensor & out, const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) {
    return at::native::legacy::cpu::_th_renorm_out(out, self, p, dim, maxnorm);
}
Tensor renorm(const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) {
    return at::native::legacy::cpu::_th_renorm(self, p, dim, maxnorm);
}
Tensor unfold(const Tensor & self, int64_t dimension, int64_t size, int64_t step) {
    return at::native::unfold(self, dimension, size, step);
}
Tensor unfold_backward(const Tensor & grad_in, IntArrayRef input_sizes, int64_t dim, int64_t size, int64_t step) {
    return at::native::unfold_backward(grad_in, input_sizes, dim, size, step);
}
bool equal(const Tensor & self, const Tensor & other) {
    return at::native::cpu_equal(self, other);
}
Tensor & pow_out_Tensor_Tensor_out(Tensor & out, const Tensor & self, const Tensor & exponent) {
    return at::native::pow_out(out, self, exponent);
}
Tensor pow_Tensor_Tensor(const Tensor & self, const Tensor & exponent) {
    return at::native::pow(self, exponent);
}
Tensor & pow_out_Scalar_out(Tensor & out, Scalar self, const Tensor & exponent) {
    return at::native::pow_out(out, self, exponent);
}
Tensor pow_Scalar(Scalar self, const Tensor & exponent) {
    return at::native::pow(self, exponent);
}
Tensor _addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
    return at::native::legacy::cpu::_th_addr(self, vec1, vec2, beta, alpha);
}
Tensor & _addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
    return at::native::legacy::cpu::_th_addr_(self, vec1, vec2, beta, alpha);
}
Tensor & _addr_out_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
    return at::native::legacy::cpu::_th_addr_out(out, self, vec1, vec2, beta, alpha);
}
Tensor & _index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
    return at::native::legacy::cpu::_th_index_copy_(self, dim, index, source);
}
Tensor _cumsum(const Tensor & self, int64_t dim) {
    return at::native::_cumsum_cpu(self, dim);
}
Tensor & _cumsum_out_out(Tensor & out, const Tensor & self, int64_t dim) {
    return at::native::_cumsum_out_cpu(out, self, dim);
}
Tensor _cumprod(const Tensor & self, int64_t dim) {
    return at::native::_cumprod_cpu(self, dim);
}
Tensor & _cumprod_out_out(Tensor & out, const Tensor & self, int64_t dim) {
    return at::native::_cumprod_out_cpu(out, self, dim);
}
Tensor _var(const Tensor & self, bool unbiased) {
    return at::native::legacy::cpu::_th_var(self, unbiased);
}
Tensor _std(const Tensor & self, bool unbiased) {
    return at::native::legacy::cpu::_th_std(self, unbiased);
}
Tensor _cat(TensorList tensors, int64_t dim) {
    return at::native::_cat_cpu(tensors, dim);
}
Tensor & _cat_out_out(Tensor & out, TensorList tensors, int64_t dim) {
    return at::native::_cat_out_cpu(out, tensors, dim);
}
std::tuple<Tensor,Tensor> _mode(const Tensor & self, int64_t dim, bool keepdim) {
    return at::native::legacy::cpu::_th_mode(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> _mode_out_values(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {
    return at::native::legacy::cpu::_th_mode_out(values, indices, self, dim, keepdim);
}
Tensor bucketize_Tensor(const Tensor & self, const Tensor & boundaries, bool out_int32, bool right) {
    return at::native::bucketize_cpu(self, boundaries, out_int32, right);
}
Tensor & bucketize_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & boundaries, bool out_int32, bool right) {
    return at::native::bucketize_out_cpu(out, self, boundaries, out_int32, right);
}
Tensor bucketize_Scalar(Scalar self, const Tensor & boundaries, bool out_int32, bool right) {
    return at::native::bucketize_cpu(self, boundaries, out_int32, right);
}
Tensor searchsorted_Tensor(const Tensor & sorted_sequence, const Tensor & self, bool out_int32, bool right) {
    return at::native::searchsorted_cpu(sorted_sequence, self, out_int32, right);
}
Tensor & searchsorted_out_Tensor_out(Tensor & out, const Tensor & sorted_sequence, const Tensor & self, bool out_int32, bool right) {
    return at::native::searchsorted_out_cpu(out, sorted_sequence, self, out_int32, right);
}
Tensor searchsorted_Scalar(const Tensor & sorted_sequence, Scalar self, bool out_int32, bool right) {
    return at::native::searchsorted_cpu(sorted_sequence, self, out_int32, right);
}
Tensor & mse_loss_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    return at::native::mse_loss_backward_out(grad_input, grad_output, self, target, reduction);
}
Tensor mse_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    return at::native::mse_loss_backward(grad_output, self, target, reduction);
}
Tensor & l1_loss_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    return at::native::l1_loss_backward_out(grad_input, grad_output, self, target, reduction);
}
Tensor & multi_margin_loss_out_out(Tensor & out, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {
    return at::native::multi_margin_loss_cpu_out(out, self, target, p, margin, weight, reduction);
}
Tensor multi_margin_loss(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {
    return at::native::multi_margin_loss_cpu(self, target, p, margin, weight, reduction);
}
Tensor & multi_margin_loss_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {
    return at::native::multi_margin_loss_cpu_backward_out(grad_input, grad_output, self, target, p, margin, weight, reduction);
}
Tensor multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {
    return at::native::multi_margin_loss_cpu_backward(grad_output, self, target, p, margin, weight, reduction);
}
std::tuple<Tensor &,Tensor &> multilabel_margin_loss_forward_out_output(Tensor & output, Tensor & is_target, const Tensor & self, const Tensor & target, int64_t reduction) {
    return at::native::multilabel_margin_loss_forward_out_cpu(output, is_target, self, target, reduction);
}
std::tuple<Tensor,Tensor> multilabel_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) {
    return at::native::multilabel_margin_loss_forward_cpu(self, target, reduction);
}
Tensor & multilabel_margin_loss_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) {
    return at::native::multilabel_margin_loss_backward_cpu_out(grad_input, grad_output, self, target, reduction, is_target);
}
Tensor multilabel_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) {
    return at::native::multilabel_margin_loss_backward_cpu(grad_output, self, target, reduction, is_target);
}
std::tuple<Tensor &,Tensor &> nll_loss_forward_out_output(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    return at::native::nll_loss_forward_out_cpu(output, total_weight, self, target, weight, reduction, ignore_index);
}
std::tuple<Tensor,Tensor> nll_loss_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    return at::native::nll_loss_forward_cpu(self, target, weight, reduction, ignore_index);
}
Tensor & nll_loss_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
    return at::native::nll_loss_backward_out_cpu(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
Tensor nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
    return at::native::nll_loss_backward_cpu(grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out_output(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    return at::native::nll_loss2d_forward_out_cpu(output, total_weight, self, target, weight, reduction, ignore_index);
}
std::tuple<Tensor,Tensor> nll_loss2d_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    return at::native::nll_loss2d_forward_cpu(self, target, weight, reduction, ignore_index);
}
Tensor & nll_loss2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
    return at::native::nll_loss2d_backward_out_cpu(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
Tensor nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
    return at::native::nll_loss2d_backward_cpu(grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
Tensor & smooth_l1_loss_out_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
    return at::native::smooth_l1_loss_out(out, self, target, reduction);
}
Tensor & smooth_l1_loss_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    return at::native::smooth_l1_loss_backward_out(grad_input, grad_output, self, target, reduction);
}
Tensor & elu_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) {
    return at::native::elu_backward_out(grad_input, grad_output, alpha, scale, input_scale, output);
}
Tensor & glu_out_out(Tensor & out, const Tensor & self, int64_t dim) {
    return at::native::glu_out(out, self, dim);
}
Tensor glu(const Tensor & self, int64_t dim) {
    return at::native::glu(self, dim);
}
Tensor & glu_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, int64_t dim) {
    return at::native::glu_backward_out(grad_input, grad_output, self, dim);
}
Tensor glu_backward(const Tensor & grad_output, const Tensor & self, int64_t dim) {
    return at::native::glu_backward(grad_output, self, dim);
}
Tensor hardsigmoid(const Tensor & self) {
    return at::native::hardsigmoid(self);
}
Tensor hardsigmoid_backward(const Tensor & grad_output, const Tensor & self) {
    return at::native::hardsigmoid_backward(grad_output, self);
}
Tensor & hardtanh_out_out(Tensor & out, const Tensor & self, Scalar min_val, Scalar max_val) {
    return at::native::hardtanh_out(out, self, min_val, max_val);
}
Tensor hardtanh(const Tensor & self, Scalar min_val, Scalar max_val) {
    return at::native::hardtanh(self, min_val, max_val);
}
Tensor & hardtanh_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) {
    return at::native::hardtanh_backward_out(grad_input, grad_output, self, min_val, max_val);
}
Tensor & hardtanh_(Tensor & self, Scalar min_val, Scalar max_val) {
    return at::native::hardtanh_(self, min_val, max_val);
}
Tensor hardswish_backward(const Tensor & grad_output, const Tensor & self) {
    return at::native::hardswish_backward(grad_output, self);
}
Tensor & leaky_relu_out_out(Tensor & out, const Tensor & self, Scalar negative_slope) {
    return at::native::leaky_relu_out(out, self, negative_slope);
}
Tensor leaky_relu(const Tensor & self, Scalar negative_slope) {
    return at::native::leaky_relu(self, negative_slope);
}
Tensor & leaky_relu_(Tensor & self, Scalar negative_slope) {
    return at::native::leaky_relu_(self, negative_slope);
}
std::tuple<Tensor &,Tensor &> log_sigmoid_forward_out_output(Tensor & output, Tensor & buffer, const Tensor & self) {
    return at::native::log_sigmoid_forward_out_cpu(output, buffer, self);
}
std::tuple<Tensor,Tensor> log_sigmoid_forward(const Tensor & self) {
    return at::native::log_sigmoid_forward_cpu(self);
}
Tensor & log_sigmoid_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & buffer) {
    return at::native::log_sigmoid_backward_out_cpu(grad_input, grad_output, self, buffer);
}
Tensor log_sigmoid_backward(const Tensor & grad_output, const Tensor & self, const Tensor & buffer) {
    return at::native::log_sigmoid_backward_cpu(grad_output, self, buffer);
}
Tensor & rrelu_with_noise_out_out(Tensor & out, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
    return at::native::rrelu_with_noise_out_cpu(out, self, noise, lower, upper, training, generator);
}
Tensor rrelu_with_noise(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
    return at::native::rrelu_with_noise_cpu(self, noise, lower, upper, training, generator);
}
Tensor & rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
    return at::native::rrelu_with_noise_cpu_(self, noise, lower, upper, training, generator);
}
Tensor & softplus_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) {
    return at::native::softplus_backward_out(grad_input, grad_output, self, beta, threshold, output);
}
Tensor & softshrink_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar lambd) {
    return at::native::softshrink_backward_out(grad_input, grad_output, self, lambd);
}
Tensor & adaptive_avg_pool2d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {
    return at::native::adaptive_avg_pool2d_out_cpu(out, self, output_size);
}
Tensor _adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) {
    return at::native::adaptive_avg_pool2d_cpu(self, output_size);
}
Tensor _adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self) {
    return at::native::adaptive_avg_pool2d_backward_cpu(grad_output, self);
}
Tensor & adaptive_avg_pool3d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {
    return at::native::adaptive_avg_pool3d_out_cpu(out, self, output_size);
}
Tensor adaptive_avg_pool3d(const Tensor & self, IntArrayRef output_size) {
    return at::native::adaptive_avg_pool3d_cpu(self, output_size);
}
Tensor & adaptive_avg_pool3d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self) {
    return at::native::adaptive_avg_pool3d_backward_out_cpu(grad_input, grad_output, self);
}
Tensor adaptive_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self) {
    return at::native::adaptive_avg_pool3d_backward_cpu(grad_output, self);
}
std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_out_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) {
    return at::native::adaptive_max_pool2d_out_cpu(out, indices, self, output_size);
}
std::tuple<Tensor,Tensor> adaptive_max_pool2d(const Tensor & self, IntArrayRef output_size) {
    return at::native::adaptive_max_pool2d_cpu(self, output_size);
}
Tensor & adaptive_max_pool2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) {
    return at::native::adaptive_max_pool2d_backward_out_cpu(grad_input, grad_output, self, indices);
}
Tensor adaptive_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) {
    return at::native::adaptive_max_pool2d_backward_cpu(grad_output, self, indices);
}
std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_out_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) {
    return at::native::adaptive_max_pool3d_out_cpu(out, indices, self, output_size);
}
std::tuple<Tensor,Tensor> adaptive_max_pool3d(const Tensor & self, IntArrayRef output_size) {
    return at::native::adaptive_max_pool3d_cpu(self, output_size);
}
Tensor & adaptive_max_pool3d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) {
    return at::native::adaptive_max_pool3d_backward_out_cpu(grad_input, grad_output, self, indices);
}
Tensor adaptive_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) {
    return at::native::adaptive_max_pool3d_backward_cpu(grad_output, self, indices);
}
Tensor & avg_pool2d_out_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    return at::native::avg_pool2d_out_cpu(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    return at::native::avg_pool2d_cpu(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor & avg_pool2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    return at::native::avg_pool2d_backward_out_cpu(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    return at::native::avg_pool2d_backward_cpu(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor & avg_pool3d_out_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    return at::native::avg_pool3d_out_cpu(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    return at::native::avg_pool3d_cpu(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor & avg_pool3d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    return at::native::avg_pool3d_backward_out_cpu(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    return at::native::avg_pool3d_backward_cpu(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
std::tuple<Tensor &,Tensor &> fractional_max_pool2d_out_output(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {
    return at::native::fractional_max_pool2d_out_cpu(output, indices, self, kernel_size, output_size, random_samples);
}
std::tuple<Tensor,Tensor> fractional_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {
    return at::native::fractional_max_pool2d_cpu(self, kernel_size, output_size, random_samples);
}
Tensor & fractional_max_pool2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {
    return at::native::fractional_max_pool2d_backward_out_cpu(grad_input, grad_output, self, kernel_size, output_size, indices);
}
Tensor fractional_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {
    return at::native::fractional_max_pool2d_backward_cpu(grad_output, self, kernel_size, output_size, indices);
}
std::tuple<Tensor &,Tensor &> fractional_max_pool3d_out_output(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {
    return at::native::fractional_max_pool3d_out_cpu(output, indices, self, kernel_size, output_size, random_samples);
}
std::tuple<Tensor,Tensor> fractional_max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {
    return at::native::fractional_max_pool3d_cpu(self, kernel_size, output_size, random_samples);
}
Tensor & fractional_max_pool3d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {
    return at::native::fractional_max_pool3d_backward_out_cpu(grad_input, grad_output, self, kernel_size, output_size, indices);
}
Tensor fractional_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {
    return at::native::fractional_max_pool3d_backward_cpu(grad_output, self, kernel_size, output_size, indices);
}
std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_out_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
    return at::native::max_pool2d_with_indices_out_cpu(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);
}
std::tuple<Tensor,Tensor> max_pool2d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
    return at::native::max_pool2d_with_indices_cpu(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor & max_pool2d_with_indices_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
    return at::native::max_pool2d_with_indices_backward_out_cpu(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
Tensor max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
    return at::native::max_pool2d_with_indices_backward_cpu(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_out_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
    return at::native::max_pool3d_with_indices_out_cpu(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);
}
std::tuple<Tensor,Tensor> max_pool3d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
    return at::native::max_pool3d_with_indices_cpu(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor & max_pool3d_with_indices_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
    return at::native::max_pool3d_with_indices_backward_out_cpu(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
Tensor max_pool3d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
    return at::native::max_pool3d_with_indices_backward_cpu(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
Tensor & max_unpool2d_out_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size) {
    return at::native::max_unpooling2d_forward_out_cpu(out, self, indices, output_size);
}
Tensor max_unpool2d(const Tensor & self, const Tensor & indices, IntArrayRef output_size) {
    return at::native::max_unpooling2d_forward_cpu(self, indices, output_size);
}
Tensor & max_unpool2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) {
    return at::native::max_unpooling2d_backward_out_cpu(grad_input, grad_output, self, indices, output_size);
}
Tensor max_unpool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) {
    return at::native::max_unpooling2d_backward_cpu(grad_output, self, indices, output_size);
}
Tensor & max_unpool3d_out_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {
    return at::native::max_unpooling3d_forward_out_cpu(out, self, indices, output_size, stride, padding);
}
Tensor max_unpool3d(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {
    return at::native::max_unpooling3d_forward_cpu(self, indices, output_size, stride, padding);
}
Tensor & max_unpool3d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {
    return at::native::max_unpooling3d_backward_out_cpu(grad_input, grad_output, self, indices, output_size, stride, padding);
}
Tensor max_unpool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {
    return at::native::max_unpooling3d_backward_cpu(grad_output, self, indices, output_size, stride, padding);
}
Tensor & reflection_pad1d_out_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
    return at::native::reflection_pad1d_out_cpu(out, self, padding);
}
Tensor reflection_pad1d(const Tensor & self, IntArrayRef padding) {
    return at::native::reflection_pad1d_cpu(self, padding);
}
Tensor & reflection_pad1d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    return at::native::reflection_pad1d_backward_out_cpu(grad_input, grad_output, self, padding);
}
Tensor reflection_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    return at::native::reflection_pad1d_backward_cpu(grad_output, self, padding);
}
Tensor & reflection_pad2d_out_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
    return at::native::reflection_pad2d_out_cpu(out, self, padding);
}
Tensor reflection_pad2d(const Tensor & self, IntArrayRef padding) {
    return at::native::reflection_pad2d_cpu(self, padding);
}
Tensor & reflection_pad2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    return at::native::reflection_pad2d_backward_out_cpu(grad_input, grad_output, self, padding);
}
Tensor reflection_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    return at::native::reflection_pad2d_backward_cpu(grad_output, self, padding);
}
Tensor & replication_pad1d_out_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
    return at::native::replication_pad1d_out_cpu(out, self, padding);
}
Tensor replication_pad1d(const Tensor & self, IntArrayRef padding) {
    return at::native::replication_pad1d_cpu(self, padding);
}
Tensor & replication_pad1d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    return at::native::replication_pad1d_backward_out_cpu(grad_input, grad_output, self, padding);
}
Tensor replication_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    return at::native::replication_pad1d_backward_cpu(grad_output, self, padding);
}
Tensor & replication_pad2d_out_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
    return at::native::replication_pad2d_out_cpu(out, self, padding);
}
Tensor replication_pad2d(const Tensor & self, IntArrayRef padding) {
    return at::native::replication_pad2d_cpu(self, padding);
}
Tensor & replication_pad2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    return at::native::replication_pad2d_backward_out_cpu(grad_input, grad_output, self, padding);
}
Tensor replication_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    return at::native::replication_pad2d_backward_cpu(grad_output, self, padding);
}
Tensor & replication_pad3d_out_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
    return at::native::replication_pad3d_out_cpu(out, self, padding);
}
Tensor replication_pad3d(const Tensor & self, IntArrayRef padding) {
    return at::native::replication_pad3d_cpu(self, padding);
}
Tensor & replication_pad3d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    return at::native::replication_pad3d_backward_out_cpu(grad_input, grad_output, self, padding);
}
Tensor replication_pad3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    return at::native::replication_pad3d_backward_cpu(grad_output, self, padding);
}
Tensor & upsample_linear1d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales) {
    return at::native::upsample_linear1d_out_cpu(out, self, output_size, align_corners, scales);
}
Tensor upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales) {
    return at::native::upsample_linear1d_cpu(self, output_size, align_corners, scales);
}
Tensor & upsample_linear1d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales) {
    return at::native::upsample_linear1d_backward_out_cpu(grad_input, grad_output, output_size, input_size, align_corners, scales);
}
Tensor upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales) {
    return at::native::upsample_linear1d_backward_cpu(grad_output, output_size, input_size, align_corners, scales);
}
Tensor & upsample_bilinear2d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_bilinear2d_out_cpu(out, self, output_size, align_corners, scales_h, scales_w);
}
Tensor upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_bilinear2d_cpu(self, output_size, align_corners, scales_h, scales_w);
}
Tensor & upsample_bilinear2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_bilinear2d_backward_out_cpu(grad_input, grad_output, output_size, input_size, align_corners, scales_h, scales_w);
}
Tensor upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_bilinear2d_backward_cpu(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
}
Tensor & upsample_bicubic2d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_bicubic2d_out_cpu(out, self, output_size, align_corners, scales_h, scales_w);
}
Tensor upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_bicubic2d_cpu(self, output_size, align_corners, scales_h, scales_w);
}
Tensor & upsample_bicubic2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_bicubic2d_backward_out_cpu(grad_input, grad_output, output_size, input_size, align_corners, scales_h, scales_w);
}
Tensor upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_bicubic2d_backward_cpu(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
}
Tensor & upsample_trilinear3d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_trilinear3d_out_cpu(out, self, output_size, align_corners, scales_d, scales_h, scales_w);
}
Tensor upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_trilinear3d_cpu(self, output_size, align_corners, scales_d, scales_h, scales_w);
}
Tensor & upsample_trilinear3d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_trilinear3d_backward_out_cpu(grad_input, grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w);
}
Tensor upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_trilinear3d_backward_cpu(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w);
}
Tensor & upsample_nearest1d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales) {
    return at::native::upsample_nearest1d_out_cpu(out, self, output_size, scales);
}
Tensor upsample_nearest1d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales) {
    return at::native::upsample_nearest1d_cpu(self, output_size, scales);
}
Tensor & upsample_nearest1d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales) {
    return at::native::upsample_nearest1d_backward_out_cpu(grad_input, grad_output, output_size, input_size, scales);
}
Tensor upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales) {
    return at::native::upsample_nearest1d_backward_cpu(grad_output, output_size, input_size, scales);
}
Tensor & upsample_nearest2d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_nearest2d_out_cpu(out, self, output_size, scales_h, scales_w);
}
Tensor upsample_nearest2d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_nearest2d_cpu(self, output_size, scales_h, scales_w);
}
Tensor & upsample_nearest2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_nearest2d_backward_out_cpu(grad_input, grad_output, output_size, input_size, scales_h, scales_w);
}
Tensor upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_nearest2d_backward_cpu(grad_output, output_size, input_size, scales_h, scales_w);
}
Tensor & upsample_nearest3d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_nearest3d_out_cpu(out, self, output_size, scales_d, scales_h, scales_w);
}
Tensor upsample_nearest3d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_nearest3d_cpu(self, output_size, scales_d, scales_h, scales_w);
}
Tensor & upsample_nearest3d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_nearest3d_backward_out_cpu(grad_input, grad_output, output_size, input_size, scales_d, scales_h, scales_w);
}
Tensor upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    return at::native::upsample_nearest3d_backward_cpu(grad_output, output_size, input_size, scales_d, scales_h, scales_w);
}
Tensor & sigmoid_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) {
    return at::native::sigmoid_backward_out(grad_input, grad_output, output);
}
Tensor & tanh_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) {
    return at::native::tanh_backward_out(grad_input, grad_output, output);
}
Tensor & slow_conv_transpose2d_out_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
    return at::native::slow_conv_transpose2d_out_cpu(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
Tensor slow_conv_transpose2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
    return at::native::slow_conv_transpose2d_cpu(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose2d_backward_out_grad_output(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) {
    return at::native::slow_conv_transpose2d_backward_out_cpu(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones);
}
std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose2d_backward_output_mask(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) {
    return at::native::slow_conv_transpose2d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, output_mask);
}
Tensor & slow_conv_transpose3d_out_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
    return at::native::slow_conv_transpose3d_out_cpu(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
Tensor slow_conv_transpose3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
    return at::native::slow_conv_transpose3d_cpu(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose3d_backward_out_grad_output(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input) {
    return at::native::slow_conv_transpose3d_backward_out_cpu(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input);
}
std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose3d_backward_output_mask(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) {
    return at::native::slow_conv_transpose3d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, output_mask);
}
std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out_output(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    return at::native::slow_conv2d_forward_out_cpu(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding);
}
std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    return at::native::slow_conv2d_forward_cpu(self, weight, kernel_size, bias, stride, padding);
}
std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_backward_out_grad_input(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) {
    return at::native::slow_conv2d_backward_out_cpu(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input);
}
std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_backward_output_mask(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) {
    return at::native::slow_conv2d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
}
std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_forward_out_output(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    return at::native::slow_conv3d_forward_out_cpu(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding);
}
std::tuple<Tensor,Tensor,Tensor> slow_conv3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    return at::native::slow_conv3d_forward_cpu(self, weight, kernel_size, bias, stride, padding);
}
std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_backward_out_grad_input(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) {
    return at::native::slow_conv3d_backward_out_cpu(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input);
}
std::tuple<Tensor,Tensor,Tensor> slow_conv3d_backward_output_mask(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) {
    return at::native::slow_conv3d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
}
Tensor slow_conv_dilated2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
    return at::native::slow_conv_dilated2d_cpu(self, weight, kernel_size, bias, stride, padding, dilation);
}
std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask) {
    return at::native::slow_conv_dilated2d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
}
Tensor slow_conv_dilated3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
    return at::native::slow_conv_dilated3d_cpu(self, weight, kernel_size, bias, stride, padding, dilation);
}
std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask) {
    return at::native::slow_conv_dilated3d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
}
Tensor & col2im_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
    return at::native::col2im_out_cpu(out, self, output_size, kernel_size, dilation, padding, stride);
}
Tensor col2im(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
    return at::native::col2im_cpu(self, output_size, kernel_size, dilation, padding, stride);
}
Tensor & col2im_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
    return at::native::col2im_backward_out_cpu(grad_input, grad_output, kernel_size, dilation, padding, stride);
}
Tensor col2im_backward(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
    return at::native::col2im_backward_cpu(grad_output, kernel_size, dilation, padding, stride);
}
Tensor & im2col_out_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
    return at::native::im2col_out_cpu(out, self, kernel_size, dilation, padding, stride);
}
Tensor im2col(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
    return at::native::im2col_cpu(self, kernel_size, dilation, padding, stride);
}
Tensor & im2col_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
    return at::native::im2col_backward_out_cpu(grad_input, grad_output, input_size, kernel_size, dilation, padding, stride);
}
Tensor im2col_backward(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
    return at::native::im2col_backward_cpu(grad_output, input_size, kernel_size, dilation, padding, stride);
}
Tensor _test_optional_intlist(const Tensor & values, c10::optional<IntArrayRef> addends) {
    return at::native::_test_optional_intlist(values, addends);
}

}  // namespace CPUType

TORCH_LIBRARY_IMPL(aten, CPU, m) {
  m.impl("absolute",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::absolute)))
  );
  m.impl("absolute_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::absolute_))
  );
  m.impl("absolute.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::absolute_out_out))
  );
  m.impl("add.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::add_Tensor)))
  );
  m.impl("add_.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::add__Tensor))
  );
  m.impl("add.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::add_out_out))
  );
  m.impl("_addmv_impl_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_addmv_impl_))
  );
  m.impl("arange.start_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::arange_out_start_out))
  );
  m.impl("argmax",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::argmax)))
  );
  m.impl("argmin",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::argmin)))
  );
  m.impl("as_strided",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::as_strided)))
  );
  m.impl("baddbmm",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::baddbmm)))
  );
  m.impl("baddbmm_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::baddbmm_))
  );
  m.impl("baddbmm.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::baddbmm_out_out))
  );
  m.impl("binary_cross_entropy",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::binary_cross_entropy))
  );
  m.impl("binary_cross_entropy.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::binary_cross_entropy_out_out))
  );
  m.impl("binary_cross_entropy_backward",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::binary_cross_entropy_backward))
  );
  m.impl("binary_cross_entropy_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::binary_cross_entropy_backward_out_grad_input))
  );
  m.impl("bincount",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::bincount))
  );
  m.impl("bitwise_not.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::bitwise_not_out_out))
  );
  m.impl("logical_not.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::logical_not_out_out))
  );
  m.impl("logical_xor.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::logical_xor_out_out))
  );
  m.impl("logical_and.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::logical_and_out_out))
  );
  m.impl("logical_or.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::logical_or_out_out))
  );
  m.impl("bmm",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::bmm)))
  );
  m.impl("bmm.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::bmm_out_out))
  );
  m.impl("ceil.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::ceil_out_out))
  );
  m.impl("clamp",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::clamp)))
  );
  m.impl("_cummax_helper",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_cummax_helper))
  );
  m.impl("_cummin_helper",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_cummin_helper))
  );
  m.impl("_ctc_loss",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_ctc_loss)))
  );
  m.impl("_ctc_loss_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_ctc_loss_backward)))
  );
  m.impl("div.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::div_Tensor)))
  );
  m.impl("div_.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::div__Tensor))
  );
  m.impl("div.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::div_out_out))
  );
  m.impl("dot",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::dot)))
  );
  m.impl("embedding_dense_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::embedding_dense_backward)))
  );
  m.impl("embedding_renorm_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::embedding_renorm_))
  );
  m.impl("_embedding_bag_forward_only",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_embedding_bag_forward_only))
  );
  m.impl("_embedding_bag",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_embedding_bag))
  );
  m.impl("_embedding_bag_dense_backward",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_embedding_bag_dense_backward))
  );
  m.impl("_embedding_bag_per_sample_weights_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_embedding_bag_per_sample_weights_backward)))
  );
  m.impl("empty.memory_format",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::empty_memory_format)))
  );
  m.impl("_empty_affine_quantized",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_empty_affine_quantized)))
  );
  m.impl("_empty_per_channel_affine_quantized",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_empty_per_channel_affine_quantized)))
  );
  m.impl("empty_strided",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::empty_strided)))
  );
  m.impl("expm1.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::expm1_out_out))
  );
  m.impl("eye.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::eye_out_out))
  );
  m.impl("eye.m_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::eye_out_m_out))
  );
  m.impl("floor.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::floor_out_out))
  );
  m.impl("floor_divide",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::floor_divide)))
  );
  m.impl("floor_divide_.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::floor_divide__Tensor))
  );
  m.impl("floor_divide.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::floor_divide_out_out))
  );
  m.impl("from_file",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::from_file)))
  );
  m.impl("grid_sampler_2d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::grid_sampler_2d)))
  );
  m.impl("grid_sampler_2d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::grid_sampler_2d_backward)))
  );
  m.impl("grid_sampler_3d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::grid_sampler_3d)))
  );
  m.impl("grid_sampler_3d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::grid_sampler_3d_backward)))
  );
  m.impl("native_group_norm",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::native_group_norm))
  );
  m.impl("native_group_norm_backward",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::native_group_norm_backward))
  );
  m.impl("_fft_with_size",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_fft_with_size)))
  );
  m.impl("_inverse_helper",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_inverse_helper)))
  );
  m.impl("isnan",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::isnan)))
  );
  m.impl("kl_div_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::kl_div_backward)))
  );
  m.impl("kthvalue.values",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::kthvalue_out_values))
  );
  m.impl("native_layer_norm",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::native_layer_norm))
  );
  m.impl("native_layer_norm_backward",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::native_layer_norm_backward))
  );
  m.impl("linspace.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::linspace_out_out))
  );
  m.impl("log.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::log_out_out))
  );
  m.impl("log10.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::log10_out_out))
  );
  m.impl("log1p_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::log1p_))
  );
  m.impl("log1p.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::log1p_out_out))
  );
  m.impl("log2.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::log2_out_out))
  );
  m.impl("logspace.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::logspace_out_out))
  );
  m.impl("_log_softmax",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_log_softmax)))
  );
  m.impl("_log_softmax_backward_data",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_log_softmax_backward_data)))
  );
  m.impl("_logcumsumexp",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_logcumsumexp)))
  );
  m.impl("_logcumsumexp.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_logcumsumexp_out_out))
  );
  m.impl("mean",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::mean)))
  );
  m.impl("mean.dim",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::mean_dim)))
  );
  m.impl("mean.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::mean_out_out))
  );
  m.impl("mm",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::mm)))
  );
  m.impl("mm.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::mm_out_out))
  );
  m.impl("mul.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::mul_Tensor)))
  );
  m.impl("mul_.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::mul__Tensor))
  );
  m.impl("mul.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::mul_out_out))
  );
  m.impl("mv",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::mv)))
  );
  m.impl("narrow_copy",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::narrow_copy)))
  );
  m.impl("native_batch_norm",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::native_batch_norm))
  );
  m.impl("native_batch_norm_backward",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::native_batch_norm_backward))
  );
  m.impl("batch_norm_update_stats",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::batch_norm_update_stats))
  );
  m.impl("channel_shuffle",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::channel_shuffle)))
  );
  m.impl("randperm.generator_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::randperm_out_generator_out))
  );
  m.impl("range.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::range_out_out))
  );
  m.impl("neg.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::neg_out_out))
  );
  m.impl("repeat_interleave.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::repeat_interleave_Tensor)))
  );
  m.impl("round.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::round_out_out))
  );
  m.impl("relu",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::relu)))
  );
  m.impl("relu_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::relu_))
  );
  m.impl("prelu",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::prelu)))
  );
  m.impl("prelu_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::prelu_backward)))
  );
  m.impl("gelu",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::gelu)))
  );
  m.impl("gelu_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::gelu_backward)))
  );
  m.impl("rsqrt.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::rsqrt_out_out))
  );
  m.impl("sigmoid",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::sigmoid)))
  );
  m.impl("sigmoid_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::sigmoid_))
  );
  m.impl("sin.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::sin_out_out))
  );
  m.impl("_softmax",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_softmax)))
  );
  m.impl("_softmax_backward_data",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_softmax_backward_data)))
  );
  m.impl("sspaddmm.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::sspaddmm_out_out))
  );
  m.impl("tanh",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::tanh)))
  );
  m.impl("threshold",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::threshold)))
  );
  m.impl("threshold_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::threshold_))
  );
  m.impl("threshold.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::threshold_out_out))
  );
  m.impl("threshold_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::threshold_backward)))
  );
  m.impl("flip",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::flip)))
  );
  m.impl("roll",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::roll)))
  );
  m.impl("true_divide.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::true_divide_Tensor)))
  );
  m.impl("true_divide_.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::true_divide__Tensor))
  );
  m.impl("true_divide.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::true_divide_out_out))
  );
  m.impl("trunc.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::trunc_out_out))
  );
  m.impl("_unique",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_unique)))
  );
  m.impl("unique_dim",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::unique_dim)))
  );
  m.impl("unique_consecutive",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::unique_consecutive)))
  );
  m.impl("unique_dim_consecutive",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::unique_dim_consecutive)))
  );
  m.impl("_unique2",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_unique2)))
  );
  m.impl("_standard_gamma_grad",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_standard_gamma_grad)))
  );
  m.impl("_standard_gamma",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_standard_gamma))
  );
  m.impl("_dirichlet_grad",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_dirichlet_grad)))
  );
  m.impl("_sample_dirichlet",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_sample_dirichlet))
  );
  m.impl("poisson",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::poisson))
  );
  m.impl("binomial",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::binomial))
  );
  m.impl("clone",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::clone)))
  );
  m.impl("pow.Tensor_Scalar_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::pow_out_Tensor_Scalar_out))
  );
  m.impl("pow.Tensor_Scalar",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::pow_Tensor_Scalar)))
  );
  m.impl("zero_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::zero_))
  );
  m.impl("sub.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::sub_out_out))
  );
  m.impl("sub.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::sub_Tensor)))
  );
  m.impl("sub_.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::sub__Tensor))
  );
  m.impl("addmm.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::addmm_out_out))
  );
  m.impl("addmm",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::addmm)))
  );
  m.impl("addmm_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::addmm_))
  );
  m.impl("to_sparse.sparse_dim",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::to_sparse_sparse_dim)))
  );
  m.impl("to_sparse",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::to_sparse)))
  );
  m.impl("to_mkldnn",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::to_mkldnn)))
  );
  m.impl("quantize_per_tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::quantize_per_tensor)))
  );
  m.impl("quantize_per_tensor.tensors",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::quantize_per_tensor_tensors)))
  );
  m.impl("quantize_per_channel",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::quantize_per_channel)))
  );
  m.impl("_make_per_tensor_quantized_tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_make_per_tensor_quantized_tensor)))
  );
  m.impl("_make_per_channel_quantized_tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_make_per_channel_quantized_tensor)))
  );
  m.impl("_local_scalar_dense",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_local_scalar_dense)))
  );
  m.impl("set_.source_Storage",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::set__source_Storage))
  );
  m.impl("set_.source_Storage_storage_offset",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::set__source_Storage_storage_offset))
  );
  m.impl("set_.source_Tensor",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::set__source_Tensor))
  );
  m.impl("set_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::set_))
  );
  m.impl("is_set_to",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::is_set_to)))
  );
  m.impl("masked_fill_.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::masked_fill__Scalar))
  );
  m.impl("masked_fill_.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::masked_fill__Tensor))
  );
  m.impl("masked_scatter_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::masked_scatter_))
  );
  m.impl("view",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::view)))
  );
  m.impl("put_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::put_))
  );
  m.impl("index_add_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::index_add_))
  );
  m.impl("index_fill_.int_Scalar",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::index_fill__int_Scalar))
  );
  m.impl("index_fill_.int_Tensor",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::index_fill__int_Tensor))
  );
  m.impl("scatter_.src",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::scatter__src))
  );
  m.impl("scatter_.value",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::scatter__value))
  );
  m.impl("scatter_.reduce",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::scatter__reduce))
  );
  m.impl("scatter_.value_reduce",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::scatter__value_reduce))
  );
  m.impl("scatter_add_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::scatter_add_))
  );
  m.impl("bitwise_and.Tensor_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::bitwise_and_out_Tensor_out))
  );
  m.impl("bitwise_and.Scalar_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::bitwise_and_out_Scalar_out))
  );
  m.impl("bitwise_or.Tensor_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::bitwise_or_out_Tensor_out))
  );
  m.impl("bitwise_or.Scalar_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::bitwise_or_out_Scalar_out))
  );
  m.impl("bitwise_xor.Tensor_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::bitwise_xor_out_Tensor_out))
  );
  m.impl("bitwise_xor.Scalar_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::bitwise_xor_out_Scalar_out))
  );
  m.impl("__lshift__.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::__lshift___Scalar)))
  );
  m.impl("__lshift__.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::__lshift___Tensor)))
  );
  m.impl("__ilshift__.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::__ilshift___Scalar))
  );
  m.impl("__ilshift__.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::__ilshift___Tensor))
  );
  m.impl("__rshift__.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::__rshift___Scalar)))
  );
  m.impl("__rshift__.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::__rshift___Tensor)))
  );
  m.impl("__irshift__.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::__irshift___Scalar))
  );
  m.impl("__irshift__.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::__irshift___Tensor))
  );
  m.impl("lgamma_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::lgamma_))
  );
  m.impl("tril_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::tril_))
  );
  m.impl("triu_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::triu_))
  );
  m.impl("renorm_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::renorm_))
  );
  m.impl("pow_.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::pow__Scalar))
  );
  m.impl("pow_.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::pow__Tensor))
  );
  m.impl("lerp_.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::lerp__Scalar))
  );
  m.impl("lerp_.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::lerp__Tensor))
  );
  m.impl("fmod_.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::fmod__Scalar))
  );
  m.impl("fmod_.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::fmod__Tensor))
  );
  m.impl("remainder_.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::remainder__Scalar))
  );
  m.impl("remainder_.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::remainder__Tensor))
  );
  m.impl("addbmm_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::addbmm_))
  );
  m.impl("addbmm.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::addbmm_out_out))
  );
  m.impl("addbmm",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::addbmm)))
  );
  m.impl("diag.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::diag_out_out))
  );
  m.impl("triu.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::triu_out_out))
  );
  m.impl("tril.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::tril_out_out))
  );
  m.impl("tril_indices",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::tril_indices)))
  );
  m.impl("triu_indices",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::triu_indices)))
  );
  m.impl("trace",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::trace)))
  );
  m.impl("ne.Scalar_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::ne_out_Scalar_out))
  );
  m.impl("ne.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::ne_Scalar)))
  );
  m.impl("ne.Tensor_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::ne_out_Tensor_out))
  );
  m.impl("ne.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::ne_Tensor)))
  );
  m.impl("eq.Scalar_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::eq_out_Scalar_out))
  );
  m.impl("eq.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::eq_Scalar)))
  );
  m.impl("eq.Tensor_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::eq_out_Tensor_out))
  );
  m.impl("eq.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::eq_Tensor)))
  );
  m.impl("ge.Scalar_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::ge_out_Scalar_out))
  );
  m.impl("ge.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::ge_Scalar)))
  );
  m.impl("ge.Tensor_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::ge_out_Tensor_out))
  );
  m.impl("ge.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::ge_Tensor)))
  );
  m.impl("le.Scalar_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::le_out_Scalar_out))
  );
  m.impl("le.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::le_Scalar)))
  );
  m.impl("le.Tensor_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::le_out_Tensor_out))
  );
  m.impl("le.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::le_Tensor)))
  );
  m.impl("gt.Scalar_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::gt_out_Scalar_out))
  );
  m.impl("gt.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::gt_Scalar)))
  );
  m.impl("gt.Tensor_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::gt_out_Tensor_out))
  );
  m.impl("gt.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::gt_Tensor)))
  );
  m.impl("lt.Scalar_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::lt_out_Scalar_out))
  );
  m.impl("lt.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::lt_Scalar)))
  );
  m.impl("lt.Tensor_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::lt_out_Tensor_out))
  );
  m.impl("lt.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::lt_Tensor)))
  );
  m.impl("take.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::take_out_out))
  );
  m.impl("take",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::take)))
  );
  m.impl("index_select.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::index_select_out_out))
  );
  m.impl("index_select",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::index_select)))
  );
  m.impl("masked_select.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::masked_select_out_out))
  );
  m.impl("masked_select",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::masked_select)))
  );
  m.impl("nonzero.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::nonzero_out_out))
  );
  m.impl("nonzero",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::nonzero)))
  );
  m.impl("gather.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::gather_out_out))
  );
  m.impl("gather",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::gather)))
  );
  m.impl("lstsq.X",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::lstsq_out_X))
  );
  m.impl("lstsq",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::lstsq)))
  );
  m.impl("_triangular_solve_helper",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_triangular_solve_helper)))
  );
  m.impl("_symeig_helper",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_symeig_helper)))
  );
  m.impl("eig.e",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::eig_out_e))
  );
  m.impl("eig",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::eig)))
  );
  m.impl("_svd_helper",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_svd_helper)))
  );
  m.impl("_cholesky_helper",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_cholesky_helper)))
  );
  m.impl("_cholesky_solve_helper",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_cholesky_solve_helper)))
  );
  m.impl("_solve_helper",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_solve_helper)))
  );
  m.impl("cholesky_inverse.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::cholesky_inverse_out_out))
  );
  m.impl("cholesky_inverse",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::cholesky_inverse)))
  );
  m.impl("_qr_helper",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_qr_helper)))
  );
  m.impl("geqrf.a",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::geqrf_out_a))
  );
  m.impl("geqrf",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::geqrf)))
  );
  m.impl("orgqr.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::orgqr_out_out))
  );
  m.impl("orgqr",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::orgqr)))
  );
  m.impl("ormqr.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::ormqr_out_out))
  );
  m.impl("ormqr",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::ormqr)))
  );
  m.impl("_lu_with_info",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_lu_with_info)))
  );
  m.impl("_lu_solve_helper",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_lu_solve_helper)))
  );
  m.impl("multinomial.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::multinomial_out_out))
  );
  m.impl("multinomial",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::multinomial))
  );
  m.impl("_multinomial_alias_setup",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_multinomial_alias_setup)))
  );
  m.impl("_multinomial_alias_draw",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_multinomial_alias_draw))
  );
  m.impl("lgamma.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::lgamma_out_out))
  );
  m.impl("lgamma",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::lgamma)))
  );
  m.impl("erfinv",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::erfinv)))
  );
  m.impl("erfinv_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::erfinv_))
  );
  m.impl("erfinv.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::erfinv_out_out))
  );
  m.impl("sign.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::sign_out_out))
  );
  m.impl("lerp.Scalar_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::lerp_out_Scalar_out))
  );
  m.impl("lerp.Tensor_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::lerp_out_Tensor_out))
  );
  m.impl("lerp.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::lerp_Scalar)))
  );
  m.impl("lerp.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::lerp_Tensor)))
  );
  m.impl("histc.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::histc_out_out))
  );
  m.impl("histc",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::histc)))
  );
  m.impl("fmod.Scalar_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::fmod_out_Scalar_out))
  );
  m.impl("fmod.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::fmod_Scalar)))
  );
  m.impl("fmod.Tensor_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::fmod_out_Tensor_out))
  );
  m.impl("fmod.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::fmod_Tensor)))
  );
  m.impl("remainder.Scalar_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::remainder_out_Scalar_out))
  );
  m.impl("remainder.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::remainder_Scalar)))
  );
  m.impl("remainder.Tensor_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::remainder_out_Tensor_out))
  );
  m.impl("remainder.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::remainder_Tensor)))
  );
  m.impl("min",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::min)))
  );
  m.impl("max",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::max)))
  );
  m.impl("median",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::median)))
  );
  m.impl("sort.values",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::sort_out_values))
  );
  m.impl("sort",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::sort)))
  );
  m.impl("topk.values",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::topk_out_values))
  );
  m.impl("topk",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::topk)))
  );
  m.impl("any",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::any)))
  );
  m.impl("renorm.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::renorm_out_out))
  );
  m.impl("renorm",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::renorm)))
  );
  m.impl("unfold",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::unfold)))
  );
  m.impl("unfold_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::unfold_backward)))
  );
  m.impl("equal",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::equal)))
  );
  m.impl("pow.Tensor_Tensor_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::pow_out_Tensor_Tensor_out))
  );
  m.impl("pow.Tensor_Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::pow_Tensor_Tensor)))
  );
  m.impl("pow.Scalar_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::pow_out_Scalar_out))
  );
  m.impl("pow.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::pow_Scalar)))
  );
  m.impl("_addr",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_addr)))
  );
  m.impl("_addr_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_addr_))
  );
  m.impl("_addr.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_addr_out_out))
  );
  m.impl("_index_copy_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_index_copy_))
  );
  m.impl("_cumsum",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_cumsum)))
  );
  m.impl("_cumsum.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_cumsum_out_out))
  );
  m.impl("_cumprod",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_cumprod)))
  );
  m.impl("_cumprod.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_cumprod_out_out))
  );
  m.impl("_var",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_var)))
  );
  m.impl("_std",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_std)))
  );
  m.impl("_cat",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_cat)))
  );
  m.impl("_cat.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_cat_out_out))
  );
  m.impl("_mode",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_mode)))
  );
  m.impl("_mode.values",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_mode_out_values))
  );
  m.impl("bucketize.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::bucketize_Tensor)))
  );
  m.impl("bucketize.Tensor_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::bucketize_out_Tensor_out))
  );
  m.impl("bucketize.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::bucketize_Scalar)))
  );
  m.impl("searchsorted.Tensor",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::searchsorted_Tensor)))
  );
  m.impl("searchsorted.Tensor_out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::searchsorted_out_Tensor_out))
  );
  m.impl("searchsorted.Scalar",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::searchsorted_Scalar)))
  );
  m.impl("mse_loss_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::mse_loss_backward_out_grad_input))
  );
  m.impl("mse_loss_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::mse_loss_backward)))
  );
  m.impl("l1_loss_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::l1_loss_backward_out_grad_input))
  );
  m.impl("multi_margin_loss.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::multi_margin_loss_out_out))
  );
  m.impl("multi_margin_loss",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::multi_margin_loss))
  );
  m.impl("multi_margin_loss_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::multi_margin_loss_backward_out_grad_input))
  );
  m.impl("multi_margin_loss_backward",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::multi_margin_loss_backward))
  );
  m.impl("multilabel_margin_loss_forward.output",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::multilabel_margin_loss_forward_out_output))
  );
  m.impl("multilabel_margin_loss_forward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::multilabel_margin_loss_forward)))
  );
  m.impl("multilabel_margin_loss_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::multilabel_margin_loss_backward_out_grad_input))
  );
  m.impl("multilabel_margin_loss_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::multilabel_margin_loss_backward)))
  );
  m.impl("nll_loss_forward.output",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::nll_loss_forward_out_output))
  );
  m.impl("nll_loss_forward",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::nll_loss_forward))
  );
  m.impl("nll_loss_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::nll_loss_backward_out_grad_input))
  );
  m.impl("nll_loss_backward",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::nll_loss_backward))
  );
  m.impl("nll_loss2d_forward.output",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::nll_loss2d_forward_out_output))
  );
  m.impl("nll_loss2d_forward",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::nll_loss2d_forward))
  );
  m.impl("nll_loss2d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::nll_loss2d_backward_out_grad_input))
  );
  m.impl("nll_loss2d_backward",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::nll_loss2d_backward))
  );
  m.impl("smooth_l1_loss.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::smooth_l1_loss_out_out))
  );
  m.impl("smooth_l1_loss_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::smooth_l1_loss_backward_out_grad_input))
  );
  m.impl("elu_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::elu_backward_out_grad_input))
  );
  m.impl("glu.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::glu_out_out))
  );
  m.impl("glu",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::glu)))
  );
  m.impl("glu_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::glu_backward_out_grad_input))
  );
  m.impl("glu_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::glu_backward)))
  );
  m.impl("hardsigmoid",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::hardsigmoid)))
  );
  m.impl("hardsigmoid_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::hardsigmoid_backward)))
  );
  m.impl("hardtanh.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::hardtanh_out_out))
  );
  m.impl("hardtanh",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::hardtanh)))
  );
  m.impl("hardtanh_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::hardtanh_backward_out_grad_input))
  );
  m.impl("hardtanh_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::hardtanh_))
  );
  m.impl("hardswish_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::hardswish_backward)))
  );
  m.impl("leaky_relu.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::leaky_relu_out_out))
  );
  m.impl("leaky_relu",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::leaky_relu)))
  );
  m.impl("leaky_relu_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::leaky_relu_))
  );
  m.impl("log_sigmoid_forward.output",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::log_sigmoid_forward_out_output))
  );
  m.impl("log_sigmoid_forward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::log_sigmoid_forward)))
  );
  m.impl("log_sigmoid_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::log_sigmoid_backward_out_grad_input))
  );
  m.impl("log_sigmoid_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::log_sigmoid_backward)))
  );
  m.impl("rrelu_with_noise.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::rrelu_with_noise_out_out))
  );
  m.impl("rrelu_with_noise",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::rrelu_with_noise))
  );
  m.impl("rrelu_with_noise_",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::rrelu_with_noise_))
  );
  m.impl("softplus_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::softplus_backward_out_grad_input))
  );
  m.impl("softshrink_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::softshrink_backward_out_grad_input))
  );
  m.impl("adaptive_avg_pool2d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::adaptive_avg_pool2d_out_out))
  );
  m.impl("_adaptive_avg_pool2d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_adaptive_avg_pool2d)))
  );
  m.impl("_adaptive_avg_pool2d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::_adaptive_avg_pool2d_backward)))
  );
  m.impl("adaptive_avg_pool3d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::adaptive_avg_pool3d_out_out))
  );
  m.impl("adaptive_avg_pool3d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::adaptive_avg_pool3d)))
  );
  m.impl("adaptive_avg_pool3d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::adaptive_avg_pool3d_backward_out_grad_input))
  );
  m.impl("adaptive_avg_pool3d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::adaptive_avg_pool3d_backward)))
  );
  m.impl("adaptive_max_pool2d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::adaptive_max_pool2d_out_out))
  );
  m.impl("adaptive_max_pool2d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::adaptive_max_pool2d)))
  );
  m.impl("adaptive_max_pool2d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::adaptive_max_pool2d_backward_out_grad_input))
  );
  m.impl("adaptive_max_pool2d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::adaptive_max_pool2d_backward)))
  );
  m.impl("adaptive_max_pool3d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::adaptive_max_pool3d_out_out))
  );
  m.impl("adaptive_max_pool3d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::adaptive_max_pool3d)))
  );
  m.impl("adaptive_max_pool3d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::adaptive_max_pool3d_backward_out_grad_input))
  );
  m.impl("adaptive_max_pool3d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::adaptive_max_pool3d_backward)))
  );
  m.impl("avg_pool2d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::avg_pool2d_out_out))
  );
  m.impl("avg_pool2d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::avg_pool2d)))
  );
  m.impl("avg_pool2d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::avg_pool2d_backward_out_grad_input))
  );
  m.impl("avg_pool2d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::avg_pool2d_backward)))
  );
  m.impl("avg_pool3d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::avg_pool3d_out_out))
  );
  m.impl("avg_pool3d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::avg_pool3d)))
  );
  m.impl("avg_pool3d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::avg_pool3d_backward_out_grad_input))
  );
  m.impl("avg_pool3d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::avg_pool3d_backward)))
  );
  m.impl("fractional_max_pool2d.output",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::fractional_max_pool2d_out_output))
  );
  m.impl("fractional_max_pool2d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::fractional_max_pool2d)))
  );
  m.impl("fractional_max_pool2d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::fractional_max_pool2d_backward_out_grad_input))
  );
  m.impl("fractional_max_pool2d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::fractional_max_pool2d_backward)))
  );
  m.impl("fractional_max_pool3d.output",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::fractional_max_pool3d_out_output))
  );
  m.impl("fractional_max_pool3d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::fractional_max_pool3d)))
  );
  m.impl("fractional_max_pool3d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::fractional_max_pool3d_backward_out_grad_input))
  );
  m.impl("fractional_max_pool3d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::fractional_max_pool3d_backward)))
  );
  m.impl("max_pool2d_with_indices.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::max_pool2d_with_indices_out_out))
  );
  m.impl("max_pool2d_with_indices",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::max_pool2d_with_indices)))
  );
  m.impl("max_pool2d_with_indices_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::max_pool2d_with_indices_backward_out_grad_input))
  );
  m.impl("max_pool2d_with_indices_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::max_pool2d_with_indices_backward)))
  );
  m.impl("max_pool3d_with_indices.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::max_pool3d_with_indices_out_out))
  );
  m.impl("max_pool3d_with_indices",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::max_pool3d_with_indices)))
  );
  m.impl("max_pool3d_with_indices_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::max_pool3d_with_indices_backward_out_grad_input))
  );
  m.impl("max_pool3d_with_indices_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::max_pool3d_with_indices_backward)))
  );
  m.impl("max_unpool2d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::max_unpool2d_out_out))
  );
  m.impl("max_unpool2d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::max_unpool2d)))
  );
  m.impl("max_unpool2d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::max_unpool2d_backward_out_grad_input))
  );
  m.impl("max_unpool2d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::max_unpool2d_backward)))
  );
  m.impl("max_unpool3d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::max_unpool3d_out_out))
  );
  m.impl("max_unpool3d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::max_unpool3d)))
  );
  m.impl("max_unpool3d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::max_unpool3d_backward_out_grad_input))
  );
  m.impl("max_unpool3d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::max_unpool3d_backward)))
  );
  m.impl("reflection_pad1d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::reflection_pad1d_out_out))
  );
  m.impl("reflection_pad1d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::reflection_pad1d)))
  );
  m.impl("reflection_pad1d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::reflection_pad1d_backward_out_grad_input))
  );
  m.impl("reflection_pad1d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::reflection_pad1d_backward)))
  );
  m.impl("reflection_pad2d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::reflection_pad2d_out_out))
  );
  m.impl("reflection_pad2d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::reflection_pad2d)))
  );
  m.impl("reflection_pad2d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::reflection_pad2d_backward_out_grad_input))
  );
  m.impl("reflection_pad2d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::reflection_pad2d_backward)))
  );
  m.impl("replication_pad1d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::replication_pad1d_out_out))
  );
  m.impl("replication_pad1d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::replication_pad1d)))
  );
  m.impl("replication_pad1d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::replication_pad1d_backward_out_grad_input))
  );
  m.impl("replication_pad1d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::replication_pad1d_backward)))
  );
  m.impl("replication_pad2d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::replication_pad2d_out_out))
  );
  m.impl("replication_pad2d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::replication_pad2d)))
  );
  m.impl("replication_pad2d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::replication_pad2d_backward_out_grad_input))
  );
  m.impl("replication_pad2d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::replication_pad2d_backward)))
  );
  m.impl("replication_pad3d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::replication_pad3d_out_out))
  );
  m.impl("replication_pad3d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::replication_pad3d)))
  );
  m.impl("replication_pad3d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::replication_pad3d_backward_out_grad_input))
  );
  m.impl("replication_pad3d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::replication_pad3d_backward)))
  );
  m.impl("upsample_linear1d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::upsample_linear1d_out_out))
  );
  m.impl("upsample_linear1d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::upsample_linear1d)))
  );
  m.impl("upsample_linear1d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::upsample_linear1d_backward_out_grad_input))
  );
  m.impl("upsample_linear1d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::upsample_linear1d_backward)))
  );
  m.impl("upsample_bilinear2d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::upsample_bilinear2d_out_out))
  );
  m.impl("upsample_bilinear2d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::upsample_bilinear2d)))
  );
  m.impl("upsample_bilinear2d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::upsample_bilinear2d_backward_out_grad_input))
  );
  m.impl("upsample_bilinear2d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::upsample_bilinear2d_backward)))
  );
  m.impl("upsample_bicubic2d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::upsample_bicubic2d_out_out))
  );
  m.impl("upsample_bicubic2d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::upsample_bicubic2d)))
  );
  m.impl("upsample_bicubic2d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::upsample_bicubic2d_backward_out_grad_input))
  );
  m.impl("upsample_bicubic2d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::upsample_bicubic2d_backward)))
  );
  m.impl("upsample_trilinear3d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::upsample_trilinear3d_out_out))
  );
  m.impl("upsample_trilinear3d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::upsample_trilinear3d)))
  );
  m.impl("upsample_trilinear3d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::upsample_trilinear3d_backward_out_grad_input))
  );
  m.impl("upsample_trilinear3d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::upsample_trilinear3d_backward)))
  );
  m.impl("upsample_nearest1d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::upsample_nearest1d_out_out))
  );
  m.impl("upsample_nearest1d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::upsample_nearest1d)))
  );
  m.impl("upsample_nearest1d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::upsample_nearest1d_backward_out_grad_input))
  );
  m.impl("upsample_nearest1d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::upsample_nearest1d_backward)))
  );
  m.impl("upsample_nearest2d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::upsample_nearest2d_out_out))
  );
  m.impl("upsample_nearest2d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::upsample_nearest2d)))
  );
  m.impl("upsample_nearest2d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::upsample_nearest2d_backward_out_grad_input))
  );
  m.impl("upsample_nearest2d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::upsample_nearest2d_backward)))
  );
  m.impl("upsample_nearest3d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::upsample_nearest3d_out_out))
  );
  m.impl("upsample_nearest3d",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::upsample_nearest3d)))
  );
  m.impl("upsample_nearest3d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::upsample_nearest3d_backward_out_grad_input))
  );
  m.impl("upsample_nearest3d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::upsample_nearest3d_backward)))
  );
  m.impl("sigmoid_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::sigmoid_backward_out_grad_input))
  );
  m.impl("tanh_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::tanh_backward_out_grad_input))
  );
  m.impl("slow_conv_transpose2d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::slow_conv_transpose2d_out_out))
  );
  m.impl("slow_conv_transpose2d",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::slow_conv_transpose2d))
  );
  m.impl("slow_conv_transpose2d_backward.grad_output",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::slow_conv_transpose2d_backward_out_grad_output))
  );
  m.impl("slow_conv_transpose2d_backward.output_mask",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::slow_conv_transpose2d_backward_output_mask)))
  );
  m.impl("slow_conv_transpose3d.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::slow_conv_transpose3d_out_out))
  );
  m.impl("slow_conv_transpose3d",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::slow_conv_transpose3d))
  );
  m.impl("slow_conv_transpose3d_backward.grad_output",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::slow_conv_transpose3d_backward_out_grad_output))
  );
  m.impl("slow_conv_transpose3d_backward.output_mask",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::slow_conv_transpose3d_backward_output_mask)))
  );
  m.impl("thnn_conv2d_forward.output",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::thnn_conv2d_forward_out_output))
  );
  m.impl("thnn_conv2d_forward",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::thnn_conv2d_forward))
  );
  m.impl("thnn_conv2d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::thnn_conv2d_backward_out_grad_input))
  );
  m.impl("thnn_conv2d_backward.output_mask",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::thnn_conv2d_backward_output_mask)))
  );
  m.impl("slow_conv3d_forward.output",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::slow_conv3d_forward_out_output))
  );
  m.impl("slow_conv3d_forward",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::slow_conv3d_forward))
  );
  m.impl("slow_conv3d_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::slow_conv3d_backward_out_grad_input))
  );
  m.impl("slow_conv3d_backward.output_mask",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::slow_conv3d_backward_output_mask)))
  );
  m.impl("slow_conv_dilated2d",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::slow_conv_dilated2d))
  );
  m.impl("slow_conv_dilated2d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::slow_conv_dilated2d_backward)))
  );
  m.impl("slow_conv_dilated3d",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::slow_conv_dilated3d))
  );
  m.impl("slow_conv_dilated3d_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::slow_conv_dilated3d_backward)))
  );
  m.impl("col2im.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::col2im_out_out))
  );
  m.impl("col2im",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::col2im)))
  );
  m.impl("col2im_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::col2im_backward_out_grad_input))
  );
  m.impl("col2im_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::col2im_backward)))
  );
  m.impl("im2col.out",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::im2col_out_out))
  );
  m.impl("im2col",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::im2col)))
  );
  m.impl("im2col_backward.grad_input",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::im2col_backward_out_grad_input))
  );
  m.impl("im2col_backward",
         torch::dispatch(DispatchKey::CPU,
                         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(CPUType::im2col_backward)))
  );
  m.impl("_test_optional_intlist",
         torch::dispatch(DispatchKey::CPU,
                         torch::CppFunction::makeUnboxedOnly(&CPUType::_test_optional_intlist))
  );
}

} // namespace at
