#include <ATen/TypeDefault.h>

// @generated by aten/src/ATen/gen.py from TypeDefault.cpp

#include <ATen/DeviceGuard.h>
#include <ATen/ExpandUtils.h>
#include <ATen/Functions.h>
#include <ATen/NamedTensorUtils.h>
#include <ATen/NativeFunctions.h>
#include <c10/core/Scalar.h>
#include <c10/core/Storage.h>
#include <ATen/Tensor.h>
#include <c10/core/TensorOptions.h>
#include <ATen/DeviceGuard.h>
#include <ATen/SparseTensorUtils.h>
#include <ATen/core/op_registration/hacky_wrapper_for_legacy_signatures.h>
#include <torch/library.h>

namespace {
static const char* named_tensors_unsupported_error =
  " is not yet supported with named tensors. Please drop names via "
  "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
  "and set names on the result of the operation.";
}

namespace at {
namespace TypeDefault {

Tensor _cast_Byte(const Tensor & self, bool non_blocking) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Byte(self, non_blocking);
}
Tensor _cast_Char(const Tensor & self, bool non_blocking) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Char(self, non_blocking);
}
Tensor _cast_Double(const Tensor & self, bool non_blocking) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Double(self, non_blocking);
}
Tensor _cast_Float(const Tensor & self, bool non_blocking) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Float(self, non_blocking);
}
Tensor _cast_Int(const Tensor & self, bool non_blocking) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Int(self, non_blocking);
}
Tensor _cast_Long(const Tensor & self, bool non_blocking) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Long(self, non_blocking);
}
Tensor _cast_Short(const Tensor & self, bool non_blocking) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Short(self, non_blocking);
}
Tensor _cast_Half(const Tensor & self, bool non_blocking) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Half(self, non_blocking);
}
void backward(const Tensor & self, const Tensor & gradient, c10::optional<bool> retain_graph, bool create_graph) {
    const OptionalDeviceGuard device_guard(device_of(self));
 at::native::backward(self, gradient, retain_graph, create_graph);
}
void set_data(const Tensor & self, const Tensor & new_data) {
    const OptionalDeviceGuard device_guard(device_of(self));
 at::native::set_data(self, new_data);
}
Tensor data(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::data(self);
}
bool is_leaf(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::is_leaf(self);
}
int64_t output_nr(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::output_nr(self);
}
int64_t _version(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_version(self);
}
Tensor & requires_grad_(Tensor & self, bool requires_grad) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::requires_grad_(self, requires_grad);
}
void retain_grad(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
 at::native::retain_grad(self);
}
Tensor & rename_(Tensor & self, c10::optional<DimnameList> names) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rename_(self, names);
}
Tensor rename(const Tensor & self, c10::optional<DimnameList> names) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rename(self, names);
}
Tensor align_to(const Tensor & self, DimnameList names) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::align_to(self, names);
}
Tensor align_to_ellipsis_idx(const Tensor & self, DimnameList order, int64_t ellipsis_idx) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::align_to(self, order, ellipsis_idx);
}
Tensor align_as(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::align_as(self, other);
}
std::vector<Tensor> align_tensors(TensorList tensors) {
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::align_tensors(tensors);
}
Tensor refine_names(const Tensor & self, DimnameList names) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::refine_names(self, names);
}
Tensor unflatten_Dimname(const Tensor & self, Dimname dim, IntArrayRef sizes, DimnameList names) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unflatten(self, dim, sizes, names);
}
Tensor unflatten_int(const Tensor & self, int64_t dim, IntArrayRef sizes, DimnameList names) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unflatten(self, dim, sizes, names);
}
bool _use_cudnn_rnn_flatten_weight() {
    // DeviceGuard omitted
    return at::native::_use_cudnn_rnn_flatten_weight();
}
int64_t _debug_has_internal_overlap(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_debug_has_internal_overlap(self);
}
std::tuple<Tensor,Tensor> _sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(quasi));
    return at::native::_sobol_engine_draw(quasi, n, sobolstate, dimension, num_generated, dtype);
}
Tensor & _sobol_engine_ff_(Tensor & self, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sobol_engine_ff_(self, n, sobolstate, dimension, num_generated);
}
Tensor & _sobol_engine_scramble_(Tensor & self, const Tensor & ltm, int64_t dimension) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sobol_engine_scramble_(self, ltm, dimension);
}
Tensor & _sobol_engine_initialize_state_(Tensor & self, int64_t dimension) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sobol_engine_initialize_state_(self, dimension);
}
Tensor _reshape_from_tensor(const Tensor & self, const Tensor & shape) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_reshape_from_tensor(self, shape);
}
Tensor _shape_as_tensor(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_shape_as_tensor(self);
}
Tensor dropout(const Tensor & input, double p, bool train) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::dropout(input, p, train);
}
Tensor & dropout_(Tensor & self, double p, bool train) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dropout_(self, p, train);
}
Tensor feature_dropout(const Tensor & input, double p, bool train) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::feature_dropout(input, p, train);
}
Tensor & feature_dropout_(Tensor & self, double p, bool train) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::feature_dropout_(self, p, train);
}
Tensor alpha_dropout(const Tensor & input, double p, bool train) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::alpha_dropout(input, p, train);
}
Tensor & alpha_dropout_(Tensor & self, double p, bool train) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::alpha_dropout_(self, p, train);
}
Tensor feature_alpha_dropout(const Tensor & input, double p, bool train) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::feature_alpha_dropout(input, p, train);
}
Tensor & feature_alpha_dropout_(Tensor & self, double p, bool train) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::feature_alpha_dropout_(self, p, train);
}
Tensor abs(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::abs(self);
}
Tensor & abs_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::abs_(self);
}
Tensor & abs_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::abs_out(out, self);
}
Tensor angle(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::angle(self);
}
Tensor & angle_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::angle_out(out, self);
}
Tensor view_as_real(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::view_as_real(self);
}
Tensor view_as_complex(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::view_as_complex(self);
}
Tensor real(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::real(self);
}
Tensor imag(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::imag(self);
}
Tensor conj(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::conj(self);
}
Tensor & conj_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::conj_out(out, self);
}
Tensor acos(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::acos(self);
}
Tensor & acos_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::acos_(self);
}
Tensor & acos_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::acos_out(out, self);
}
Tensor avg_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool1d(self, kernel_size, stride, padding, ceil_mode, count_include_pad);
}
Tensor adaptive_avg_pool1d(const Tensor & self, IntArrayRef output_size) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool1d(self, output_size);
}
std::tuple<Tensor,Tensor> adaptive_max_pool1d(const Tensor & self, IntArrayRef output_size) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool1d(self, output_size);
}
Tensor add_Scalar(const Tensor & self, Scalar other, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add(self, other, alpha);
}
Tensor & add__Scalar(Tensor & self, Scalar other, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_(self, other, alpha);
}
Tensor addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addmv(self, mat, vec, beta, alpha);
}
Tensor & addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addmv_(self, mat, vec, beta, alpha);
}
Tensor & addmv_out_out(Tensor & out, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addmv_out(out, self, mat, vec, beta, alpha);
}
Tensor addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addr(self, vec1, vec2, beta, alpha);
}
Tensor & addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addr_(self, vec1, vec2, beta, alpha);
}
Tensor & addr_out_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addr_out(out, self, vec1, vec2, beta, alpha);
}
Tensor affine_grid_generator(const Tensor & theta, IntArrayRef size, bool align_corners) {
    const OptionalDeviceGuard device_guard(device_of(theta));
    return at::native::affine_grid_generator(theta, size, align_corners);
}
Tensor affine_grid_generator_backward(const Tensor & grad, IntArrayRef size, bool align_corners) {
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::affine_grid_generator_backward(grad, size, align_corners);
}
Tensor all_dim(const Tensor & self, int64_t dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all(self, dim, keepdim);
}
Tensor & all_out_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all_out(out, self, dim, keepdim);
}
Tensor all_dimname(const Tensor & self, Dimname dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all(self, dim, keepdim);
}
Tensor & all_out_dimname_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all_out(out, self, dim, keepdim);
}
bool allclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::allclose(self, other, rtol, atol, equal_nan);
}
Tensor any_dim(const Tensor & self, int64_t dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any(self, dim, keepdim);
}
Tensor & any_out_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any_out(out, self, dim, keepdim);
}
Tensor any_dimname(const Tensor & self, Dimname dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any(self, dim, keepdim);
}
Tensor & any_out_dimname_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any_out(out, self, dim, keepdim);
}
Tensor arange(Scalar end, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::arange(end, options);
}
Tensor arange_start(Scalar start, Scalar end, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::arange(start, end, options);
}
Tensor arange_start_step(Scalar start, Scalar end, Scalar step, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::arange(start, end, step, options);
}
Tensor & arange_out_out(Tensor & out, Scalar end) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::arange_out(out, end);
}
Tensor _dim_arange(const Tensor & like, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(like));
    return at::native::_dim_arange(like, dim);
}
Tensor acosh(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::acosh(self);
}
Tensor & acosh_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::acosh_(self);
}
Tensor & acosh_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::acosh_out(out, self);
}
Tensor asinh(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::asinh(self);
}
Tensor & asinh_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::asinh_(self);
}
Tensor & asinh_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::asinh_out(out, self);
}
Tensor atanh(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atanh(self);
}
Tensor & atanh_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atanh_(self);
}
Tensor & atanh_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atanh_out(out, self);
}
Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
    // DeviceGuard omitted
    return at::native::as_strided_(self, size, stride, storage_offset);
}
Tensor asin(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::asin(self);
}
Tensor & asin_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::asin_(self);
}
Tensor & asin_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::asin_out(out, self);
}
Tensor atan(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan(self);
}
Tensor & atan_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan_(self);
}
Tensor & atan_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan_out(out, self);
}
Tensor & _baddbmm_mkl_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_baddbmm_mkl_(self, batch1, batch2, beta, alpha);
}
Tensor bartlett_window(int64_t window_length, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::bartlett_window(window_length, options);
}
Tensor bartlett_window_periodic(int64_t window_length, bool periodic, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::bartlett_window(window_length, periodic, options);
}
Tensor batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
}
std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t> _batch_norm_impl_index(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_batch_norm_impl_index(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
}
std::tuple<Tensor,Tensor,Tensor> _batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var_transform, bool train, double eps, std::array<bool,3> output_mask, const Tensor & reservedSpace) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_batch_norm_impl_index_backward(impl_index, input, grad_output, weight, running_mean, running_var, save_mean, save_var_transform, train, eps, output_mask, reservedSpace);
}
Tensor bernoulli(const Tensor & self, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli(self, generator);
}
Tensor & bernoulli_out_out(Tensor & out, const Tensor & self, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_out(out, self, generator);
}
Tensor & bernoulli__Tensor(Tensor & self, const Tensor & p, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_(self, p, generator);
}
Tensor & bernoulli__float(Tensor & self, double p, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_(self, p, generator);
}
Tensor bernoulli_p(const Tensor & self, double p, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli(self, p, generator);
}
Tensor bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const Tensor & bias) {
    const OptionalDeviceGuard device_guard(device_of(input1));
    return at::native::bilinear(input1, input2, weight, bias);
}
Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::binary_cross_entropy_with_logits(self, target, weight, pos_weight, reduction);
}
Tensor binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::binary_cross_entropy_with_logits_backward(grad_output, self, target, weight, pos_weight, reduction);
}
Tensor bitwise_not(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_not(self);
}
Tensor & bitwise_not_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_not_(self);
}
Tensor logical_not(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_not(self);
}
Tensor & logical_not_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_not_(self);
}
Tensor logical_xor(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_xor(self, other);
}
Tensor & logical_xor_(Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_xor_(self, other);
}
Tensor logical_and(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_and(self, other);
}
Tensor & logical_and_(Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_and_(self, other);
}
Tensor logical_or(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_or(self, other);
}
Tensor & logical_or_(Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_or_(self, other);
}
Tensor blackman_window(int64_t window_length, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::blackman_window(window_length, options);
}
Tensor blackman_window_periodic(int64_t window_length, bool periodic, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::blackman_window(window_length, periodic, options);
}
std::vector<Tensor> broadcast_tensors(TensorList tensors) {
    // DeviceGuard omitted
    return at::native::broadcast_tensors(tensors);
}
Tensor cat(TensorList tensors, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::cat(tensors, dim);
}
Tensor & cat_out_out(Tensor & out, TensorList tensors, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::cat_out(out, tensors, dim);
}
Tensor cat_names(TensorList tensors, Dimname dim) {
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::cat(tensors, dim);
}
Tensor & cat_out_names_out(Tensor & out, TensorList tensors, Dimname dim) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::cat_out(out, tensors, dim);
}
Tensor block_diag(TensorList tensors) {
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::block_diag(tensors);
}
Tensor ceil(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ceil(self);
}
Tensor & ceil_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ceil_(self);
}
Tensor chain_matmul(TensorList matrices) {
    const OptionalDeviceGuard device_guard(device_of(matrices));
    return at::native::chain_matmul(matrices);
}
std::vector<Tensor> chunk(const Tensor & self, int64_t chunks, int64_t dim) {
    // DeviceGuard omitted
    return at::native::chunk(self, chunks, dim);
}
Tensor & clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp_(self, min, max);
}
Tensor & clamp_out_out(Tensor & out, const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp_out(out, self, min, max);
}
Tensor clamp_max(const Tensor & self, Scalar max) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp_max(self, max);
}
Tensor & clamp_max_(Tensor & self, Scalar max) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp_max_(self, max);
}
Tensor & clamp_max_out_out(Tensor & out, const Tensor & self, Scalar max) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp_max_out(out, self, max);
}
Tensor clamp_min(const Tensor & self, Scalar min) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp_min(self, min);
}
Tensor & clamp_min_(Tensor & self, Scalar min) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp_min_(self, min);
}
Tensor & clamp_min_out_out(Tensor & out, const Tensor & self, Scalar min) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp_min_out(out, self, min);
}
bool cudnn_is_acceptable(const Tensor & self) {
    // DeviceGuard omitted
    return at::native::cudnn_is_acceptable(self);
}
Tensor constant_pad_nd(const Tensor & self, IntArrayRef pad, Scalar value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::constant_pad_nd(self, pad, value);
}
Tensor contiguous(const Tensor & self, MemoryFormat memory_format) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::contiguous(self, memory_format);
}
Tensor convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::convolution(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);
}
Tensor convolution_overrideable(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::convolution_overrideable(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);
}
std::tuple<Tensor,Tensor,Tensor> convolution_backward_overrideable(const Tensor & grad_output, const Tensor & input, const Tensor & weight, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, std::array<bool,3> output_mask) {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::convolution_backward_overrideable(grad_output, input, weight, stride, padding, dilation, transposed, output_padding, groups, output_mask);
}
Tensor _convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_convolution(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled);
}
Tensor _convolution_nogroup(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_convolution_nogroup(input, weight, bias, stride, padding, dilation, transposed, output_padding);
}
std::tuple<Tensor,Tensor,Tensor> _convolution_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_convolution_double_backward(ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, output_mask);
}
Tensor conv1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv1d(input, weight, bias, stride, padding, dilation, groups);
}
Tensor conv2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv2d(input, weight, bias, stride, padding, dilation, groups);
}
Tensor conv3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv3d(input, weight, bias, stride, padding, dilation, groups);
}
Tensor conv_tbc(const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::conv_tbc(self, weight, bias, pad);
}
std::tuple<Tensor,Tensor,Tensor> conv_tbc_backward(const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::conv_tbc_backward(self, input, weight, bias, pad);
}
Tensor conv_transpose1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv_transpose1d(input, weight, bias, stride, padding, output_padding, groups, dilation);
}
Tensor conv_transpose2d_input(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv_transpose2d(input, weight, bias, stride, padding, output_padding, groups, dilation);
}
Tensor conv_transpose3d_input(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv_transpose3d(input, weight, bias, stride, padding, output_padding, groups, dilation);
}
Tensor & copy_(Tensor & self, const Tensor & src, bool non_blocking) {
    // DeviceGuard omitted
    return at::native::copy_(self, src, non_blocking);
}
Tensor cos(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cos(self);
}
Tensor & cos_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cos_(self);
}
Tensor & cos_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cos_out(out, self);
}
Tensor cosh(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cosh(self);
}
Tensor & cosh_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cosh_(self);
}
Tensor & cosh_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cosh_out(out, self);
}
Tensor cosine_embedding_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(input1));
    return at::native::cosine_embedding_loss(input1, input2, target, margin, reduction);
}
Tensor count_nonzero_dim_IntList(const Tensor & self, IntArrayRef dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::count_nonzero(self, dim);
}
Tensor count_nonzero(const Tensor & self, c10::optional<int64_t> dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::count_nonzero(self, dim);
}
std::tuple<Tensor,Tensor> cummax(const Tensor & self, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummax(self, dim);
}
std::tuple<Tensor &,Tensor &> cummax_out_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummax_out(values, indices, self, dim);
}
std::tuple<Tensor,Tensor> cummax_dimname(const Tensor & self, Dimname dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummax(self, dim);
}
std::tuple<Tensor &,Tensor &> cummax_out_dimname_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummax_out(values, indices, self, dim);
}
std::tuple<Tensor,Tensor> cummin(const Tensor & self, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummin(self, dim);
}
std::tuple<Tensor &,Tensor &> cummin_out_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummin_out(values, indices, self, dim);
}
std::tuple<Tensor,Tensor> cummin_dimname(const Tensor & self, Dimname dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummin(self, dim);
}
std::tuple<Tensor &,Tensor &> cummin_out_dimname_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummin_out(values, indices, self, dim);
}
Tensor cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod(self, dim, dtype);
}
Tensor & cumprod_out_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod_out(out, self, dim, dtype);
}
Tensor cumprod_dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod(self, dim, dtype);
}
Tensor & cumprod_out_dimname_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod_out(out, self, dim, dtype);
}
Tensor cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum(self, dim, dtype);
}
Tensor & cumsum_out_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum_out(out, self, dim, dtype);
}
Tensor cumsum_dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum(self, dim, dtype);
}
Tensor & cumsum_out_dimname_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum_out(out, self, dim, dtype);
}
Tensor ctc_loss_IntList(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    return at::native::ctc_loss(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
}
Tensor ctc_loss_Tensor(const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    return at::native::ctc_loss(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
}
Tensor det(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::det(self);
}
Tensor diag_embed(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diag_embed(self, offset, dim1, dim2);
}
Tensor diagflat(const Tensor & self, int64_t offset) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diagflat(self, offset);
}
Tensor diagonal(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diagonal(self, offset, dim1, dim2);
}
Tensor diagonal_Dimname(const Tensor & self, Dimname outdim, Dimname dim1, Dimname dim2, int64_t offset) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diagonal(self, outdim, dim1, dim2, offset);
}
Tensor & fill_diagonal_(Tensor & self, Scalar fill_value, bool wrap) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fill_diagonal_(self, fill_value, wrap);
}
Tensor div_Scalar(const Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div(self, other);
}
Tensor & div__Scalar(Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div_(self, other);
}
Tensor & dot_out_out(Tensor & out, const Tensor & self, const Tensor & tensor) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dot_out(out, self, tensor);
}
Tensor einsum(std::string equation, TensorList tensors) {
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::einsum(equation, tensors);
}
Tensor embedding(const Tensor & weight, const Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {
    const OptionalDeviceGuard device_guard(device_of(weight));
    return at::native::embedding(weight, indices, padding_idx, scale_grad_by_freq, sparse);
}
Tensor embedding_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::embedding_backward(grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse);
}
Tensor embedding_sparse_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::embedding_sparse_backward(grad, indices, num_weights, padding_idx, scale_grad_by_freq);
}
std::tuple<Tensor,Tensor,Tensor,Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights, bool include_last_offset) {
    const OptionalDeviceGuard device_guard(device_of(weight));
    return at::native::embedding_bag(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
}
Tensor _embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) {
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_backward(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, per_sample_weights);
}
Tensor _embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) {
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_sparse_backward(grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode, per_sample_weights);
}
Tensor empty_meta(IntArrayRef size, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    const DeviceGuard device_guard(options.device());
    return at::native::empty_meta(size, options, memory_format);
}
Tensor empty_names(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    // DeviceGuard omitted
    return at::native::empty(size, names, options, memory_format);
}
Tensor new_empty(const Tensor & self, IntArrayRef size, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::new_empty(self, size, options);
}
Tensor new_full(const Tensor & self, IntArrayRef size, Scalar fill_value, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::new_full(self, size, fill_value, options);
}
Tensor new_zeros(const Tensor & self, IntArrayRef size, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::new_zeros(self, size, options);
}
Tensor & resize_(Tensor & self, IntArrayRef size, c10::optional<MemoryFormat> memory_format) {
    // DeviceGuard omitted
    return at::native::resize_(self, size, memory_format);
}
Tensor & empty_out_out(Tensor & out, IntArrayRef size, c10::optional<MemoryFormat> memory_format) {
    // DeviceGuard omitted
    return at::native::empty_out(out, size, memory_format);
}
Tensor empty_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    // DeviceGuard omitted
    return at::native::empty_like(self, options, memory_format);
}
Tensor erf(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::erf(self);
}
Tensor & erf_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::erf_(self);
}
Tensor & erf_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::erf_out(out, self);
}
Tensor erfc(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::erfc(self);
}
Tensor & erfc_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::erfc_(self);
}
Tensor & erfc_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::erfc_out(out, self);
}
Tensor exp(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::exp(self);
}
Tensor & exp_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::exp_(self);
}
Tensor & exp_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::exp_out(out, self);
}
Tensor expm1(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::expm1(self);
}
Tensor & expm1_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::expm1_(self);
}
Tensor expand(const Tensor & self, IntArrayRef size, bool implicit) {
    // DeviceGuard omitted
    return at::native::expand(self, size, implicit);
}
Tensor expand_as(const Tensor & self, const Tensor & other) {
    // DeviceGuard omitted
    return at::native::expand_as(self, other);
}
Tensor eye(int64_t n, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::eye(n, options);
}
Tensor eye_m(int64_t n, int64_t m, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::eye(n, m, options);
}
Tensor flatten_using_ints(const Tensor & self, int64_t start_dim, int64_t end_dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flatten(self, start_dim, end_dim);
}
Tensor flatten_named_out_dim(const Tensor & self, int64_t start_dim, int64_t end_dim, Dimname out_dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flatten(self, start_dim, end_dim, out_dim);
}
Tensor flatten_using_names(const Tensor & self, Dimname start_dim, Dimname end_dim, Dimname out_dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flatten(self, start_dim, end_dim, out_dim);
}
Tensor flatten_DimnameList(const Tensor & self, DimnameList dims, Dimname out_dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flatten(self, dims, out_dim);
}
Tensor & fill__Scalar(Tensor & self, Scalar value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fill_(self, value);
}
Tensor & fill__Tensor(Tensor & self, const Tensor & value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fill_(self, value);
}
Tensor floor(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor(self);
}
Tensor & floor_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor_(self);
}
Tensor floor_divide_Scalar(const Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor_divide(self, other);
}
Tensor & floor_divide__Scalar(Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor_divide_(self, other);
}
Tensor frac(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frac(self);
}
Tensor & frac_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frac_(self);
}
Tensor & frac_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frac_out(out, self);
}
Tensor full_names(IntArrayRef size, Scalar fill_value, c10::optional<DimnameList> names, const TensorOptions & options) {
    // DeviceGuard omitted
    return at::native::full(size, fill_value, names, options);
}
Tensor full(IntArrayRef size, Scalar fill_value, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::full(size, fill_value, options);
}
Tensor & full_out_out(Tensor & out, IntArrayRef size, Scalar fill_value) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::full_out(out, size, fill_value);
}
Tensor full_like(const Tensor & self, Scalar fill_value, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    const DeviceGuard device_guard(options.device());
    return at::native::full_like(self, fill_value, options, memory_format);
}
Tensor grid_sampler(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::grid_sampler(input, grid, interpolation_mode, padding_mode, align_corners);
}
Tensor hann_window(int64_t window_length, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::hann_window(window_length, options);
}
Tensor hann_window_periodic(int64_t window_length, bool periodic, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::hann_window(window_length, periodic, options);
}
Tensor hamming_window(int64_t window_length, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(window_length, options);
}
Tensor hamming_window_periodic(int64_t window_length, bool periodic, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(window_length, periodic, options);
}
Tensor hamming_window_periodic_alpha(int64_t window_length, bool periodic, double alpha, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(window_length, periodic, alpha, options);
}
Tensor hamming_window_periodic_alpha_beta(int64_t window_length, bool periodic, double alpha, double beta, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(window_length, periodic, alpha, beta, options);
}
Tensor hinge_embedding_loss(const Tensor & self, const Tensor & target, double margin, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hinge_embedding_loss(self, target, margin, reduction);
}
Tensor ger(const Tensor & self, const Tensor & vec2) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ger(self, vec2);
}
Tensor & ger_out_out(Tensor & out, const Tensor & self, const Tensor & vec2) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ger_out(out, self, vec2);
}
Tensor group_norm(const Tensor & input, int64_t num_groups, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enabled) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::group_norm(input, num_groups, weight, bias, eps, cudnn_enabled);
}
Tensor fft(const Tensor & self, int64_t signal_ndim, bool normalized) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fft(self, signal_ndim, normalized);
}
Tensor ifft(const Tensor & self, int64_t signal_ndim, bool normalized) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ifft(self, signal_ndim, normalized);
}
Tensor rfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rfft(self, signal_ndim, normalized, onesided);
}
Tensor irfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided, IntArrayRef signal_sizes) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::irfft(self, signal_ndim, normalized, onesided, signal_sizes);
}
int64_t _cufft_get_plan_cache_size(int64_t device_index) {
    // DeviceGuard omitted
    return at::native::_cufft_get_plan_cache_size(device_index);
}
int64_t _cufft_get_plan_cache_max_size(int64_t device_index) {
    // DeviceGuard omitted
    return at::native::_cufft_get_plan_cache_max_size(device_index);
}
void _cufft_set_plan_cache_max_size(int64_t device_index, int64_t max_size) {
    // DeviceGuard omitted
 at::native::_cufft_set_plan_cache_max_size(device_index, max_size);
}
void _cufft_clear_plan_cache(int64_t device_index) {
    // DeviceGuard omitted
 at::native::_cufft_clear_plan_cache(device_index);
}
Tensor index_Tensor(const Tensor & self, TensorList indices) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index(self, indices);
}
Tensor & index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_copy_(self, dim, index, source);
}
Tensor index_copy(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_copy(self, dim, index, source);
}
Tensor & index_copy__dimname(Tensor & self, Dimname dim, const Tensor & index, const Tensor & source) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_copy_(self, dim, index, source);
}
Tensor index_copy_dimname(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_copy(self, dim, index, source);
}
Tensor & index_put_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_put_(self, indices, values, accumulate);
}
Tensor index_put(const Tensor & self, TensorList indices, const Tensor & values, bool accumulate) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_put(self, indices, values, accumulate);
}
Tensor & _index_put_impl_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate, bool unsafe) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_index_put_impl_(self, indices, values, accumulate, unsafe);
}
Tensor instance_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::instance_norm(input, weight, bias, running_mean, running_var, use_input_stats, momentum, eps, cudnn_enabled);
}
Tensor inverse(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::inverse(self);
}
Tensor & inverse_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::inverse_out(out, self);
}
Tensor isclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::isclose(self, other, rtol, atol, equal_nan);
}
bool is_distributed(const Tensor & self) {
    // DeviceGuard omitted
    return at::native::is_distributed(self);
}
bool is_floating_point(const Tensor & self) {
    // DeviceGuard omitted
    return at::native::is_floating_point(self);
}
bool is_complex(const Tensor & self) {
    // DeviceGuard omitted
    return at::native::is_complex(self);
}
bool is_nonzero(const Tensor & self) {
    // DeviceGuard omitted
    return at::native::is_nonzero(self);
}
bool is_same_size(const Tensor & self, const Tensor & other) {
    // DeviceGuard omitted
    return at::native::is_same_size(self, other);
}
bool is_signed(const Tensor & self) {
    // DeviceGuard omitted
    return at::native::is_signed(self);
}
Tensor kl_div(const Tensor & self, const Tensor & target, int64_t reduction, bool log_target) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kl_div(self, target, reduction, log_target);
}
std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, int64_t dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kthvalue(self, k, dim, keepdim);
}
std::tuple<Tensor,Tensor> kthvalue_dimname(const Tensor & self, int64_t k, Dimname dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kthvalue(self, k, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> kthvalue_out_dimname_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, Dimname dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kthvalue_out(values, indices, self, k, dim, keepdim);
}
Tensor layer_norm(const Tensor & input, IntArrayRef normalized_shape, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enable) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::layer_norm(input, normalized_shape, weight, bias, eps, cudnn_enable);
}
Tensor linear(const Tensor & input, const Tensor & weight, const Tensor & bias) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::linear(input, weight, bias);
}
Tensor fbgemm_linear_int8_weight_fp32_activation(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_int8_weight_fp32_activation(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
}
Tensor fbgemm_linear_int8_weight(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_int8_weight(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
}
std::tuple<Tensor,Tensor,double,int64_t> fbgemm_linear_quantize_weight(const Tensor & input) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_quantize_weight(input);
}
Tensor fbgemm_pack_gemm_matrix_fp16(const Tensor & input) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_pack_gemm_matrix_fp16(input);
}
Tensor fbgemm_linear_fp16_weight_fp32_activation(const Tensor & input, const Tensor & packed_weight, const Tensor & bias) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_fp16_weight_fp32_activation(input, packed_weight, bias);
}
Tensor fbgemm_linear_fp16_weight(const Tensor & input, const Tensor & packed_weight, const Tensor & bias) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_fp16_weight(input, packed_weight, bias);
}
Tensor fbgemm_pack_quantized_matrix(const Tensor & input) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_pack_quantized_matrix(input);
}
Tensor fbgemm_pack_quantized_matrix_KN(const Tensor & input, int64_t K, int64_t N) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_pack_quantized_matrix(input, K, N);
}
Tensor linspace(Scalar start, Scalar end, int64_t steps, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::linspace(start, end, steps, options);
}
Tensor log(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log(self);
}
Tensor & log_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_(self);
}
Tensor log10(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log10(self);
}
Tensor & log10_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log10_(self);
}
Tensor log1p(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log1p(self);
}
Tensor log2(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log2(self);
}
Tensor & log2_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log2_(self);
}
Tensor & logaddexp_out_out(Tensor & out, const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logaddexp_out(out, self, other);
}
Tensor logaddexp(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logaddexp(self, other);
}
Tensor & logaddexp2_out_out(Tensor & out, const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logaddexp2_out(out, self, other);
}
Tensor logaddexp2(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logaddexp2(self, other);
}
Tensor logdet(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logdet(self);
}
Tensor logspace(Scalar start, Scalar end, int64_t steps, double base, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::logspace(start, end, steps, base, options);
}
Tensor log_softmax_int(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax(self, dim, dtype);
}
Tensor log_softmax_Dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax(self, dim, dtype);
}
Tensor logcumsumexp(const Tensor & self, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logcumsumexp(self, dim);
}
Tensor & logcumsumexp_out_out(Tensor & out, const Tensor & self, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logcumsumexp_out(out, self, dim);
}
Tensor logcumsumexp_dimname(const Tensor & self, Dimname dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logcumsumexp(self, dim);
}
Tensor & logcumsumexp_out_dimname_out(Tensor & out, const Tensor & self, Dimname dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logcumsumexp_out(out, self, dim);
}
Tensor logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logsumexp(self, dim, keepdim);
}
Tensor & logsumexp_out_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logsumexp_out(out, self, dim, keepdim);
}
Tensor logsumexp_names(const Tensor & self, DimnameList dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logsumexp(self, dim, keepdim);
}
Tensor & logsumexp_out_names_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logsumexp_out(out, self, dim, keepdim);
}
Tensor margin_ranking_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(input1));
    return at::native::margin_ranking_loss(input1, input2, target, margin, reduction);
}
Tensor matmul(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matmul(self, other);
}
Tensor & matmul_out_out(Tensor & out, const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matmul_out(out, self, other);
}
Tensor matrix_rank_tol(const Tensor & self, double tol, bool symmetric) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matrix_rank(self, tol, symmetric);
}
Tensor matrix_rank(const Tensor & self, bool symmetric) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matrix_rank(self, symmetric);
}
Tensor matrix_power(const Tensor & self, int64_t n) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matrix_power(self, n);
}
std::tuple<Tensor,Tensor> max_dim(const Tensor & self, int64_t dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> max_out_dim_max(Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_out(max, max_values, self, dim, keepdim);
}
Tensor max_values(const Tensor & self, IntArrayRef dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_values(self, dim, keepdim);
}
std::tuple<Tensor,Tensor> max_names_dim(const Tensor & self, Dimname dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> max_out_names_dim_max(Tensor & max, Tensor & max_values, const Tensor & self, Dimname dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_out(max, max_values, self, dim, keepdim);
}
Tensor max_values_names(const Tensor & self, DimnameList dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_values(self, dim, keepdim);
}
std::tuple<Tensor,Tensor> max_pool1d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool1d_with_indices(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor max_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool1d(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor mean_names_dim(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean(self, dim, keepdim, dtype);
}
Tensor & mean_out_names_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean_out(out, self, dim, keepdim, dtype);
}
std::tuple<Tensor,Tensor> median_dim(const Tensor & self, int64_t dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> median_out_dim_values(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median_out(values, indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> median_names_dim(const Tensor & self, Dimname dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> median_out_names_dim_values(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median_out(values, indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> min_dim(const Tensor & self, int64_t dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> min_out_dim_min(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_out(min, min_indices, self, dim, keepdim);
}
Tensor min_values(const Tensor & self, IntArrayRef dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_values(self, dim, keepdim);
}
std::tuple<Tensor,Tensor> min_names_dim(const Tensor & self, Dimname dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> min_out_names_dim_min(Tensor & min, Tensor & min_indices, const Tensor & self, Dimname dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_out(min, min_indices, self, dim, keepdim);
}
Tensor min_values_names(const Tensor & self, DimnameList dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_values(self, dim, keepdim);
}
Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mkldnn_convolution(self, weight, bias, padding, stride, dilation, groups);
}
Tensor mkldnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::mkldnn_convolution_backward_input(self_size, grad_output, weight, padding, stride, dilation, groups, bias_defined);
}
std::tuple<Tensor,Tensor> mkldnn_convolution_backward_weights(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mkldnn_convolution_backward_weights(weight_size, grad_output, self, padding, stride, dilation, groups, bias_defined);
}
std::tuple<Tensor,Tensor,Tensor> mkldnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mkldnn_convolution_backward(self, grad_output, weight, padding, stride, dilation, groups, output_mask);
}
Tensor _sparse_mm(const Tensor & sparse, const Tensor & dense) {
    const OptionalDeviceGuard device_guard(device_of(sparse));
    return at::native::_sparse_mm(sparse, dense);
}
std::tuple<Tensor,Tensor> mode(const Tensor & self, int64_t dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mode(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> mode_out_values(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mode_out(values, indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> mode_dimname(const Tensor & self, Dimname dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mode(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> mode_out_dimname_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mode_out(values, indices, self, dim, keepdim);
}
Tensor mul_Scalar(const Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul(self, other);
}
Tensor & mul__Scalar(Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_(self, other);
}
Tensor & mv_out_out(Tensor & out, const Tensor & self, const Tensor & vec) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mv_out(out, self, vec);
}
Tensor mvlgamma(const Tensor & self, int64_t p) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mvlgamma(self, p);
}
Tensor & mvlgamma_(Tensor & self, int64_t p) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mvlgamma_(self, p);
}
Tensor narrow(const Tensor & self, int64_t dim, int64_t start, int64_t length) {
    // DeviceGuard omitted
    return at::native::narrow(self, dim, start, length);
}
Tensor narrow_Tensor(const Tensor & self, int64_t dim, const Tensor & start, int64_t length) {
    // DeviceGuard omitted
    return at::native::narrow(self, dim, start, length);
}
bool is_vulkan_available() {
    // DeviceGuard omitted
    return at::native::is_vulkan_available();
}
bool _nnpack_available() {
    // DeviceGuard omitted
    return at::native::_nnpack_available();
}
Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution(input, weight, bias, padding, stride);
}
std::tuple<Tensor,Tensor,Tensor> _nnpack_spatial_convolution_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, std::array<bool,3> output_mask) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution_backward(input, grad_output, weight, padding, output_mask);
}
Tensor _nnpack_spatial_convolution_backward_input(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution_backward_input(input, grad_output, weight, padding);
}
Tensor _nnpack_spatial_convolution_backward_weight(const Tensor & input, IntArrayRef weightsize, const Tensor & grad_output, IntArrayRef padding) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution_backward_weight(input, weightsize, grad_output, padding);
}
Tensor ones_names(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {
    // DeviceGuard omitted
    return at::native::ones(size, names, options);
}
Tensor ones(IntArrayRef size, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::ones(size, options);
}
Tensor & ones_out_out(Tensor & out, IntArrayRef size) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::ones_out(out, size);
}
Tensor ones_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    const DeviceGuard device_guard(options.device());
    return at::native::ones_like(self, options, memory_format);
}
Tensor pairwise_distance(const Tensor & x1, const Tensor & x2, double p, double eps, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::pairwise_distance(x1, x2, p, eps, keepdim);
}
Tensor cdist(const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode) {
    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::cdist(x1, x2, p, compute_mode);
}
Tensor _euclidean_dist(const Tensor & x1, const Tensor & x2) {
    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::_euclidean_dist(x1, x2);
}
Tensor _cdist_forward(const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode) {
    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::_cdist_forward(x1, x2, p, compute_mode);
}
Tensor _cdist_backward(const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist) {
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_cdist_backward(grad, x1, x2, p, cdist);
}
Tensor pdist(const Tensor & self, double p) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pdist(self, p);
}
Tensor _pdist_forward(const Tensor & self, double p) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_pdist_forward(self, p);
}
Tensor _pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_pdist_backward(grad, self, p, pdist);
}
Tensor cosine_similarity(const Tensor & x1, const Tensor & x2, int64_t dim, double eps) {
    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::cosine_similarity(x1, x2, dim, eps);
}
Tensor permute(const Tensor & self, IntArrayRef dims) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::permute(self, dims);
}
Tensor numpy_T(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::numpy_T(self);
}
Tensor pixel_shuffle(const Tensor & self, int64_t upscale_factor) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pixel_shuffle(self, upscale_factor);
}
bool is_pinned(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::is_pinned(self);
}
Tensor pin_memory(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pin_memory(self);
}
Tensor pinverse(const Tensor & self, double rcond) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pinverse(self, rcond);
}
Tensor poisson_nll_loss(const Tensor & input, const Tensor & target, bool log_input, bool full, double eps, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::poisson_nll_loss(input, target, log_input, full, eps, reduction);
}
Tensor rad2deg(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rad2deg(self);
}
Tensor & rad2deg_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rad2deg_(self);
}
Tensor & rad2deg_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rad2deg_out(out, self);
}
Tensor deg2rad(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::deg2rad(self);
}
Tensor & deg2rad_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::deg2rad_(self);
}
Tensor & deg2rad_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::deg2rad_out(out, self);
}
Tensor scalar_tensor(Scalar s, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::scalar_tensor(s, options);
}
Tensor rand_names(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {
    // DeviceGuard omitted
    return at::native::rand(size, names, options);
}
Tensor rand_generator_with_names(IntArrayRef size, c10::optional<Generator> generator, c10::optional<DimnameList> names, const TensorOptions & options) {
    // DeviceGuard omitted
    return at::native::rand(size, generator, names, options);
}
Tensor rand(IntArrayRef size, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::rand(size, options);
}
Tensor rand_generator(IntArrayRef size, c10::optional<Generator> generator, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::rand(size, generator, options);
}
Tensor & rand_out_out(Tensor & out, IntArrayRef size) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::rand_out(out, size);
}
Tensor & rand_out_generator_out(Tensor & out, IntArrayRef size, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::rand_out(out, size, generator);
}
Tensor rand_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    const DeviceGuard device_guard(options.device());
    return at::native::rand_like(self, options, memory_format);
}
Tensor randint(int64_t high, IntArrayRef size, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::randint(high, size, options);
}
Tensor randint_generator(int64_t high, IntArrayRef size, c10::optional<Generator> generator, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::randint(high, size, generator, options);
}
Tensor randint_low(int64_t low, int64_t high, IntArrayRef size, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::randint(low, high, size, options);
}
Tensor randint_low_generator(int64_t low, int64_t high, IntArrayRef size, c10::optional<Generator> generator, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::randint(low, high, size, generator, options);
}
Tensor & randint_out_out(Tensor & out, int64_t high, IntArrayRef size) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(out, high, size);
}
Tensor & randint_out_generator_out(Tensor & out, int64_t high, IntArrayRef size, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(out, high, size, generator);
}
Tensor & randint_out_low_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(out, low, high, size);
}
Tensor & randint_out_low_generator_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(out, low, high, size, generator);
}
Tensor randint_like(const Tensor & self, int64_t high, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    const DeviceGuard device_guard(options.device());
    return at::native::randint_like(self, high, options, memory_format);
}
Tensor randint_like_low_dtype(const Tensor & self, int64_t low, int64_t high, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    const DeviceGuard device_guard(options.device());
    return at::native::randint_like(self, low, high, options, memory_format);
}
Tensor randn(IntArrayRef size, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::randn(size, options);
}
Tensor randn_generator(IntArrayRef size, c10::optional<Generator> generator, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::randn(size, generator, options);
}
Tensor randn_names(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {
    // DeviceGuard omitted
    return at::native::randn(size, names, options);
}
Tensor randn_generator_with_names(IntArrayRef size, c10::optional<Generator> generator, c10::optional<DimnameList> names, const TensorOptions & options) {
    // DeviceGuard omitted
    return at::native::randn(size, generator, names, options);
}
Tensor & randn_out_out(Tensor & out, IntArrayRef size) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randn_out(out, size);
}
Tensor & randn_out_generator_out(Tensor & out, IntArrayRef size, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randn_out(out, size, generator);
}
Tensor randn_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    const DeviceGuard device_guard(options.device());
    return at::native::randn_like(self, options, memory_format);
}
Tensor randperm(int64_t n, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::randperm(n, options);
}
Tensor randperm_generator(int64_t n, c10::optional<Generator> generator, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::randperm(n, generator, options);
}
Tensor & randperm_out_out(Tensor & out, int64_t n) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randperm_out(out, n);
}
Tensor range_step(Scalar start, Scalar end, Scalar step, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::range(start, end, step, options);
}
Tensor range(Scalar start, Scalar end, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::range(start, end, options);
}
Tensor reciprocal(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reciprocal(self);
}
Tensor & reciprocal_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reciprocal_(self);
}
Tensor & reciprocal_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reciprocal_out(out, self);
}
Tensor neg(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::neg(self);
}
Tensor & neg_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::neg_(self);
}
Tensor repeat(const Tensor & self, IntArrayRef repeats) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::repeat(self, repeats);
}
Tensor repeat_interleave_self_Tensor(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::repeat_interleave(self, repeats, dim);
}
Tensor repeat_interleave_self_int(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::repeat_interleave(self, repeats, dim);
}
Tensor reshape(const Tensor & self, IntArrayRef shape) {
    // DeviceGuard omitted
    return at::native::reshape(self, shape);
}
Tensor reshape_as(const Tensor & self, const Tensor & other) {
    // DeviceGuard omitted
    return at::native::reshape_as(self, other);
}
Tensor round(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::round(self);
}
Tensor & round_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::round_(self);
}
Tensor rrelu(const Tensor & self, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rrelu(self, lower, upper, training, generator);
}
Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rrelu_(self, lower, upper, training, generator);
}
Tensor hardshrink(const Tensor & self, Scalar lambd) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardshrink(self, lambd);
}
Tensor hardshrink_backward(const Tensor & grad_out, const Tensor & self, Scalar lambd) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardshrink_backward(grad_out, self, lambd);
}
Tensor rsqrt(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsqrt(self);
}
Tensor & rsqrt_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsqrt_(self);
}
Tensor select_Dimname(const Tensor & self, Dimname dim, int64_t index) {
    // DeviceGuard omitted
    return at::native::select(self, dim, index);
}
Tensor select_int(const Tensor & self, int64_t dim, int64_t index) {
    // DeviceGuard omitted
    return at::native::select(self, dim, index);
}
Tensor selu(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::selu(self);
}
Tensor & selu_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::selu_(self);
}
Tensor celu(const Tensor & self, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::celu(self, alpha);
}
Tensor & celu_(Tensor & self, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::celu_(self, alpha);
}
Tensor & sigmoid_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sigmoid_out(out, self);
}
Tensor sin(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sin(self);
}
Tensor & sin_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sin_(self);
}
Tensor sinh(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sinh(self);
}
Tensor & sinh_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sinh_(self);
}
Tensor & sinh_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sinh_out(out, self);
}
Tensor detach(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::detach(self);
}
Tensor & detach_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::detach_(self);
}
int64_t size_int(const Tensor & self, int64_t dim) {
    // DeviceGuard omitted
    return at::native::size(self, dim);
}
int64_t size_Dimname(const Tensor & self, Dimname dim) {
    // DeviceGuard omitted
    return at::native::size(self, dim);
}
Tensor slice_Tensor(const Tensor & self, int64_t dim, int64_t start, int64_t end, int64_t step) {
    // DeviceGuard omitted
    return at::native::slice(self, dim, start, end, step);
}
std::tuple<Tensor,Tensor> slogdet(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slogdet(self);
}
Tensor smm(const Tensor & self, const Tensor & mat2) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::smm(self, mat2);
}
Tensor softmax_int(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax(self, dim, dtype);
}
Tensor softmax_Dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax(self, dim, dtype);
}
std::vector<Tensor> split_Tensor(const Tensor & self, int64_t split_size, int64_t dim) {
    // DeviceGuard omitted
    return at::native::split(self, split_size, dim);
}
std::vector<Tensor> split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim) {
    // DeviceGuard omitted
    return at::native::split_with_sizes(self, split_sizes, dim);
}
Tensor squeeze(const Tensor & self) {
    // DeviceGuard omitted
    return at::native::squeeze(self);
}
Tensor squeeze_dim(const Tensor & self, int64_t dim) {
    // DeviceGuard omitted
    return at::native::squeeze(self, dim);
}
Tensor squeeze_dimname(const Tensor & self, Dimname dim) {
    // DeviceGuard omitted
    return at::native::squeeze(self, dim);
}
Tensor & squeeze_(Tensor & self) {
    // DeviceGuard omitted
    return at::native::squeeze_(self);
}
Tensor & squeeze__dim(Tensor & self, int64_t dim) {
    // DeviceGuard omitted
    return at::native::squeeze_(self, dim);
}
Tensor & squeeze__dimname(Tensor & self, Dimname dim) {
    // DeviceGuard omitted
    return at::native::squeeze_(self, dim);
}
Tensor sspaddmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sspaddmm(self, mat1, mat2, beta, alpha);
}
Tensor stack(TensorList tensors, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::stack(tensors, dim);
}
Tensor & stack_out_out(Tensor & out, TensorList tensors, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::stack_out(out, tensors, dim);
}
Tensor stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const Tensor & window, bool normalized, bool onesided) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::stft(self, n_fft, hop_length, win_length, window, normalized, onesided);
}
Tensor istft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const Tensor & window, bool center, bool normalized, bool onesided, c10::optional<int64_t> length) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::istft(self, n_fft, hop_length, win_length, window, center, normalized, onesided, length);
}
int64_t stride_int(const Tensor & self, int64_t dim) {
    // DeviceGuard omitted
    return at::native::stride(self, dim);
}
int64_t stride_Dimname(const Tensor & self, Dimname dim) {
    // DeviceGuard omitted
    return at::native::stride(self, dim);
}
Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(self, dtype);
}
Tensor sum_dim_IntList(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(self, dim, keepdim, dtype);
}
Tensor sum_dim_DimnameList(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(self, dim, keepdim, dtype);
}
Tensor & sum_out_IntList_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum_out(out, self, dim, keepdim, dtype);
}
Tensor & sum_out_DimnameList_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum_out(out, self, dim, keepdim, dtype);
}
Tensor sum_to_size(const Tensor & self, IntArrayRef size) {
    // DeviceGuard omitted
    return at::native::sum_to_size(self, size);
}
Tensor sqrt(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sqrt(self);
}
Tensor & sqrt_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sqrt_(self);
}
Tensor & sqrt_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sqrt_out(out, self);
}
Tensor square(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::square(self);
}
Tensor & square_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::square_(self);
}
Tensor std(const Tensor & self, bool unbiased) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std(self, unbiased);
}
Tensor std_dim(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std(self, dim, unbiased, keepdim);
}
std::tuple<Tensor,Tensor> std_mean(const Tensor & self, bool unbiased) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_mean(self, unbiased);
}
std::tuple<Tensor,Tensor> std_mean_dim(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_mean(self, dim, unbiased, keepdim);
}
std::tuple<Tensor,Tensor> std_mean_names_dim(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_mean(self, dim, unbiased, keepdim);
}
Tensor & std_out_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_out(out, self, dim, unbiased, keepdim);
}
Tensor std_names_dim(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std(self, dim, unbiased, keepdim);
}
Tensor & std_out_names_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_out(out, self, dim, unbiased, keepdim);
}
Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(self, dtype);
}
Tensor prod_dim_int(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(self, dim, keepdim, dtype);
}
Tensor & prod_out_int_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod_out(out, self, dim, keepdim, dtype);
}
Tensor prod_dim_Dimname(const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(self, dim, keepdim, dtype);
}
Tensor & prod_out_Dimname_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod_out(out, self, dim, keepdim, dtype);
}
Tensor t(const Tensor & self) {
    // DeviceGuard omitted
    return at::native::t(self);
}
Tensor & t_(Tensor & self) {
    // DeviceGuard omitted
    return at::native::t_(self);
}
Tensor tan(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tan(self);
}
Tensor & tan_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tan_(self);
}
Tensor & tan_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tan_out(out, self);
}
Tensor & tanh_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tanh_(self);
}
Tensor & tanh_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tanh_out(out, self);
}
Tensor tensordot(const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tensordot(self, other, dims_self, dims_other);
}
Tensor transpose_int(const Tensor & self, int64_t dim0, int64_t dim1) {
    // DeviceGuard omitted
    return at::native::transpose(self, dim0, dim1);
}
Tensor transpose_Dimname(const Tensor & self, Dimname dim0, Dimname dim1) {
    // DeviceGuard omitted
    return at::native::transpose(self, dim0, dim1);
}
Tensor & transpose_(Tensor & self, int64_t dim0, int64_t dim1) {
    // DeviceGuard omitted
    return at::native::transpose_(self, dim0, dim1);
}
Tensor one_hot(const Tensor & self, int64_t num_classes) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::one_hot(self, num_classes);
}
Tensor fliplr(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fliplr(self);
}
Tensor flipud(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flipud(self);
}
Tensor rot90(const Tensor & self, int64_t k, IntArrayRef dims) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rot90(self, k, dims);
}
Tensor trapz_x(const Tensor & y, const Tensor & x, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(y));
    return at::native::trapz(y, x, dim);
}
Tensor trapz_dx(const Tensor & y, double dx, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(y));
    return at::native::trapz(y, dx, dim);
}
Tensor _trilinear(const Tensor & i1, const Tensor & i2, const Tensor & i3, IntArrayRef expand1, IntArrayRef expand2, IntArrayRef expand3, IntArrayRef sumdim, int64_t unroll_dim) {
    const OptionalDeviceGuard device_guard(device_of(i1));
    return at::native::_trilinear(i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim);
}
Tensor triplet_margin_loss(const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(anchor));
    return at::native::triplet_margin_loss(anchor, positive, negative, margin, p, eps, swap, reduction);
}
Tensor true_divide_Scalar(const Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::true_divide(self, other);
}
Tensor & true_divide__Scalar(Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::true_divide_(self, other);
}
Tensor trunc(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::trunc(self);
}
Tensor & trunc_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::trunc_(self);
}
Tensor type_as(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::type_as(self, other);
}
bool _has_compatible_shallow_copy_type(const Tensor & self, const Tensor & from) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_has_compatible_shallow_copy_type(self, from);
}
Tensor _unsafe_view(const Tensor & self, IntArrayRef size) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_unsafe_view(self, size);
}
Tensor unsqueeze(const Tensor & self, int64_t dim) {
    // DeviceGuard omitted
    return at::native::unsqueeze(self, dim);
}
Tensor & unsqueeze_(Tensor & self, int64_t dim) {
    // DeviceGuard omitted
    return at::native::unsqueeze_(self, dim);
}
Tensor vander(const Tensor & x, c10::optional<int64_t> N, bool increasing) {
    const OptionalDeviceGuard device_guard(device_of(x));
    return at::native::vander(x, N, increasing);
}
Tensor var(const Tensor & self, bool unbiased) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var(self, unbiased);
}
Tensor var_dim(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var(self, dim, unbiased, keepdim);
}
Tensor & var_out_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_out(out, self, dim, unbiased, keepdim);
}
Tensor var_names_dim(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var(self, dim, unbiased, keepdim);
}
Tensor & var_out_names_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_out(out, self, dim, unbiased, keepdim);
}
std::tuple<Tensor,Tensor> var_mean(const Tensor & self, bool unbiased) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_mean(self, unbiased);
}
std::tuple<Tensor,Tensor> var_mean_dim(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_mean(self, dim, unbiased, keepdim);
}
std::tuple<Tensor,Tensor> var_mean_names_dim(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_mean(self, dim, unbiased, keepdim);
}
Tensor view_as(const Tensor & self, const Tensor & other) {
    // DeviceGuard omitted
    return at::native::view_as(self, other);
}
Tensor where_self(const Tensor & condition, const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::where(condition, self, other);
}
std::vector<Tensor> where(const Tensor & condition) {
    const OptionalDeviceGuard device_guard(device_of(condition));
    return at::native::where(condition);
}
Tensor _s_where(const Tensor & condition, const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_where(condition, self, other);
}
Tensor norm_except_dim(const Tensor & v, int64_t pow, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(v));
    return at::native::norm_except_dim(v, pow, dim);
}
Tensor _weight_norm(const Tensor & v, const Tensor & g, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(v));
    return at::native::_weight_norm(v, g, dim);
}
std::tuple<Tensor,Tensor> _weight_norm_differentiable_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(grad_w));
    return at::native::_weight_norm_differentiable_backward(grad_w, saved_v, saved_g, saved_norms, dim);
}
Tensor zeros_names(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {
    // DeviceGuard omitted
    return at::native::zeros(size, names, options);
}
Tensor zeros(IntArrayRef size, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::zeros(size, options);
}
Tensor & zeros_out_out(Tensor & out, IntArrayRef size) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::zeros_out(out, size);
}
Tensor zeros_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    const DeviceGuard device_guard(options.device());
    return at::native::zeros_like(self, options, memory_format);
}
Tensor _sparse_sum(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(self);
}
Tensor _sparse_sum_dtype(const Tensor & self, ScalarType dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(self, dtype);
}
Tensor _sparse_sum_dim(const Tensor & self, IntArrayRef dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(self, dim);
}
Tensor _sparse_sum_dim_dtype(const Tensor & self, IntArrayRef dim, ScalarType dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(self, dim, dtype);
}
Tensor _sparse_softmax_int(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_softmax(self, dim, dtype);
}
Tensor _sparse_softmax_Dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_softmax(self, dim, dtype);
}
Tensor _sparse_log_softmax_int(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_log_softmax(self, dim, dtype);
}
Tensor _sparse_log_softmax_Dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_log_softmax(self, dim, dtype);
}
Tensor norm_ScalarOpt_dtype(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dtype);
}
Tensor norm_Scalar(const Tensor & self, Scalar p) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p);
}
Tensor norm_ScalarOpt_dim_dtype(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dim, keepdim, dtype);
}
Tensor norm_ScalarOpt_dim(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dim, keepdim);
}
Tensor & norm_out_dtype_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_out(out, self, p, dim, keepdim, dtype);
}
Tensor & norm_out_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_out(out, self, p, dim, keepdim);
}
Tensor norm_names_ScalarOpt_dim_dtype(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dim, keepdim, dtype);
}
Tensor norm_names_ScalarOpt_dim(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dim, keepdim);
}
Tensor & norm_out_names_dtype_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_out(out, self, p, dim, keepdim, dtype);
}
Tensor & norm_out_names_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_out(out, self, p, dim, keepdim);
}
Tensor frobenius_norm(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frobenius_norm(self);
}
Tensor frobenius_norm_dim(const Tensor & self, IntArrayRef dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frobenius_norm(self, dim, keepdim);
}
Tensor & frobenius_norm_out_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frobenius_norm_out(out, self, dim, keepdim);
}
Tensor nuclear_norm(const Tensor & self, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm(self, keepdim);
}
Tensor & nuclear_norm_out_out(Tensor & out, const Tensor & self, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm_out(out, self, keepdim);
}
Tensor nuclear_norm_dim(const Tensor & self, IntArrayRef dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm(self, dim, keepdim);
}
Tensor & nuclear_norm_out_dim_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm_out(out, self, dim, keepdim);
}
Tensor & resize_as_(Tensor & self, const Tensor & the_template, c10::optional<MemoryFormat> memory_format) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::resize_as_(self, the_template, memory_format);
}
Tensor sub_Scalar(const Tensor & self, Scalar other, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub(self, other, alpha);
}
Tensor & sub__Scalar(Tensor & self, Scalar other, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub_(self, other, alpha);
}
Tensor rsub_Tensor(const Tensor & self, const Tensor & other, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsub(self, other, alpha);
}
Tensor rsub_Scalar(const Tensor & self, Scalar other, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsub(self, other, alpha);
}
Tensor _sparse_addmm(const Tensor & self, const Tensor & sparse, const Tensor & dense, Scalar beta, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_addmm(self, sparse, dense, beta, alpha);
}
Tensor sparse_coo_tensor_size(IntArrayRef size, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::sparse_coo_tensor(size, options);
}
Tensor sparse_coo_tensor_indices(const Tensor & indices, const Tensor & values, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::sparse_coo_tensor(indices, values, options);
}
Tensor sparse_coo_tensor_indices_size(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::sparse_coo_tensor(indices, values, size, options);
}
Tensor _sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::_sparse_coo_tensor_unsafe(indices, values, size, options);
}
void _validate_sparse_coo_tensor_args(const Tensor & indices, const Tensor & values, IntArrayRef size) {
    const OptionalDeviceGuard device_guard(device_of(indices));
 at::native::_validate_sparse_coo_tensor_args(indices, values, size);
}
Tensor to_dense_backward(const Tensor & grad, const Tensor & input) {
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::to_dense_backward(grad, input);
}
std::vector<Tensor> unbind_int(const Tensor & self, int64_t dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unbind(self, dim);
}
std::vector<Tensor> unbind_Dimname(const Tensor & self, Dimname dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unbind(self, dim);
}
Tensor to_mkldnn_backward(const Tensor & grad, const Tensor & input) {
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::to_mkldnn_backward(grad, input);
}
Tensor fake_quantize_per_tensor_affine(const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fake_quantize_per_tensor_affine(self, scale, zero_point, quant_min, quant_max);
}
Tensor fake_quantize_per_tensor_affine_backward(const Tensor & grad, const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fake_quantize_per_tensor_affine_backward(grad, self, scale, zero_point, quant_min, quant_max);
}
Tensor fake_quantize_per_channel_affine(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fake_quantize_per_channel_affine(self, scale, zero_point, axis, quant_min, quant_max);
}
Tensor fake_quantize_per_channel_affine_backward(const Tensor & grad, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fake_quantize_per_channel_affine_backward(grad, self, scale, zero_point, axis, quant_min, quant_max);
}
std::tuple<double,int64_t> _choose_qparams_per_tensor(const Tensor & self, bool reduce_range) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_choose_qparams_per_tensor(self, reduce_range);
}
Tensor to_dtype_layout(const Tensor & self, const TensorOptions & options, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {
    // DeviceGuard omitted
    return at::native::to(self, options, non_blocking, copy, memory_format);
}
Tensor to_device(const Tensor & self, Device device, ScalarType dtype, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {
    // DeviceGuard omitted
    return at::native::to(self, device, dtype, non_blocking, copy, memory_format);
}
Tensor to_dtype(const Tensor & self, ScalarType dtype, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {
    // DeviceGuard omitted
    return at::native::to(self, dtype, non_blocking, copy, memory_format);
}
Tensor to_other(const Tensor & self, const Tensor & other, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {
    // DeviceGuard omitted
    return at::native::to(self, other, non_blocking, copy, memory_format);
}
std::vector<Tensor> meshgrid(TensorList tensors) {
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::meshgrid(tensors);
}
Tensor cartesian_prod(TensorList tensors) {
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::cartesian_prod(tensors);
}
Tensor combinations(const Tensor & self, int64_t r, bool with_replacement) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::combinations(self, r, with_replacement);
}
Scalar item(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::item(self);
}
ScalarType result_type_Tensor(const Tensor & tensor, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(tensor));
    return at::native::result_type(tensor, other);
}
ScalarType result_type_Scalar(const Tensor & tensor, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(tensor));
    return at::native::result_type(tensor, other);
}
ScalarType result_type_Scalar_Tensor(Scalar scalar, const Tensor & tensor) {
    const OptionalDeviceGuard device_guard(device_of(tensor));
    return at::native::result_type(scalar, tensor);
}
ScalarType result_type_Scalar_Scalar(Scalar scalar1, Scalar scalar2) {
    // DeviceGuard omitted
    return at::native::result_type(scalar1, scalar2);
}
bool can_cast(ScalarType from, ScalarType to) {
    // DeviceGuard omitted
    return at::native::can_cast(from, to);
}
ScalarType promote_types(ScalarType type1, ScalarType type2) {
    // DeviceGuard omitted
    return at::native::promote_types(type1, type2);
}
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & input_bias, const Tensor & hidden_bias, const Tensor & cx, const Tensor & cy) {
    const OptionalDeviceGuard device_guard(device_of(input_gates));
    return at::native::_thnn_differentiable_lstm_cell_backward(grad_hy, grad_cy, input_gates, hidden_gates, input_bias, hidden_bias, cx, cy);
}
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_gru_cell_backward(const Tensor & grad_hy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias) {
    const OptionalDeviceGuard device_guard(device_of(grad_hy));
    return at::native::_thnn_differentiable_gru_cell_backward(grad_hy, input_gates, hidden_gates, hx, input_bias, hidden_bias);
}
std::tuple<Tensor,Tensor,Tensor> lstm_input(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::lstm(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor,Tensor> lstm_data(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::lstm(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> gru_input(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::gru(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> gru_data(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::gru(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> rnn_tanh_input(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_tanh(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> rnn_tanh_data(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::rnn_tanh(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> rnn_relu_input(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_relu(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> rnn_relu_data(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::rnn_relu(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::lstm_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
}
Tensor gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::gru_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
}
Tensor rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_tanh_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
}
Tensor rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_relu_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
}
std::tuple<Tensor,Tensor> quantized_lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_lstm_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
Tensor quantized_gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_gru_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
Tensor quantized_rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_rnn_relu_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
Tensor quantized_rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_rnn_tanh_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
std::tuple<Tensor,Tensor> _pack_padded_sequence(const Tensor & input, const Tensor & lengths, bool batch_first) {
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_pack_padded_sequence(input, lengths, batch_first);
}
Tensor _pack_padded_sequence_backward(const Tensor & grad, IntArrayRef input_size, const Tensor & batch_sizes, bool batch_first) {
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_pack_padded_sequence_backward(grad, input_size, batch_sizes, batch_first);
}
std::tuple<Tensor,Tensor> _pad_packed_sequence(const Tensor & data, const Tensor & batch_sizes, bool batch_first, Scalar padding_value, int64_t total_length) {
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::_pad_packed_sequence(data, batch_sizes, batch_first, padding_value, total_length);
}
Tensor masked_fill_Scalar(const Tensor & self, const Tensor & mask, Scalar value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill(self, mask, value);
}
Tensor masked_fill_Tensor(const Tensor & self, const Tensor & mask, const Tensor & value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill(self, mask, value);
}
Tensor masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_scatter(self, mask, source);
}
Tensor index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_add(self, dim, index, source);
}
Tensor index_add_dimname(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_add(self, dim, index, source);
}
Tensor index_fill_int_Scalar(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill(self, dim, index, value);
}
Tensor index_fill_int_Tensor(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill(self, dim, index, value);
}
Tensor & index_fill__Dimname_Scalar(Tensor & self, Dimname dim, const Tensor & index, Scalar value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill_(self, dim, index, value);
}
Tensor & index_fill__Dimname_Tensor(Tensor & self, Dimname dim, const Tensor & index, const Tensor & value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill_(self, dim, index, value);
}
Tensor index_fill_Dimname_Scalar(const Tensor & self, Dimname dim, const Tensor & index, Scalar value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill(self, dim, index, value);
}
Tensor index_fill_Dimname_Tensor(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill(self, dim, index, value);
}
Tensor scatter_src(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter(self, dim, index, src);
}
Tensor scatter_value(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter(self, dim, index, value);
}
Tensor scatter_dimname_src(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter(self, dim, index, src);
}
Tensor scatter_dimname_value(const Tensor & self, Dimname dim, const Tensor & index, Scalar value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter(self, dim, index, value);
}
Tensor scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter_add(self, dim, index, src);
}
Tensor scatter_add_dimname(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter_add(self, dim, index, src);
}
Tensor & lt__Scalar(Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lt_(self, other);
}
Tensor & lt__Tensor(Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lt_(self, other);
}
Tensor & gt__Scalar(Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gt_(self, other);
}
Tensor & gt__Tensor(Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gt_(self, other);
}
Tensor & le__Scalar(Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::le_(self, other);
}
Tensor & le__Tensor(Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::le_(self, other);
}
Tensor & ge__Scalar(Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ge_(self, other);
}
Tensor & ge__Tensor(Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ge_(self, other);
}
Tensor & eq__Scalar(Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::eq_(self, other);
}
Tensor & eq__Tensor(Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::eq_(self, other);
}
Tensor & ne__Scalar(Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ne_(self, other);
}
Tensor & ne__Tensor(Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ne_(self, other);
}
Tensor bitwise_and_Scalar(const Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_and(self, other);
}
Tensor bitwise_and_Tensor(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_and(self, other);
}
Tensor & bitwise_and__Scalar(Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_and_(self, other);
}
Tensor & bitwise_and__Tensor(Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_and_(self, other);
}
Tensor __and___Scalar(const Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__and__(self, other);
}
Tensor __and___Tensor(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__and__(self, other);
}
Tensor & __iand___Scalar(Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__iand__(self, other);
}
Tensor & __iand___Tensor(Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__iand__(self, other);
}
Tensor bitwise_or_Scalar(const Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_or(self, other);
}
Tensor bitwise_or_Tensor(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_or(self, other);
}
Tensor & bitwise_or__Scalar(Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_or_(self, other);
}
Tensor & bitwise_or__Tensor(Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_or_(self, other);
}
Tensor __or___Scalar(const Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__or__(self, other);
}
Tensor __or___Tensor(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__or__(self, other);
}
Tensor & __ior___Scalar(Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__ior__(self, other);
}
Tensor & __ior___Tensor(Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__ior__(self, other);
}
Tensor bitwise_xor_Scalar(const Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_xor(self, other);
}
Tensor bitwise_xor_Tensor(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_xor(self, other);
}
Tensor & bitwise_xor__Scalar(Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_xor_(self, other);
}
Tensor & bitwise_xor__Tensor(Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_xor_(self, other);
}
Tensor __xor___Scalar(const Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__xor__(self, other);
}
Tensor __xor___Tensor(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__xor__(self, other);
}
Tensor & __ixor___Scalar(Tensor & self, Scalar other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__ixor__(self, other);
}
Tensor & __ixor___Tensor(Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__ixor__(self, other);
}
Tensor & atan2_(Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan2_(self, other);
}
Tensor & digamma_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::digamma_(self);
}
Tensor & polygamma_(Tensor & self, int64_t n) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::polygamma_(self, n);
}
Tensor & addcdiv_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcdiv_(self, tensor1, tensor2, value);
}
Tensor & random__from(Tensor & self, int64_t from, c10::optional<int64_t> to, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::random_(self, from, to, generator);
}
Tensor & random__to(Tensor & self, int64_t to, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::random_(self, to, generator);
}
Tensor & random_(Tensor & self, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::random_(self, generator);
}
Tensor & uniform_(Tensor & self, double from, double to, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::uniform_(self, from, to, generator);
}
Tensor & cauchy_(Tensor & self, double median, double sigma, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cauchy_(self, median, sigma, generator);
}
Tensor & log_normal_(Tensor & self, double mean, double std, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_normal_(self, mean, std, generator);
}
Tensor & exponential_(Tensor & self, double lambd, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::exponential_(self, lambd, generator);
}
Tensor & geometric_(Tensor & self, double p, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::geometric_(self, p, generator);
}
Tensor diag(const Tensor & self, int64_t diagonal) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diag(self, diagonal);
}
Tensor & cross_out_out(Tensor & out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cross_out(out, self, other, dim);
}
Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cross(self, other, dim);
}
Tensor triu(const Tensor & self, int64_t diagonal) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triu(self, diagonal);
}
Tensor tril(const Tensor & self, int64_t diagonal) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tril(self, diagonal);
}
Tensor & index_select_out_dimname_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_select_out(out, self, dim, index);
}
Tensor index_select_dimname(const Tensor & self, Dimname dim, const Tensor & index) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_select(self, dim, index);
}
std::vector<Tensor> nonzero_numpy(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nonzero_numpy(self);
}
Tensor & gather_out_dimname_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gather_out(out, self, dim, index, sparse_grad);
}
Tensor gather_dimname(const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gather(self, dim, index, sparse_grad);
}
Tensor _gather_sparse_backward(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & grad) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_gather_sparse_backward(self, dim, index, grad);
}
Tensor & addcmul_out_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcmul_out(out, self, tensor1, tensor2, value);
}
Tensor addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcmul(self, tensor1, tensor2, value);
}
Tensor & addcmul_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcmul_(self, tensor1, tensor2, value);
}
Tensor & addcdiv_out_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcdiv_out(out, self, tensor1, tensor2, value);
}
Tensor addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcdiv(self, tensor1, tensor2, value);
}
std::tuple<Tensor &,Tensor &> triangular_solve_out_X(Tensor & X, Tensor & M, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triangular_solve_out(X, M, self, A, upper, transpose, unitriangular);
}
std::tuple<Tensor,Tensor> triangular_solve(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triangular_solve(self, A, upper, transpose, unitriangular);
}
std::tuple<Tensor &,Tensor &> symeig_out_e(Tensor & e, Tensor & V, const Tensor & self, bool eigenvectors, bool upper) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::symeig_out(e, V, self, eigenvectors, upper);
}
std::tuple<Tensor,Tensor> symeig(const Tensor & self, bool eigenvectors, bool upper) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::symeig(self, eigenvectors, upper);
}
std::tuple<Tensor &,Tensor &,Tensor &> svd_out_U(Tensor & U, Tensor & S, Tensor & V, const Tensor & self, bool some, bool compute_uv) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::svd_out(U, S, V, self, some, compute_uv);
}
std::tuple<Tensor,Tensor,Tensor> svd(const Tensor & self, bool some, bool compute_uv) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::svd(self, some, compute_uv);
}
Tensor & cholesky_out_out(Tensor & out, const Tensor & self, bool upper) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky_out(out, self, upper);
}
Tensor cholesky(const Tensor & self, bool upper) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky(self, upper);
}
Tensor & cholesky_solve_out_out(Tensor & out, const Tensor & self, const Tensor & input2, bool upper) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky_solve_out(out, self, input2, upper);
}
Tensor cholesky_solve(const Tensor & self, const Tensor & input2, bool upper) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky_solve(self, input2, upper);
}
std::tuple<Tensor,Tensor> solve(const Tensor & self, const Tensor & A) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::solve(self, A);
}
std::tuple<Tensor &,Tensor &> solve_out_solution(Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::solve_out(solution, lu, self, A);
}
std::tuple<Tensor &,Tensor &> qr_out_Q(Tensor & Q, Tensor & R, const Tensor & self, bool some) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::qr_out(Q, R, self, some);
}
std::tuple<Tensor,Tensor> qr(const Tensor & self, bool some) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::qr(self, some);
}
Tensor & lu_solve_out_out(Tensor & out, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lu_solve_out(out, self, LU_data, LU_pivots);
}
Tensor lu_solve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lu_solve(self, LU_data, LU_pivots);
}
Tensor & digamma_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::digamma_out(out, self);
}
Tensor digamma(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::digamma(self);
}
Tensor & polygamma_out_out(Tensor & out, int64_t n, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::polygamma_out(out, n, self);
}
Tensor polygamma(int64_t n, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::polygamma(n, self);
}
Tensor sign(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sign(self);
}
Tensor & sign_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sign_(self);
}
Tensor dist(const Tensor & self, const Tensor & other, Scalar p) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dist(self, other, p);
}
Tensor & atan2_out_out(Tensor & out, const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan2_out(out, self, other);
}
Tensor atan2(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan2(self, other);
}
Tensor & min_out_out(Tensor & out, const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_out(out, self, other);
}
Tensor min_other(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min(self, other);
}
Tensor & max_out_out(Tensor & out, const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_out(out, self, other);
}
Tensor max_other(const Tensor & self, const Tensor & other) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max(self, other);
}
std::tuple<Tensor &,Tensor &> sort_out_dimname_values(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool descending) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sort_out(values, indices, self, dim, descending);
}
std::tuple<Tensor,Tensor> sort_dimname(const Tensor & self, Dimname dim, bool descending) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sort(self, dim, descending);
}
Tensor argsort(const Tensor & self, int64_t dim, bool descending) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::argsort(self, dim, descending);
}
Tensor argsort_dimname(const Tensor & self, Dimname dim, bool descending) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::argsort(self, dim, descending);
}
Tensor all(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all(self);
}
Tensor & normal_(Tensor & self, double mean, double std, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::normal_(self, mean, std, generator);
}
Tensor & normal_out_Tensor_float_out(Tensor & out, const Tensor & mean, double std, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::normal_out(out, mean, std, generator);
}
Tensor normal_Tensor_float(const Tensor & mean, double std, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(mean));
    return at::native::normal(mean, std, generator);
}
Tensor & normal_out_float_Tensor_out(Tensor & out, double mean, const Tensor & std, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::normal_out(out, mean, std, generator);
}
Tensor normal_float_Tensor(double mean, const Tensor & std, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(std));
    return at::native::normal(mean, std, generator);
}
Tensor & normal_out_Tensor_Tensor_out(Tensor & out, const Tensor & mean, const Tensor & std, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::normal_out(out, mean, std, generator);
}
Tensor normal_Tensor_Tensor(const Tensor & mean, const Tensor & std, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(mean));
    return at::native::normal(mean, std, generator);
}
Tensor normal_float_float(double mean, double std, IntArrayRef size, c10::optional<Generator> generator, const TensorOptions & options) {
    const DeviceGuard device_guard(options.device());
    return at::native::normal(mean, std, size, generator, options);
}
Tensor & normal_out_float_float_out(Tensor & out, double mean, double std, IntArrayRef size, c10::optional<Generator> generator) {
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::normal_out(out, mean, std, size, generator);
}
Tensor alias(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::alias(self);
}
Tensor & mse_loss_out_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mse_loss_out(out, self, target, reduction);
}
Tensor mse_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mse_loss(self, target, reduction);
}
Tensor & l1_loss_out_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::l1_loss_out(out, self, target, reduction);
}
Tensor l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::l1_loss(self, target, reduction);
}
Tensor l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::l1_loss_backward(grad_output, self, target, reduction);
}
Tensor & multilabel_margin_loss_out_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multilabel_margin_loss_out(out, self, target, reduction);
}
Tensor multilabel_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multilabel_margin_loss(self, target, reduction);
}
Tensor & nll_loss_out_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss_out(out, self, target, weight, reduction, ignore_index);
}
Tensor nll_loss(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss(self, target, weight, reduction, ignore_index);
}
Tensor & nll_loss2d_out_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss2d_out(out, self, target, weight, reduction, ignore_index);
}
Tensor nll_loss2d(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss2d(self, target, weight, reduction, ignore_index);
}
Tensor smooth_l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::smooth_l1_loss(self, target, reduction);
}
Tensor smooth_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::smooth_l1_loss_backward(grad_output, self, target, reduction);
}
Tensor & soft_margin_loss_out_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::soft_margin_loss_out(out, self, target, reduction);
}
Tensor soft_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::soft_margin_loss(self, target, reduction);
}
Tensor & soft_margin_loss_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::soft_margin_loss_backward_out(grad_input, grad_output, self, target, reduction);
}
Tensor soft_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::soft_margin_loss_backward(grad_output, self, target, reduction);
}
Tensor & elu_out_out(Tensor & out, const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::elu_out(out, self, alpha, scale, input_scale);
}
Tensor elu(const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::elu(self, alpha, scale, input_scale);
}
Tensor elu_backward(const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::elu_backward(grad_output, alpha, scale, input_scale, output);
}
Tensor & elu_(Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::elu_(self, alpha, scale, input_scale);
}
Tensor & hardsigmoid_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardsigmoid_out(out, self);
}
Tensor & hardsigmoid_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardsigmoid_(self);
}
Tensor hardtanh_backward(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardtanh_backward(grad_output, self, min_val, max_val);
}
Tensor & hardswish_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardswish_out(out, self);
}
Tensor hardswish(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardswish(self);
}
Tensor & hardswish_(Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardswish_(self);
}
Tensor leaky_relu_backward(const Tensor & grad_output, const Tensor & self, Scalar negative_slope, bool self_is_result) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::leaky_relu_backward(grad_output, self, negative_slope, self_is_result);
}
Tensor & log_sigmoid_out_out(Tensor & out, const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_sigmoid_out(out, self);
}
Tensor log_sigmoid(const Tensor & self) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_sigmoid(self);
}
Tensor rrelu_with_noise_backward(const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, bool self_is_result) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rrelu_with_noise_backward(grad_output, self, noise, lower, upper, training, self_is_result);
}
Tensor & softplus_out_out(Tensor & out, const Tensor & self, Scalar beta, Scalar threshold) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softplus_out(out, self, beta, threshold);
}
Tensor softplus(const Tensor & self, Scalar beta, Scalar threshold) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softplus(self, beta, threshold);
}
Tensor softplus_backward(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softplus_backward(grad_output, self, beta, threshold, output);
}
Tensor & softshrink_out_out(Tensor & out, const Tensor & self, Scalar lambd) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softshrink_out(out, self, lambd);
}
Tensor softshrink(const Tensor & self, Scalar lambd) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softshrink(self, lambd);
}
Tensor softshrink_backward(const Tensor & grad_output, const Tensor & self, Scalar lambd) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softshrink_backward(grad_output, self, lambd);
}
Tensor adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d(self, output_size);
}
Tensor sigmoid_backward(const Tensor & grad_output, const Tensor & output) {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::sigmoid_backward(grad_output, output);
}
Tensor tanh_backward(const Tensor & grad_output, const Tensor & output) {
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::tanh_backward(grad_output, output);
}
Tensor & thnn_conv2d_out_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv2d_out(out, self, weight, kernel_size, bias, stride, padding);
}
Tensor thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv2d(self, weight, kernel_size, bias, stride, padding);
}
Tensor & thnn_conv_depthwise2d_out_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_depthwise2d_out(out, self, weight, kernel_size, bias, stride, padding, dilation);
}
Tensor thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_depthwise2d(self, weight, kernel_size, bias, stride, padding, dilation);
}
Tensor & slow_conv3d_out_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv3d_out(out, self, weight, kernel_size, bias, stride, padding);
}
Tensor slow_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv3d(self, weight, kernel_size, bias, stride, padding);
}
Tensor isfinite(const Tensor & self) {
    // DeviceGuard omitted
    return at::native::isfinite(self);
}
Tensor isinf(const Tensor & self) {
    // DeviceGuard omitted
    return at::native::isinf(self);
}
Tensor _add_batch_dim(const Tensor & self, int64_t batch_dim, int64_t level) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_add_batch_dim(self, batch_dim, level);
}
Tensor _remove_batch_dim(const Tensor & self, int64_t level, int64_t batch_size, int64_t out_dim) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_remove_batch_dim(self, level, batch_size, out_dim);
}
Tensor _test_serialization_subcmul(const Tensor & self, const Tensor & other, Scalar alpha) {
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_test_serialization_subcmul(self, other, alpha);
}

}  // namespace TypeDefault

TORCH_LIBRARY(aten, m) {
  m.def("_cast_Byte(Tensor self, bool non_blocking=False) -> Tensor");
  m.impl("_cast_Byte",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_cast_Byte)));
  m.def("_cast_Char(Tensor self, bool non_blocking=False) -> Tensor");
  m.impl("_cast_Char",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_cast_Char)));
  m.def("_cast_Double(Tensor self, bool non_blocking=False) -> Tensor");
  m.impl("_cast_Double",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_cast_Double)));
  m.def("_cast_Float(Tensor self, bool non_blocking=False) -> Tensor");
  m.impl("_cast_Float",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_cast_Float)));
  m.def("_cast_Int(Tensor self, bool non_blocking=False) -> Tensor");
  m.impl("_cast_Int",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_cast_Int)));
  m.def("_cast_Long(Tensor self, bool non_blocking=False) -> Tensor");
  m.impl("_cast_Long",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_cast_Long)));
  m.def("_cast_Short(Tensor self, bool non_blocking=False) -> Tensor");
  m.impl("_cast_Short",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_cast_Short)));
  m.def("_cast_Half(Tensor self, bool non_blocking=False) -> Tensor");
  m.impl("_cast_Half",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_cast_Half)));
  m.def("backward(Tensor self, Tensor? gradient=None, bool? retain_graph=None, bool create_graph=False) -> ()");
  m.def("set_data(Tensor(a!) self, Tensor new_data) -> ()");
  m.def("data(Tensor self) -> Tensor");
  m.def("is_leaf(Tensor self) -> bool");
  m.def("output_nr(Tensor self) -> int");
  m.def("_version(Tensor self) -> int");
  m.def("requires_grad_(Tensor(a!) self, bool requires_grad=True) -> Tensor(a!)");
  m.def("retain_grad(Tensor(a!) self) -> ()");
  m.def("rename_(Tensor(a!) self, Dimname[]? names) -> Tensor(a!)");
  m.impl("rename_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::rename_));
  m.def("rename(Tensor(a) self, Dimname[]? names) -> Tensor(a)");
  m.impl("rename",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::rename));
  m.def("align_to(Tensor(a) self, Dimname[] names) -> Tensor(a)");
  m.impl("align_to",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::align_to));
  m.def("align_to.ellipsis_idx(Tensor(a) self, Dimname[] order, int ellipsis_idx) -> Tensor(a)");
  m.impl("align_to.ellipsis_idx",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::align_to_ellipsis_idx));
  m.def("align_as(Tensor self, Tensor other) -> Tensor");
  m.impl("align_as",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::align_as)));
  m.def("align_tensors(Tensor[] tensors) -> Tensor[]");
  m.impl("align_tensors",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::align_tensors)));
  m.def("refine_names(Tensor(a) self, Dimname[] names) -> Tensor(a)");
  m.impl("refine_names",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::refine_names));
  m.def("unflatten.Dimname(Tensor self, Dimname dim, int[] sizes, Dimname[] names) -> Tensor");
  m.impl("unflatten.Dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::unflatten_Dimname));
  m.def("unflatten.int(Tensor self, int dim, int[] sizes, Dimname[] names) -> Tensor");
  m.impl("unflatten.int",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::unflatten_int));
  m.def("_use_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank) -> bool");
  m.def("_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank, bool deterministic, bool zero_infinity) -> (Tensor, Tensor)");
  m.def("_use_cudnn_rnn_flatten_weight() -> bool");
  m.impl("_use_cudnn_rnn_flatten_weight",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_use_cudnn_rnn_flatten_weight)));
  m.def("_cudnn_rnn_flatten_weight(Tensor[] weight_arr, int weight_stride0, int input_size, int mode, int hidden_size, int num_layers, bool batch_first, bool bidirectional) -> Tensor");
  m.def("_cudnn_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor? weight_buf, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)");
  m.def("_cudnn_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])");
  m.def("_cudnn_init_dropout_state(float dropout, bool train, int dropout_seed, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor");
  m.def("_debug_has_internal_overlap(Tensor self) -> int");
  m.impl("_debug_has_internal_overlap",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_debug_has_internal_overlap)));
  m.def("_fused_dropout(Tensor self, float p, Generator? generator=None) -> (Tensor, Tensor)");
  m.def("_masked_scale(Tensor self, Tensor mask, float scale) -> Tensor");
  m.def("_sobol_engine_draw(Tensor quasi, int n, Tensor sobolstate, int dimension, int num_generated, ScalarType? dtype) -> (Tensor, Tensor)");
  m.impl("_sobol_engine_draw",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_sobol_engine_draw)));
  m.def("_sobol_engine_ff_(Tensor(a!) self, int n, Tensor sobolstate, int dimension, int num_generated) -> Tensor(a!)");
  m.impl("_sobol_engine_ff_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_sobol_engine_ff_));
  m.def("_sobol_engine_scramble_(Tensor(a!) self, Tensor ltm, int dimension) -> Tensor(a!)");
  m.impl("_sobol_engine_scramble_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_sobol_engine_scramble_));
  m.def("_sobol_engine_initialize_state_(Tensor(a!) self, int dimension) -> Tensor(a!)");
  m.impl("_sobol_engine_initialize_state_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_sobol_engine_initialize_state_));
  m.def("_reshape_from_tensor(Tensor self, Tensor shape) -> Tensor");
  m.impl("_reshape_from_tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_reshape_from_tensor)));
  m.def("_shape_as_tensor(Tensor self) -> Tensor");
  m.impl("_shape_as_tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_shape_as_tensor)));
  m.def("dropout(Tensor input, float p, bool train) -> Tensor");
  m.impl("dropout",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::dropout)));
  m.def("dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)");
  m.impl("dropout_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::dropout_));
  m.def("feature_dropout(Tensor input, float p, bool train) -> Tensor");
  m.impl("feature_dropout",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::feature_dropout)));
  m.def("feature_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)");
  m.impl("feature_dropout_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::feature_dropout_));
  m.def("alpha_dropout(Tensor input, float p, bool train) -> Tensor");
  m.impl("alpha_dropout",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::alpha_dropout)));
  m.def("alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)");
  m.impl("alpha_dropout_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::alpha_dropout_));
  m.def("feature_alpha_dropout(Tensor input, float p, bool train) -> Tensor");
  m.impl("feature_alpha_dropout",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::feature_alpha_dropout)));
  m.def("feature_alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)");
  m.impl("feature_alpha_dropout_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::feature_alpha_dropout_));
  m.def("abs(Tensor self) -> Tensor");
  m.impl("abs",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::abs)));
  m.def("abs_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("abs_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::abs_));
  m.def("abs.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("abs.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::abs_out_out));
  m.def("absolute(Tensor self) -> Tensor");
  m.def("absolute_(Tensor(a!) self) -> Tensor(a!)");
  m.def("absolute.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("angle(Tensor self) -> Tensor");
  m.impl("angle",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::angle)));
  m.def("angle.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("angle.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::angle_out_out));
  m.def("view_as_real(Tensor(a) self) -> Tensor(a)");
  m.impl("view_as_real",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::view_as_real)));
  m.def("view_as_complex(Tensor(a) self) -> Tensor(a)");
  m.impl("view_as_complex",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::view_as_complex)));
  m.def("real(Tensor(a) self) -> Tensor(a)");
  m.impl("real",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::real)));
  m.def("imag(Tensor(a) self) -> Tensor(a)");
  m.impl("imag",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::imag)));
  m.def("conj(Tensor self) -> Tensor");
  m.impl("conj",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::conj)));
  m.def("conj.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("conj.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::conj_out_out));
  m.def("acos(Tensor self) -> Tensor");
  m.impl("acos",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::acos)));
  m.def("acos_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("acos_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::acos_));
  m.def("acos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("acos.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::acos_out_out));
  m.def("avg_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, bool ceil_mode=False, bool count_include_pad=True) -> Tensor");
  m.impl("avg_pool1d",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::avg_pool1d)));
  m.def("adaptive_avg_pool1d(Tensor self, int[1] output_size) -> Tensor");
  m.impl("adaptive_avg_pool1d",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::adaptive_avg_pool1d)));
  m.def("adaptive_max_pool1d(Tensor self, int[1] output_size) -> (Tensor, Tensor)");
  m.impl("adaptive_max_pool1d",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::adaptive_max_pool1d)));
  m.def("add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor");
  m.def("add_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)");
  m.def("add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor");
  m.impl("add.Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::add_Scalar)));
  m.def("add_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)");
  m.impl("add_.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::add__Scalar));
  m.def("addmv(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor");
  m.impl("addmv",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::addmv)));
  m.def("addmv_(Tensor(a!) self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)");
  m.impl("addmv_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::addmv_));
  m.def("addmv.out(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.impl("addmv.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::addmv_out_out));
  m.def("_addmv_impl_(Tensor(a!) self, Tensor self2, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)");
  m.def("addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor");
  m.impl("addr",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::addr)));
  m.def("addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)");
  m.impl("addr_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::addr_));
  m.def("addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.impl("addr.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::addr_out_out));
  m.def("affine_grid_generator(Tensor theta, int[] size, bool align_corners) -> Tensor");
  m.impl("affine_grid_generator",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::affine_grid_generator)));
  m.def("affine_grid_generator_backward(Tensor grad, int[] size, bool align_corners) -> Tensor");
  m.impl("affine_grid_generator_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::affine_grid_generator_backward)));
  m.def("all.dim(Tensor self, int dim, bool keepdim=False) -> Tensor");
  m.impl("all.dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::all_dim)));
  m.def("all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("all.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::all_out_out));
  m.def("all.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor");
  m.impl("all.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::all_dimname));
  m.def("all.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("all.dimname_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::all_out_dimname_out));
  m.def("allclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> bool");
  m.impl("allclose",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::allclose)));
  m.def("any.dim(Tensor self, int dim, bool keepdim=False) -> Tensor");
  m.impl("any.dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::any_dim)));
  m.def("any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("any.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::any_out_out));
  m.def("any.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor");
  m.impl("any.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::any_dimname));
  m.def("any.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("any.dimname_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::any_out_dimname_out));
  m.def("arange(Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("arange",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::arange)));
  m.def("arange.start(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("arange.start",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::arange_start)));
  m.def("arange.start_step(Scalar start, Scalar end, Scalar step, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("arange.start_step",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::arange_start_step)));
  m.def("arange.out(Scalar end, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("arange.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::arange_out_out));
  m.def("arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_dim_arange(Tensor like, int dim) -> Tensor");
  m.impl("_dim_arange",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_dim_arange)));
  m.def("argmax(Tensor self, int? dim=None, bool keepdim=False) -> Tensor");
  m.def("argmin(Tensor self, int? dim=None, bool keepdim=False) -> Tensor");
  m.def("acosh(Tensor self) -> Tensor");
  m.impl("acosh",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::acosh)));
  m.def("acosh_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("acosh_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::acosh_));
  m.def("acosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("acosh.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::acosh_out_out));
  m.def("asinh(Tensor self) -> Tensor");
  m.impl("asinh",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::asinh)));
  m.def("asinh_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("asinh_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::asinh_));
  m.def("asinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("asinh.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::asinh_out_out));
  m.def("atanh(Tensor self) -> Tensor");
  m.impl("atanh",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::atanh)));
  m.def("atanh_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("atanh_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::atanh_));
  m.def("atanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("atanh.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::atanh_out_out));
  m.def("as_strided(Tensor(a) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a)");
  m.def("as_strided_(Tensor(a!) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a!)");
  m.impl("as_strided_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::as_strided_));
  m.def("asin(Tensor self) -> Tensor");
  m.impl("asin",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::asin)));
  m.def("asin_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("asin_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::asin_));
  m.def("asin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("asin.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::asin_out_out));
  m.def("atan(Tensor self) -> Tensor");
  m.impl("atan",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::atan)));
  m.def("atan_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("atan_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::atan_));
  m.def("atan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("atan.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::atan_out_out));
  m.def("baddbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor");
  m.def("baddbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)");
  m.def("_baddbmm_mkl_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)");
  m.impl("_baddbmm_mkl_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_baddbmm_mkl_));
  m.def("baddbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("bartlett_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("bartlett_window",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::bartlett_window)));
  m.def("bartlett_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("bartlett_window.periodic",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::bartlett_window_periodic)));
  m.def("batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> Tensor");
  m.impl("batch_norm",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::batch_norm));
  m.def("quantized_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> Tensor");
  m.def("_batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, Tensor, int)");
  m.impl("_batch_norm_impl_index",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_batch_norm_impl_index));
  m.def("_batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask, Tensor reservedSpace) -> (Tensor, Tensor, Tensor)");
  m.impl("_batch_norm_impl_index_backward",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_batch_norm_impl_index_backward));
  m.def("bernoulli(Tensor self, *, Generator? generator=None) -> Tensor");
  m.impl("bernoulli",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::bernoulli));
  m.def("bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)");
  m.impl("bernoulli.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::bernoulli_out_out));
  m.def("bernoulli_.Tensor(Tensor(a!) self, Tensor p, *, Generator? generator=None) -> Tensor(a!)");
  m.impl("bernoulli_.Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::bernoulli__Tensor));
  m.def("bernoulli_.float(Tensor(a!) self, float p=0.5, *, Generator? generator=None) -> Tensor(a!)");
  m.impl("bernoulli_.float",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::bernoulli__float));
  m.def("bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> Tensor");
  m.impl("bernoulli.p",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::bernoulli_p));
  m.def("bilinear(Tensor input1, Tensor input2, Tensor weight, Tensor? bias) -> Tensor");
  m.impl("bilinear",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::bilinear));
  m.def("binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor");
  m.def("binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("binary_cross_entropy_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor");
  m.def("binary_cross_entropy_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor");
  m.impl("binary_cross_entropy_with_logits",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::binary_cross_entropy_with_logits));
  m.def("binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor");
  m.impl("binary_cross_entropy_with_logits_backward",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::binary_cross_entropy_with_logits_backward));
  m.def("bincount(Tensor self, Tensor? weights=None, int minlength=0) -> Tensor");
  m.def("bitwise_not(Tensor self) -> Tensor");
  m.impl("bitwise_not",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::bitwise_not)));
  m.def("bitwise_not_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("bitwise_not_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::bitwise_not_));
  m.def("bitwise_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logical_not(Tensor self) -> Tensor");
  m.impl("logical_not",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::logical_not)));
  m.def("logical_not_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("logical_not_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::logical_not_));
  m.def("logical_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logical_xor(Tensor self, Tensor other) -> Tensor");
  m.impl("logical_xor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::logical_xor)));
  m.def("logical_xor_(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.impl("logical_xor_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::logical_xor_));
  m.def("logical_xor.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logical_and(Tensor self, Tensor other) -> Tensor");
  m.impl("logical_and",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::logical_and)));
  m.def("logical_and_(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.impl("logical_and_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::logical_and_));
  m.def("logical_and.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logical_or(Tensor self, Tensor other) -> Tensor");
  m.impl("logical_or",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::logical_or)));
  m.def("logical_or_(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.impl("logical_or_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::logical_or_));
  m.def("logical_or.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("blackman_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("blackman_window",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::blackman_window)));
  m.def("blackman_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("blackman_window.periodic",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::blackman_window_periodic)));
  m.def("bmm(Tensor self, Tensor mat2) -> Tensor");
  m.def("_bmm(Tensor self, Tensor mat2, *, bool deterministic=False) -> Tensor");
  m.def("bmm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_bmm.out(Tensor self, Tensor mat2, *, bool deterministic=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("broadcast_tensors(Tensor[] tensors) -> Tensor[]");
  m.impl("broadcast_tensors",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::broadcast_tensors)));
  m.def("cat(Tensor[] tensors, int dim=0) -> Tensor");
  m.impl("cat",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::cat)));
  m.def("cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("cat.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cat_out_out));
  m.def("cat.names(Tensor[] tensors, Dimname dim) -> Tensor");
  m.impl("cat.names",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cat_names));
  m.def("cat.names_out(Tensor[] tensors, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("cat.names_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cat_out_names_out));
  m.def("block_diag(Tensor[] tensors) -> Tensor");
  m.impl("block_diag",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::block_diag)));
  m.def("ceil(Tensor self) -> Tensor");
  m.impl("ceil",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::ceil)));
  m.def("ceil_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("ceil_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::ceil_));
  m.def("ceil.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("chain_matmul(Tensor[] matrices) -> Tensor");
  m.impl("chain_matmul",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::chain_matmul)));
  m.def("chunk(Tensor(a) self, int chunks, int dim=0) -> Tensor(a)[]");
  m.impl("chunk",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::chunk)));
  m.def("clamp(Tensor self, Scalar? min=None, Scalar? max=None) -> Tensor");
  m.def("clamp_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> Tensor(a!)");
  m.impl("clamp_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::clamp_));
  m.def("clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("clamp.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::clamp_out_out));
  m.def("clamp_max(Tensor self, Scalar max) -> Tensor");
  m.impl("clamp_max",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::clamp_max)));
  m.def("clamp_max_(Tensor(a!) self, Scalar max) -> Tensor(a!)");
  m.impl("clamp_max_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::clamp_max_));
  m.def("clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("clamp_max.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::clamp_max_out_out));
  m.def("clamp_min(Tensor self, Scalar min) -> Tensor");
  m.impl("clamp_min",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::clamp_min)));
  m.def("clamp_min_(Tensor(a!) self, Scalar min) -> Tensor(a!)");
  m.impl("clamp_min_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::clamp_min_));
  m.def("clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("clamp_min.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::clamp_min_out_out));
  m.def("cudnn_is_acceptable(Tensor self) -> bool");
  m.impl("cudnn_is_acceptable",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::cudnn_is_acceptable)));
  m.def("constant_pad_nd(Tensor self, int[] pad, Scalar value=0) -> Tensor");
  m.impl("constant_pad_nd",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::constant_pad_nd)));
  m.def("contiguous(Tensor(a) self, *, MemoryFormat memory_format=contiguous_format) -> Tensor(a)");
  m.impl("contiguous",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::contiguous)));
  m.def("convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor");
  m.impl("convolution",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::convolution));
  m.def("convolution_overrideable(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor");
  m.impl("convolution_overrideable",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::convolution_overrideable));
  m.def("convolution_backward_overrideable(Tensor grad_output, Tensor input, Tensor weight, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)");
  m.impl("convolution_backward_overrideable",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::convolution_backward_overrideable)));
  m.def("_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> Tensor");
  m.impl("_convolution",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_convolution));
  m.def("_convolution_nogroup(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding) -> Tensor");
  m.impl("_convolution_nogroup",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_convolution_nogroup));
  m.def("_convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.impl("_convolution_double_backward",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_convolution_double_backward));
  m.def("conv1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] dilation=1, int groups=1) -> Tensor");
  m.impl("conv1d",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::conv1d));
  m.def("conv2d(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, int groups=1) -> Tensor");
  m.impl("conv2d",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::conv2d));
  m.def("conv3d(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1, int groups=1) -> Tensor");
  m.impl("conv3d",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::conv3d));
  m.def("conv_tbc(Tensor self, Tensor weight, Tensor bias, int pad=0) -> Tensor");
  m.impl("conv_tbc",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::conv_tbc)));
  m.def("conv_tbc_backward(Tensor self, Tensor input, Tensor weight, Tensor bias, int pad) -> (Tensor, Tensor, Tensor)");
  m.impl("conv_tbc_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::conv_tbc_backward)));
  m.def("conv_transpose1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] output_padding=0, int groups=1, int[1] dilation=1) -> Tensor");
  m.impl("conv_transpose1d",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::conv_transpose1d));
  m.def("conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int groups=1, int[2] dilation=1) -> Tensor");
  m.impl("conv_transpose2d.input",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::conv_transpose2d_input));
  m.def("conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int groups=1, int[3] dilation=1) -> Tensor");
  m.impl("conv_transpose3d.input",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::conv_transpose3d_input));
  m.def("copy_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)");
  m.def("_copy_from(Tensor self, Tensor dst, bool non_blocking=False) -> Tensor");
  m.def("cos(Tensor self) -> Tensor");
  m.impl("cos",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::cos)));
  m.def("cos_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("cos_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cos_));
  m.def("cos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("cos.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cos_out_out));
  m.def("cosh(Tensor self) -> Tensor");
  m.impl("cosh",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::cosh)));
  m.def("cosh_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("cosh_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cosh_));
  m.def("cosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("cosh.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cosh_out_out));
  m.def("cosine_embedding_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor");
  m.impl("cosine_embedding_loss",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::cosine_embedding_loss)));
  m.def("count_nonzero.dim_IntList(Tensor self, int[] dim) -> Tensor");
  m.impl("count_nonzero.dim_IntList",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::count_nonzero_dim_IntList)));
  m.def("count_nonzero(Tensor self, int? dim=None) -> Tensor");
  m.impl("count_nonzero",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::count_nonzero)));
  m.def("cudnn_affine_grid_generator(Tensor theta, int N, int C, int H, int W) -> Tensor grid");
  m.def("cudnn_affine_grid_generator_backward(Tensor grad, int N, int C, int H, int W) -> Tensor grad_theta");
  m.def("cudnn_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor, Tensor)");
  m.def("cudnn_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon, Tensor reserveSpace) -> (Tensor, Tensor, Tensor)");
  m.def("cudnn_convolution.deprecated(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("cudnn_convolution(Tensor self, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("cudnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("cudnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[2] output_mask) -> (Tensor, Tensor)");
  m.def("cudnn_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("cudnn_convolution_transpose.deprecated(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("cudnn_convolution_transpose(Tensor self, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("cudnn_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[2] output_mask) -> (Tensor, Tensor)");
  m.def("cudnn_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("cudnn_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("cudnn_grid_sampler(Tensor self, Tensor grid) -> Tensor output");
  m.def("cudnn_grid_sampler_backward(Tensor self, Tensor grid, Tensor grad_output) -> (Tensor grad_self, Tensor grad_grid)");
  m.def("cummax(Tensor self, int dim) -> (Tensor values, Tensor indices)");
  m.impl("cummax",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::cummax)));
  m.def("cummax.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.impl("cummax.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cummax_out_out));
  m.def("cummax.dimname(Tensor self, Dimname dim) -> (Tensor values, Tensor indices)");
  m.impl("cummax.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cummax_dimname));
  m.def("cummax.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.impl("cummax.dimname_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cummax_out_dimname_out));
  m.def("_cummax_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()");
  m.def("cummin(Tensor self, int dim) -> (Tensor values, Tensor indices)");
  m.impl("cummin",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::cummin)));
  m.def("cummin.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.impl("cummin.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cummin_out_out));
  m.def("cummin.dimname(Tensor self, Dimname dim) -> (Tensor values, Tensor indices)");
  m.impl("cummin.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cummin_dimname));
  m.def("cummin.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.impl("cummin.dimname_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cummin_out_dimname_out));
  m.def("_cummin_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()");
  m.def("cumprod(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor");
  m.impl("cumprod",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::cumprod)));
  m.def("cumprod.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.impl("cumprod.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cumprod_out_out));
  m.def("cumprod.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor");
  m.impl("cumprod.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cumprod_dimname));
  m.def("cumprod.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.impl("cumprod.dimname_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cumprod_out_dimname_out));
  m.def("cumsum(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor");
  m.impl("cumsum",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::cumsum)));
  m.def("cumsum.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.impl("cumsum.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cumsum_out_out));
  m.def("cumsum.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor");
  m.impl("cumsum.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cumsum_dimname));
  m.def("cumsum.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.impl("cumsum.dimname_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cumsum_out_dimname_out));
  m.def("ctc_loss.IntList(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor");
  m.impl("ctc_loss.IntList",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::ctc_loss_IntList)));
  m.def("ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor");
  m.impl("ctc_loss.Tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::ctc_loss_Tensor)));
  m.def("_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, bool zero_infinity=False) -> (Tensor, Tensor)");
  m.def("_ctc_loss_backward(Tensor grad, Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, Tensor neg_log_likelihood, Tensor log_alpha, int blank, bool zero_infinity=False) -> Tensor");
  m.def("det(Tensor self) -> Tensor");
  m.impl("det",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::det)));
  m.def("diag_embed(Tensor self, int offset=0, int dim1=-2, int dim2=-1) -> Tensor");
  m.impl("diag_embed",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::diag_embed)));
  m.def("diagflat(Tensor self, int offset=0) -> Tensor");
  m.impl("diagflat",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::diagflat)));
  m.def("diagonal(Tensor(a) self, int offset=0, int dim1=0, int dim2=1) -> Tensor(a)");
  m.impl("diagonal",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::diagonal)));
  m.def("diagonal.Dimname(Tensor(a) self, *, Dimname outdim, Dimname dim1, Dimname dim2, int offset=0) -> Tensor(a)");
  m.impl("diagonal.Dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::diagonal_Dimname));
  m.def("fill_diagonal_(Tensor(a!) self, Scalar fill_value, bool wrap=False) -> Tensor(a!)");
  m.impl("fill_diagonal_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::fill_diagonal_));
  m.def("div.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("div_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("div.Scalar(Tensor self, Scalar other) -> Tensor");
  m.impl("div.Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::div_Scalar)));
  m.def("div_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.impl("div_.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::div__Scalar));
  m.def("dot(Tensor self, Tensor tensor) -> Tensor");
  m.def("dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("dot.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::dot_out_out));
  m.def("einsum(str equation, Tensor[] tensors) -> Tensor");
  m.impl("einsum",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::einsum)));
  m.def("embedding(Tensor weight, Tensor indices, int padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor");
  m.impl("embedding",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::embedding)));
  m.def("embedding_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq, bool sparse) -> Tensor");
  m.impl("embedding_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::embedding_backward)));
  m.def("embedding_dense_backward(Tensor grad_output, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor");
  m.def("embedding_renorm_(Tensor(a!) self, Tensor indices, float max_norm, float norm_type) -> Tensor(a!)");
  m.def("embedding_sparse_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor");
  m.impl("embedding_sparse_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::embedding_sparse_backward)));
  m.def("_embedding_bag_forward_only(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)");
  m.def("embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)");
  m.impl("embedding_bag",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::embedding_bag));
  m.def("_embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)");
  m.def("_embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights) -> Tensor");
  m.impl("_embedding_bag_backward",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_embedding_bag_backward));
  m.def("_embedding_bag_sparse_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor");
  m.impl("_embedding_bag_sparse_backward",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_embedding_bag_sparse_backward));
  m.def("_embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor");
  m.def("_embedding_bag_per_sample_weights_backward(Tensor grad, Tensor weight, Tensor indices, Tensor offsets, Tensor offset2bag, int mode) -> Tensor");
  m.def("empty_meta(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.impl("empty_meta",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::empty_meta)));
  m.def("empty.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.impl("empty.names",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::empty_names));
  m.def("empty.memory_format(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.def("new_empty(Tensor self, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("new_empty",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::new_empty)));
  m.def("new_full(Tensor self, int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("new_full",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::new_full)));
  m.def("new_zeros(Tensor self, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("new_zeros",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::new_zeros)));
  m.def("_empty_affine_quantized(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, float scale=1, int zero_point=0, MemoryFormat? memory_format=contiguous_format) -> Tensor");
  m.def("_empty_per_channel_affine_quantized(int[] size, *, Tensor scales, Tensor zero_points, int axis, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=contiguous_format) -> Tensor");
  m.def("resize_(Tensor(a!) self, int[] size, *, MemoryFormat? memory_format=None) -> Tensor(a!)");
  m.def("empty_quantized(int[] size, Tensor qtensor) -> Tensor");
  m.def("empty.out(int[] size, *, MemoryFormat? memory_format=None, Tensor(a!) out) -> Tensor(a!)");
  m.impl("empty.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::empty_out_out));
  m.def("empty_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.impl("empty_like",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::empty_like)));
  m.def("empty_strided(int[] size, int[] stride, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("erf(Tensor self) -> Tensor");
  m.impl("erf",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::erf)));
  m.def("erf_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("erf_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::erf_));
  m.def("erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("erf.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::erf_out_out));
  m.def("erfc(Tensor self) -> Tensor");
  m.impl("erfc",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::erfc)));
  m.def("erfc_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("erfc_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::erfc_));
  m.def("erfc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("erfc.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::erfc_out_out));
  m.def("exp(Tensor self) -> Tensor");
  m.impl("exp",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::exp)));
  m.def("exp_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("exp_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::exp_));
  m.def("exp.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("exp.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::exp_out_out));
  m.def("expm1(Tensor self) -> Tensor");
  m.impl("expm1",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::expm1)));
  m.def("expm1_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("expm1_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::expm1_));
  m.def("expm1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("expand(Tensor(a) self, int[] size, *, bool implicit=False) -> Tensor(a)");
  m.impl("expand",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::expand)));
  m.def("expand_as(Tensor(a) self, Tensor other) -> Tensor(a)");
  m.impl("expand_as",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::expand_as)));
  m.def("eye(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("eye",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::eye)));
  m.def("eye.m(int n, int m, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("eye.m",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::eye_m)));
  m.def("eye.out(int n, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("eye.m_out(int n, int m, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("flatten.using_ints(Tensor(a) self, int start_dim=0, int end_dim=-1) -> Tensor(a)");
  m.impl("flatten.using_ints",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::flatten_using_ints)));
  m.def("flatten.named_out_dim(Tensor(a) self, int start_dim, int end_dim, Dimname out_dim) -> Tensor(a)");
  m.impl("flatten.named_out_dim",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::flatten_named_out_dim));
  m.def("flatten.using_names(Tensor(a) self, Dimname start_dim, Dimname end_dim, Dimname out_dim) -> Tensor(a)");
  m.impl("flatten.using_names",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::flatten_using_names));
  m.def("flatten.DimnameList(Tensor(a) self, Dimname[] dims, Dimname out_dim) -> Tensor(a)");
  m.impl("flatten.DimnameList",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::flatten_DimnameList));
  m.def("fill_.Scalar(Tensor(a!) self, Scalar value) -> Tensor(a!)");
  m.impl("fill_.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::fill__Scalar));
  m.def("fill_.Tensor(Tensor(a!) self, Tensor value) -> Tensor(a!)");
  m.impl("fill_.Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::fill__Tensor));
  m.def("floor(Tensor self) -> Tensor");
  m.impl("floor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::floor)));
  m.def("floor_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("floor_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::floor_));
  m.def("floor.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("floor_divide(Tensor self, Tensor other) -> Tensor");
  m.def("floor_divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("floor_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("floor_divide.Scalar(Tensor self, Scalar other) -> Tensor");
  m.impl("floor_divide.Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::floor_divide_Scalar)));
  m.def("floor_divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.impl("floor_divide_.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::floor_divide__Scalar));
  m.def("frac(Tensor self) -> Tensor");
  m.impl("frac",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::frac)));
  m.def("frac_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("frac_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::frac_));
  m.def("frac.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("frac.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::frac_out_out));
  m.def("full.names(int[] size, Scalar fill_value, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("full.names",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::full_names));
  m.def("full(int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("full",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::full)));
  m.def("full.out(int[] size, Scalar fill_value, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("full.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::full_out_out));
  m.def("full_like(Tensor self, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.impl("full_like",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::full_like)));
  m.def("from_file(str filename, bool? shared=None, int? size=0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("grid_sampler(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor");
  m.impl("grid_sampler",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::grid_sampler)));
  m.def("grid_sampler_2d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor");
  m.def("grid_sampler_2d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)");
  m.def("grid_sampler_3d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor");
  m.def("grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)");
  m.def("hann_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("hann_window",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::hann_window)));
  m.def("hann_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("hann_window.periodic",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::hann_window_periodic)));
  m.def("hamming_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("hamming_window",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::hamming_window)));
  m.def("hamming_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("hamming_window.periodic",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::hamming_window_periodic)));
  m.def("hamming_window.periodic_alpha(int window_length, bool periodic, float alpha, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("hamming_window.periodic_alpha",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::hamming_window_periodic_alpha)));
  m.def("hamming_window.periodic_alpha_beta(int window_length, bool periodic, float alpha, float beta, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("hamming_window.periodic_alpha_beta",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::hamming_window_periodic_alpha_beta)));
  m.def("hinge_embedding_loss(Tensor self, Tensor target, float margin=1.0, int reduction=Mean) -> Tensor");
  m.impl("hinge_embedding_loss",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::hinge_embedding_loss)));
  m.def("ger(Tensor self, Tensor vec2) -> Tensor");
  m.impl("ger",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::ger)));
  m.def("ger.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("ger.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::ger_out_out));
  m.def("group_norm(Tensor input, int num_groups, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enabled=True) -> Tensor");
  m.impl("group_norm",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::group_norm));
  m.def("native_group_norm(Tensor input, Tensor? weight, Tensor? bias, int N, int C, int HxW, int group, float eps) -> (Tensor, Tensor, Tensor)");
  m.def("native_group_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int N, int C, int HxW, int group, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.def("fft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor");
  m.impl("fft",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::fft)));
  m.def("ifft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor");
  m.impl("ifft",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::ifft)));
  m.def("rfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True) -> Tensor");
  m.impl("rfft",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::rfft)));
  m.def("irfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True, int[] signal_sizes=[]) -> Tensor");
  m.impl("irfft",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::irfft)));
  m.def("_fft_with_size(Tensor self, int signal_ndim, bool complex_input, bool complex_output, bool inverse, int[] checked_signal_sizes, bool normalized, bool onesided, int[] output_sizes) -> Tensor");
  m.def("_cufft_get_plan_cache_size(int device_index) -> int");
  m.impl("_cufft_get_plan_cache_size",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_cufft_get_plan_cache_size)));
  m.def("_cufft_get_plan_cache_max_size(int device_index) -> int");
  m.impl("_cufft_get_plan_cache_max_size",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_cufft_get_plan_cache_max_size)));
  m.def("_cufft_set_plan_cache_max_size(int device_index, int max_size) -> ()");
  m.impl("_cufft_set_plan_cache_max_size",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_cufft_set_plan_cache_max_size)));
  m.def("_cufft_clear_plan_cache(int device_index) -> ()");
  m.impl("_cufft_clear_plan_cache",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_cufft_clear_plan_cache)));
  m.def("index.Tensor(Tensor self, Tensor?[] indices) -> Tensor");
  m.impl("index.Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::index_Tensor));
  m.def("index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)");
  m.impl("index_copy_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::index_copy_));
  m.def("index_copy(Tensor self, int dim, Tensor index, Tensor source) -> Tensor");
  m.impl("index_copy",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::index_copy)));
  m.def("index_copy_.dimname(Tensor(a!) self, Dimname dim, Tensor index, Tensor source) -> Tensor(a!)");
  m.impl("index_copy_.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::index_copy__dimname));
  m.def("index_copy.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor");
  m.impl("index_copy.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::index_copy_dimname));
  m.def("index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor(a!)");
  m.impl("index_put_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::index_put_));
  m.def("index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor");
  m.impl("index_put",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::index_put));
  m.def("_index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> Tensor(a!)");
  m.impl("_index_put_impl_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_index_put_impl_));
  m.def("instance_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool use_input_stats, float momentum, float eps, bool cudnn_enabled) -> Tensor");
  m.impl("instance_norm",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::instance_norm));
  m.def("inverse(Tensor self) -> Tensor");
  m.impl("inverse",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::inverse)));
  m.def("inverse.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("inverse.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::inverse_out_out));
  m.def("_inverse_helper(Tensor self) -> Tensor");
  m.def("isclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> Tensor");
  m.impl("isclose",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::isclose)));
  m.def("isnan(Tensor self) -> Tensor");
  m.def("is_distributed(Tensor self) -> bool");
  m.impl("is_distributed",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::is_distributed)));
  m.def("is_floating_point(Tensor self) -> bool");
  m.impl("is_floating_point",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::is_floating_point)));
  m.def("is_complex(Tensor self) -> bool");
  m.impl("is_complex",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::is_complex)));
  m.def("is_nonzero(Tensor self) -> bool");
  m.impl("is_nonzero",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::is_nonzero)));
  m.def("is_same_size(Tensor self, Tensor other) -> bool");
  m.impl("is_same_size",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::is_same_size)));
  m.def("is_signed(Tensor self) -> bool");
  m.impl("is_signed",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::is_signed)));
  m.def("kl_div(Tensor self, Tensor target, int reduction=Mean, *, bool log_target=False) -> Tensor");
  m.impl("kl_div",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::kl_div)));
  m.def("kl_div_backward(Tensor grad_output, Tensor self, Tensor target, int reduction=Mean, *, bool log_target=False) -> Tensor");
  m.def("kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.impl("kthvalue",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::kthvalue)));
  m.def("kthvalue.values(Tensor self, int k, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("kthvalue.dimname(Tensor self, int k, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.impl("kthvalue.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::kthvalue_dimname));
  m.def("kthvalue.dimname_out(Tensor self, int k, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.impl("kthvalue.dimname_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::kthvalue_out_dimname_out));
  m.def("layer_norm(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enable=True) -> Tensor");
  m.impl("layer_norm",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::layer_norm));
  m.def("native_layer_norm(Tensor input, Tensor? weight, Tensor? bias, int M, int N, float eps) -> (Tensor, Tensor, Tensor)");
  m.def("native_layer_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int M, int N, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.def("linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor");
  m.impl("linear",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::linear));
  m.def("mkldnn_linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor");
  m.def("fbgemm_linear_int8_weight_fp32_activation(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor");
  m.impl("fbgemm_linear_int8_weight_fp32_activation",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::fbgemm_linear_int8_weight_fp32_activation)));
  m.def("fbgemm_linear_int8_weight(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor");
  m.impl("fbgemm_linear_int8_weight",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::fbgemm_linear_int8_weight)));
  m.def("fbgemm_linear_quantize_weight(Tensor input) -> (Tensor, Tensor, float, int)");
  m.impl("fbgemm_linear_quantize_weight",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::fbgemm_linear_quantize_weight)));
  m.def("fbgemm_pack_gemm_matrix_fp16(Tensor input) -> Tensor");
  m.impl("fbgemm_pack_gemm_matrix_fp16",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::fbgemm_pack_gemm_matrix_fp16)));
  m.def("fbgemm_linear_fp16_weight_fp32_activation(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor");
  m.impl("fbgemm_linear_fp16_weight_fp32_activation",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::fbgemm_linear_fp16_weight_fp32_activation)));
  m.def("fbgemm_linear_fp16_weight(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor");
  m.impl("fbgemm_linear_fp16_weight",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::fbgemm_linear_fp16_weight)));
  m.def("fbgemm_pack_quantized_matrix(Tensor input) -> Tensor");
  m.impl("fbgemm_pack_quantized_matrix",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::fbgemm_pack_quantized_matrix)));
  m.def("fbgemm_pack_quantized_matrix.KN(Tensor input, int K, int N) -> Tensor");
  m.impl("fbgemm_pack_quantized_matrix.KN",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::fbgemm_pack_quantized_matrix_KN)));
  m.def("linspace(Scalar start, Scalar end, int steps=100, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("linspace",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::linspace)));
  m.def("linspace.out(Scalar start, Scalar end, int steps=100, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("log(Tensor self) -> Tensor");
  m.impl("log",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::log)));
  m.def("log_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("log_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::log_));
  m.def("log.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("log10(Tensor self) -> Tensor");
  m.impl("log10",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::log10)));
  m.def("log10_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("log10_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::log10_));
  m.def("log10.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("log1p(Tensor self) -> Tensor");
  m.impl("log1p",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::log1p)));
  m.def("log1p_(Tensor(a!) self) -> Tensor(a!)");
  m.def("log1p.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("log2(Tensor self) -> Tensor");
  m.impl("log2",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::log2)));
  m.def("log2_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("log2_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::log2_));
  m.def("log2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logaddexp.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("logaddexp.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::logaddexp_out_out));
  m.def("logaddexp(Tensor self, Tensor other) -> Tensor");
  m.impl("logaddexp",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::logaddexp)));
  m.def("logaddexp2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("logaddexp2.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::logaddexp2_out_out));
  m.def("logaddexp2(Tensor self, Tensor other) -> Tensor");
  m.impl("logaddexp2",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::logaddexp2)));
  m.def("logdet(Tensor self) -> Tensor");
  m.impl("logdet",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::logdet)));
  m.def("logspace(Scalar start, Scalar end, int steps=100, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("logspace",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::logspace)));
  m.def("logspace.out(Scalar start, Scalar end, int steps=100, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("log_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor");
  m.impl("log_softmax.int",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::log_softmax_int)));
  m.def("log_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor");
  m.impl("log_softmax.Dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::log_softmax_Dimname));
  m.def("_log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor");
  m.def("_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor");
  m.def("_logcumsumexp(Tensor self, int dim) -> Tensor");
  m.def("_logcumsumexp.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logcumsumexp(Tensor self, int dim) -> Tensor");
  m.impl("logcumsumexp",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::logcumsumexp)));
  m.def("logcumsumexp.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("logcumsumexp.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::logcumsumexp_out_out));
  m.def("logcumsumexp.dimname(Tensor self, Dimname dim) -> Tensor");
  m.impl("logcumsumexp.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::logcumsumexp_dimname));
  m.def("logcumsumexp.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("logcumsumexp.dimname_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::logcumsumexp_out_dimname_out));
  m.def("logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> Tensor");
  m.impl("logsumexp",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::logsumexp)));
  m.def("logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("logsumexp.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::logsumexp_out_out));
  m.def("logsumexp.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor");
  m.impl("logsumexp.names",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::logsumexp_names));
  m.def("logsumexp.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("logsumexp.names_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::logsumexp_out_names_out));
  m.def("margin_ranking_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor");
  m.impl("margin_ranking_loss",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::margin_ranking_loss)));
  m.def("matmul(Tensor self, Tensor other) -> Tensor");
  m.impl("matmul",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::matmul)));
  m.def("matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("matmul.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::matmul_out_out));
  m.def("matrix_rank.tol(Tensor self, float tol, bool symmetric=False) -> Tensor");
  m.impl("matrix_rank.tol",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::matrix_rank_tol)));
  m.def("matrix_rank(Tensor self, bool symmetric=False) -> Tensor");
  m.impl("matrix_rank",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::matrix_rank)));
  m.def("matrix_power(Tensor self, int n) -> Tensor");
  m.impl("matrix_power",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::matrix_power)));
  m.def("max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.impl("max.dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::max_dim)));
  m.def("max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.impl("max.dim_max",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::max_out_dim_max));
  m.def("max_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor");
  m.impl("max_values",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::max_values)));
  m.def("max.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.impl("max.names_dim",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::max_names_dim));
  m.def("max.names_dim_max(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.impl("max.names_dim_max",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::max_out_names_dim_max));
  m.def("max_values.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor");
  m.impl("max_values.names",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::max_values_names));
  m.def("max_pool1d_with_indices(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)");
  m.impl("max_pool1d_with_indices",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::max_pool1d_with_indices)));
  m.def("max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> Tensor");
  m.impl("max_pool1d",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::max_pool1d)));
  m.def("max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor");
  m.impl("max_pool2d",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::max_pool2d)));
  m.def("mkldnn_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor");
  m.def("quantized_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor");
  m.def("max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> Tensor");
  m.impl("max_pool3d",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::max_pool3d)));
  m.def("mean(Tensor self, *, ScalarType? dtype=None) -> Tensor");
  m.def("mean.dim(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.def("mean.out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("mean.names_dim(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.impl("mean.names_dim",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::mean_names_dim));
  m.def("mean.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.impl("mean.names_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::mean_out_names_out));
  m.def("median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.impl("median.dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::median_dim)));
  m.def("median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.impl("median.dim_values",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::median_out_dim_values));
  m.def("median.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.impl("median.names_dim",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::median_names_dim));
  m.def("median.names_dim_values(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.impl("median.names_dim_values",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::median_out_names_dim_values));
  m.def("min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.impl("min.dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::min_dim)));
  m.def("min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.impl("min.dim_min",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::min_out_dim_min));
  m.def("min_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor");
  m.impl("min_values",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::min_values)));
  m.def("min.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.impl("min.names_dim",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::min_names_dim));
  m.def("min.names_dim_min(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.impl("min.names_dim_min",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::min_out_names_dim_min));
  m.def("min_values.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor");
  m.impl("min_values.names",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::min_values_names));
  m.def("mkldnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> Tensor");
  m.impl("mkldnn_convolution",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::mkldnn_convolution));
  m.def("mkldnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> Tensor");
  m.impl("mkldnn_convolution_backward_input",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::mkldnn_convolution_backward_input)));
  m.def("mkldnn_convolution_backward_weights(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> (Tensor, Tensor)");
  m.impl("mkldnn_convolution_backward_weights",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::mkldnn_convolution_backward_weights)));
  m.def("mkldnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.impl("mkldnn_convolution_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::mkldnn_convolution_backward)));
  m.def("miopen_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor)");
  m.def("miopen_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor)");
  m.def("miopen_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.def("miopen_convolution_backward_bias(Tensor grad_output) -> Tensor");
  m.def("miopen_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.def("miopen_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_depthwise_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_depthwise_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_depthwise_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.def("miopen_depthwise_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)");
  m.def("miopen_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])");
  m.def("mm(Tensor self, Tensor mat2) -> Tensor");
  m.def("mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_sparse_mm(Tensor sparse, Tensor dense) -> Tensor");
  m.impl("_sparse_mm",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_sparse_mm)));
  m.def("mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.impl("mode",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::mode)));
  m.def("mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.impl("mode.values",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::mode_out_values));
  m.def("mode.dimname(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.impl("mode.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::mode_dimname));
  m.def("mode.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.impl("mode.dimname_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::mode_out_dimname_out));
  m.def("mul.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("mul_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("mul.Scalar(Tensor self, Scalar other) -> Tensor");
  m.impl("mul.Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::mul_Scalar)));
  m.def("mul_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.impl("mul_.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::mul__Scalar));
  m.def("mv(Tensor self, Tensor vec) -> Tensor");
  m.def("mv.out(Tensor self, Tensor vec, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("mv.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::mv_out_out));
  m.def("mvlgamma(Tensor self, int p) -> Tensor");
  m.impl("mvlgamma",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::mvlgamma)));
  m.def("mvlgamma_(Tensor(a!) self, int p) -> Tensor(a!)");
  m.impl("mvlgamma_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::mvlgamma_));
  m.def("narrow_copy(Tensor self, int dim, int start, int length) -> Tensor");
  m.def("narrow(Tensor(a) self, int dim, int start, int length) -> Tensor(a)");
  m.impl("narrow",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::narrow)));
  m.def("narrow.Tensor(Tensor(a) self, int dim, Tensor start, int length) -> Tensor(a)");
  m.impl("narrow.Tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::narrow_Tensor)));
  m.def("native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)");
  m.def("native_batch_norm.out(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, *, Tensor(a!) out, Tensor(b!) save_mean, Tensor(c!) save_invstd) -> (Tensor(a!), Tensor(b!), Tensor(c!))");
  m.def("batch_norm_stats(Tensor input, float eps) -> (Tensor, Tensor)");
  m.def("batch_norm_elemt(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps) -> Tensor");
  m.def("batch_norm_elemt.out(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("batch_norm_gather_stats(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int count) -> (Tensor, Tensor)");
  m.def("batch_norm_gather_stats_with_counts(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, Tensor counts) -> (Tensor, Tensor)");
  m.def("native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.def("batch_norm_backward_reduce(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, bool input_g, bool weight_g, bool bias_g) -> (Tensor, Tensor, Tensor, Tensor)");
  m.def("batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor mean_dy, Tensor mean_dy_xmu) -> Tensor");
  m.def("batch_norm_update_stats(Tensor input, Tensor? running_mean, Tensor? running_var, float momentum) -> (Tensor, Tensor)");
  m.def("is_vulkan_available() -> bool");
  m.impl("is_vulkan_available",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::is_vulkan_available)));
  m.def("_nnpack_available() -> bool");
  m.impl("_nnpack_available",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_nnpack_available)));
  m.def("_nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding, int[2] stride=1) -> Tensor");
  m.impl("_nnpack_spatial_convolution",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_nnpack_spatial_convolution));
  m.def("_nnpack_spatial_convolution_backward(Tensor input, Tensor grad_output, Tensor weight, int[2] padding, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.impl("_nnpack_spatial_convolution_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_nnpack_spatial_convolution_backward)));
  m.def("_nnpack_spatial_convolution_backward_input(Tensor input, Tensor grad_output, Tensor weight, int[2] padding) -> Tensor");
  m.impl("_nnpack_spatial_convolution_backward_input",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_nnpack_spatial_convolution_backward_input)));
  m.def("_nnpack_spatial_convolution_backward_weight(Tensor input, int[] weightsize, Tensor grad_output, int[2] padding) -> Tensor");
  m.impl("_nnpack_spatial_convolution_backward_weight",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_nnpack_spatial_convolution_backward_weight)));
  m.def("ones.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("ones.names",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::ones_names));
  m.def("ones(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("ones",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::ones)));
  m.def("ones.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("ones.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::ones_out_out));
  m.def("ones_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.impl("ones_like",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::ones_like)));
  m.def("pairwise_distance(Tensor x1, Tensor x2, float p=2, float eps=1e-06, bool keepdim=False) -> Tensor");
  m.impl("pairwise_distance",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::pairwise_distance)));
  m.def("cdist(Tensor x1, Tensor x2, float p=2, int? compute_mode=None) -> Tensor");
  m.impl("cdist",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::cdist)));
  m.def("_euclidean_dist(Tensor x1, Tensor x2) -> Tensor");
  m.impl("_euclidean_dist",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_euclidean_dist)));
  m.def("_cdist_forward(Tensor x1, Tensor x2, float p, int? compute_mode) -> Tensor");
  m.impl("_cdist_forward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_cdist_forward)));
  m.def("_cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> Tensor");
  m.impl("_cdist_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_cdist_backward)));
  m.def("pdist(Tensor self, float p=2) -> Tensor");
  m.impl("pdist",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::pdist)));
  m.def("_pdist_forward(Tensor self, float p=2) -> Tensor");
  m.impl("_pdist_forward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_pdist_forward)));
  m.def("_pdist_backward(Tensor grad, Tensor self, float p, Tensor pdist) -> Tensor");
  m.impl("_pdist_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_pdist_backward)));
  m.def("cosine_similarity(Tensor x1, Tensor x2, int dim=1, float eps=1e-08) -> Tensor");
  m.impl("cosine_similarity",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::cosine_similarity)));
  m.def("permute(Tensor(a) self, int[] dims) -> Tensor(a)");
  m.impl("permute",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::permute)));
  m.def("numpy_T(Tensor(a) self) -> Tensor(a)");
  m.impl("numpy_T",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::numpy_T)));
  m.def("pixel_shuffle(Tensor self, int upscale_factor) -> Tensor");
  m.impl("pixel_shuffle",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::pixel_shuffle)));
  m.def("channel_shuffle(Tensor self, int groups) -> Tensor");
  m.def("is_pinned(Tensor self) -> bool");
  m.impl("is_pinned",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::is_pinned)));
  m.def("pin_memory(Tensor(a) self) -> Tensor(a)");
  m.impl("pin_memory",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::pin_memory)));
  m.def("pinverse(Tensor self, float rcond=1e-15) -> Tensor");
  m.impl("pinverse",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::pinverse)));
  m.def("poisson_nll_loss(Tensor input, Tensor target, bool log_input, bool full, float eps, int reduction) -> Tensor");
  m.impl("poisson_nll_loss",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::poisson_nll_loss)));
  m.def("rad2deg(Tensor self) -> Tensor");
  m.impl("rad2deg",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::rad2deg)));
  m.def("rad2deg_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("rad2deg_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::rad2deg_));
  m.def("rad2deg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("rad2deg.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::rad2deg_out_out));
  m.def("deg2rad(Tensor self) -> Tensor");
  m.impl("deg2rad",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::deg2rad)));
  m.def("deg2rad_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("deg2rad_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::deg2rad_));
  m.def("deg2rad.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("deg2rad.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::deg2rad_out_out));
  m.def("scalar_tensor(Scalar s, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("scalar_tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::scalar_tensor)));
  m.def("rand.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("rand.names",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::rand_names));
  m.def("rand.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("rand.generator_with_names",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::rand_generator_with_names));
  m.def("rand(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("rand",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::rand)));
  m.def("rand.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("rand.generator",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::rand_generator));
  m.def("rand.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("rand.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::rand_out_out));
  m.def("rand.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)");
  m.impl("rand.generator_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::rand_out_generator_out));
  m.def("rand_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.impl("rand_like",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::rand_like)));
  m.def("randint(int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("randint",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::randint)));
  m.def("randint.generator(int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("randint.generator",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::randint_generator));
  m.def("randint.low(int low, int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("randint.low",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::randint_low)));
  m.def("randint.low_generator(int low, int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("randint.low_generator",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::randint_low_generator));
  m.def("randint.out(int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("randint.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::randint_out_out));
  m.def("randint.generator_out(int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)");
  m.impl("randint.generator_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::randint_out_generator_out));
  m.def("randint.low_out(int low, int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("randint.low_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::randint_out_low_out));
  m.def("randint.low_generator_out(int low, int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)");
  m.impl("randint.low_generator_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::randint_out_low_generator_out));
  m.def("randint_like(Tensor self, int high, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.impl("randint_like",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::randint_like)));
  m.def("randint_like.low_dtype(Tensor self, int low, int high, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.impl("randint_like.low_dtype",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::randint_like_low_dtype)));
  m.def("randn(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("randn",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::randn)));
  m.def("randn.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("randn.generator",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::randn_generator));
  m.def("randn.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("randn.names",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::randn_names));
  m.def("randn.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("randn.generator_with_names",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::randn_generator_with_names));
  m.def("randn.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("randn.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::randn_out_out));
  m.def("randn.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)");
  m.impl("randn.generator_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::randn_out_generator_out));
  m.def("randn_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.impl("randn_like",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::randn_like)));
  m.def("randperm(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("randperm",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::randperm)));
  m.def("randperm.generator(int n, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("randperm.generator",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::randperm_generator));
  m.def("randperm.out(int n, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("randperm.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::randperm_out_out));
  m.def("randperm.generator_out(int n, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)");
  m.def("range.step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("range.step",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::range_step)));
  m.def("range(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("range",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::range)));
  m.def("range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("reciprocal(Tensor self) -> Tensor");
  m.impl("reciprocal",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::reciprocal)));
  m.def("reciprocal_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("reciprocal_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::reciprocal_));
  m.def("reciprocal.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("reciprocal.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::reciprocal_out_out));
  m.def("neg(Tensor self) -> Tensor");
  m.impl("neg",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::neg)));
  m.def("neg_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("neg_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::neg_));
  m.def("neg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("repeat(Tensor self, int[] repeats) -> Tensor");
  m.impl("repeat",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::repeat)));
  m.def("repeat_interleave.Tensor(Tensor repeats) -> Tensor");
  m.def("repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None) -> Tensor");
  m.impl("repeat_interleave.self_Tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::repeat_interleave_self_Tensor)));
  m.def("repeat_interleave.self_int(Tensor self, int repeats, int? dim=None) -> Tensor");
  m.impl("repeat_interleave.self_int",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::repeat_interleave_self_int)));
  m.def("reshape(Tensor(a) self, int[] shape) -> Tensor(a)");
  m.impl("reshape",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::reshape)));
  m.def("_mkldnn_reshape(Tensor self, int[] shape) -> Tensor");
  m.def("reshape_as(Tensor(a) self, Tensor other) -> Tensor(a)");
  m.impl("reshape_as",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::reshape_as)));
  m.def("round(Tensor self) -> Tensor");
  m.impl("round",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::round)));
  m.def("round_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("round_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::round_));
  m.def("round.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("rrelu(Tensor self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor");
  m.impl("rrelu",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::rrelu));
  m.def("rrelu_(Tensor(a!) self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)");
  m.impl("rrelu_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::rrelu_));
  m.def("relu(Tensor self) -> Tensor");
  m.def("relu_(Tensor(a!) self) -> Tensor(a!)");
  m.def("prelu(Tensor self, Tensor weight) -> Tensor");
  m.def("prelu_backward(Tensor grad_output, Tensor self, Tensor weight) -> (Tensor, Tensor)");
  m.def("gelu(Tensor self) -> Tensor");
  m.def("gelu_backward(Tensor grad, Tensor self) -> Tensor");
  m.def("hardshrink(Tensor self, Scalar lambd=0.5) -> Tensor");
  m.impl("hardshrink",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::hardshrink)));
  m.def("hardshrink_backward(Tensor grad_out, Tensor self, Scalar lambd) -> Tensor");
  m.impl("hardshrink_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::hardshrink_backward)));
  m.def("rsqrt(Tensor self) -> Tensor");
  m.impl("rsqrt",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::rsqrt)));
  m.def("rsqrt_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("rsqrt_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::rsqrt_));
  m.def("rsqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("select.Dimname(Tensor(a) self, Dimname dim, int index) -> Tensor(a)");
  m.impl("select.Dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::select_Dimname));
  m.def("select.int(Tensor(a) self, int dim, int index) -> Tensor(a)");
  m.impl("select.int",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::select_int)));
  m.def("selu(Tensor self) -> Tensor");
  m.impl("selu",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::selu)));
  m.def("selu_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("selu_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::selu_));
  m.def("celu(Tensor self, Scalar alpha=1.0) -> Tensor");
  m.impl("celu",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::celu)));
  m.def("celu_(Tensor(a!) self, Scalar alpha=1.0) -> Tensor(a!)");
  m.impl("celu_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::celu_));
  m.def("sigmoid(Tensor self) -> Tensor");
  m.def("sigmoid_(Tensor(a!) self) -> Tensor(a!)");
  m.def("sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("sigmoid.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::sigmoid_out_out));
  m.def("sin(Tensor self) -> Tensor");
  m.impl("sin",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::sin)));
  m.def("sin_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("sin_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::sin_));
  m.def("sin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("sinh(Tensor self) -> Tensor");
  m.impl("sinh",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::sinh)));
  m.def("sinh_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("sinh_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::sinh_));
  m.def("sinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("sinh.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::sinh_out_out));
  m.def("detach(Tensor(a) self) -> Tensor(a)");
  m.def("detach_(Tensor(a!) self) -> Tensor(a!)");
  m.def("size.int(Tensor self, int dim) -> int");
  m.impl("size.int",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::size_int)));
  m.def("size.Dimname(Tensor self, Dimname dim) -> int");
  m.impl("size.Dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::size_Dimname));
  m.def("slice.Tensor(Tensor(a) self, int dim=0, int start=0, int end=9223372036854775807, int step=1) -> Tensor(a)");
  m.impl("slice.Tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::slice_Tensor)));
  m.def("slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)");
  m.impl("slogdet",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::slogdet)));
  m.def("smm(Tensor self, Tensor mat2) -> Tensor");
  m.impl("smm",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::smm)));
  m.def("softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor");
  m.impl("softmax.int",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::softmax_int)));
  m.def("softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor");
  m.impl("softmax.Dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::softmax_Dimname));
  m.def("_softmax(Tensor self, int dim, bool half_to_float) -> Tensor");
  m.def("_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor");
  m.def("split.Tensor(Tensor(a) self, int split_size, int dim=0) -> Tensor(a)[]");
  m.impl("split.Tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::split_Tensor)));
  m.def("split_with_sizes(Tensor self, int[] split_sizes, int dim=0) -> Tensor[]");
  m.impl("split_with_sizes",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::split_with_sizes)));
  m.def("squeeze(Tensor(a) self) -> Tensor(a)");
  m.impl("squeeze",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::squeeze)));
  m.def("squeeze.dim(Tensor(a) self, int dim) -> Tensor(a)");
  m.impl("squeeze.dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::squeeze_dim)));
  m.def("squeeze.dimname(Tensor(a) self, Dimname dim) -> Tensor(a)");
  m.impl("squeeze.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::squeeze_dimname));
  m.def("squeeze_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("squeeze_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::squeeze_));
  m.def("squeeze_.dim(Tensor(a!) self, int dim) -> Tensor(a!)");
  m.impl("squeeze_.dim",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::squeeze__dim));
  m.def("squeeze_.dimname(Tensor(a!) self, Dimname dim) -> Tensor(a!)");
  m.impl("squeeze_.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::squeeze__dimname));
  m.def("sspaddmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor");
  m.impl("sspaddmm",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::sspaddmm)));
  m.def("sspaddmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("stack(Tensor[] tensors, int dim=0) -> Tensor");
  m.impl("stack",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::stack)));
  m.def("stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("stack.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::stack_out_out));
  m.def("stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool onesided=True) -> Tensor");
  m.impl("stft",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::stft));
  m.def("istft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool center=True, bool normalized=False, bool onesided=True, int? length=None) -> Tensor");
  m.impl("istft",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::istft));
  m.def("stride.int(Tensor self, int dim) -> int");
  m.impl("stride.int",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::stride_int)));
  m.def("stride.Dimname(Tensor self, Dimname dim) -> int");
  m.impl("stride.Dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::stride_Dimname));
  m.def("sum(Tensor self, *, ScalarType? dtype=None) -> Tensor");
  m.impl("sum",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::sum)));
  m.def("sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.impl("sum.dim_IntList",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::sum_dim_IntList)));
  m.def("sum.dim_DimnameList(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.impl("sum.dim_DimnameList",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::sum_dim_DimnameList));
  m.def("sum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.impl("sum.IntList_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::sum_out_IntList_out));
  m.def("sum.DimnameList_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.impl("sum.DimnameList_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::sum_out_DimnameList_out));
  m.def("sum_to_size(Tensor self, int[] size) -> Tensor");
  m.impl("sum_to_size",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::sum_to_size)));
  m.def("sqrt(Tensor self) -> Tensor");
  m.impl("sqrt",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::sqrt)));
  m.def("sqrt_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("sqrt_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::sqrt_));
  m.def("sqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("sqrt.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::sqrt_out_out));
  m.def("square(Tensor self) -> Tensor");
  m.impl("square",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::square)));
  m.def("square_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("square_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::square_));
  m.def("std(Tensor self, bool unbiased=True) -> Tensor");
  m.impl("std",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::std)));
  m.def("std.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor");
  m.impl("std.dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::std_dim)));
  m.def("std_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)");
  m.impl("std_mean",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::std_mean)));
  m.def("std_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)");
  m.impl("std_mean.dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::std_mean_dim)));
  m.def("std_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)");
  m.impl("std_mean.names_dim",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::std_mean_names_dim));
  m.def("std.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("std.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::std_out_out));
  m.def("std.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor");
  m.impl("std.names_dim",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::std_names_dim));
  m.def("std.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("std.names_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::std_out_names_out));
  m.def("prod(Tensor self, *, ScalarType? dtype=None) -> Tensor");
  m.impl("prod",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::prod)));
  m.def("prod.dim_int(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.impl("prod.dim_int",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::prod_dim_int)));
  m.def("prod.int_out(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.impl("prod.int_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::prod_out_int_out));
  m.def("prod.dim_Dimname(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.impl("prod.dim_Dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::prod_dim_Dimname));
  m.def("prod.Dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.impl("prod.Dimname_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::prod_out_Dimname_out));
  m.def("t(Tensor(a) self) -> Tensor(a)");
  m.impl("t",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::t)));
  m.def("t_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("t_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::t_));
  m.def("tan(Tensor self) -> Tensor");
  m.impl("tan",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::tan)));
  m.def("tan_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("tan_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::tan_));
  m.def("tan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("tan.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::tan_out_out));
  m.def("tanh(Tensor self) -> Tensor");
  m.def("tanh_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("tanh_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::tanh_));
  m.def("tanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("tanh.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::tanh_out_out));
  m.def("tensordot(Tensor self, Tensor other, int[] dims_self, int[] dims_other) -> Tensor");
  m.impl("tensordot",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::tensordot)));
  m.def("threshold(Tensor self, Scalar threshold, Scalar value) -> Tensor");
  m.def("threshold_(Tensor(a!) self, Scalar threshold, Scalar value) -> Tensor(a!)");
  m.def("threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("threshold_backward(Tensor grad_output, Tensor self, Scalar threshold) -> Tensor");
  m.def("transpose.int(Tensor(a) self, int dim0, int dim1) -> Tensor(a)");
  m.impl("transpose.int",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::transpose_int)));
  m.def("transpose.Dimname(Tensor(a) self, Dimname dim0, Dimname dim1) -> Tensor(a)");
  m.impl("transpose.Dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::transpose_Dimname));
  m.def("_mkldnn_transpose(Tensor self, int dim0, int dim1) -> Tensor");
  m.def("transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)");
  m.impl("transpose_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::transpose_));
  m.def("_mkldnn_transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)");
  m.def("one_hot(Tensor self, int num_classes=-1) -> Tensor");
  m.impl("one_hot",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::one_hot)));
  m.def("flip(Tensor self, int[] dims) -> Tensor");
  m.def("fliplr(Tensor self) -> Tensor");
  m.impl("fliplr",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::fliplr)));
  m.def("flipud(Tensor self) -> Tensor");
  m.impl("flipud",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::flipud)));
  m.def("roll(Tensor self, int[1] shifts, int[1] dims=[]) -> Tensor");
  m.def("rot90(Tensor self, int k=1, int[] dims=[0,1]) -> Tensor");
  m.impl("rot90",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::rot90)));
  m.def("trapz.x(Tensor y, Tensor x, *, int dim=-1) -> Tensor");
  m.impl("trapz.x",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::trapz_x)));
  m.def("trapz.dx(Tensor y, *, float dx=1, int dim=-1) -> Tensor");
  m.impl("trapz.dx",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::trapz_dx)));
  m.def("_trilinear(Tensor i1, Tensor i2, Tensor i3, int[] expand1, int[] expand2, int[] expand3, int[] sumdim, int unroll_dim=1) -> Tensor");
  m.impl("_trilinear",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_trilinear)));
  m.def("triplet_margin_loss(Tensor anchor, Tensor positive, Tensor negative, float margin=1.0, float p=2, float eps=1e-06, bool swap=False, int reduction=Mean) -> Tensor");
  m.impl("triplet_margin_loss",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::triplet_margin_loss)));
  m.def("true_divide.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("true_divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("true_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("true_divide.Scalar(Tensor self, Scalar other) -> Tensor");
  m.impl("true_divide.Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::true_divide_Scalar)));
  m.def("true_divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.impl("true_divide_.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::true_divide__Scalar));
  m.def("trunc(Tensor self) -> Tensor");
  m.impl("trunc",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::trunc)));
  m.def("trunc_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("trunc_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::trunc_));
  m.def("trunc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("type_as(Tensor self, Tensor other) -> Tensor");
  m.impl("type_as",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::type_as)));
  m.def("_has_compatible_shallow_copy_type(Tensor self, Tensor from) -> bool");
  m.impl("_has_compatible_shallow_copy_type",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_has_compatible_shallow_copy_type)));
  m.def("_unique(Tensor self, bool sorted=True, bool return_inverse=False) -> (Tensor, Tensor)");
  m.def("unique_dim(Tensor self, int dim, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)");
  m.def("unique_consecutive(Tensor self, bool return_inverse=False, bool return_counts=False, int? dim=None) -> (Tensor, Tensor, Tensor)");
  m.def("unique_dim_consecutive(Tensor self, int dim, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)");
  m.def("_unique2(Tensor self, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)");
  m.def("_unsafe_view(Tensor self, int[] size) -> Tensor");
  m.impl("_unsafe_view",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_unsafe_view)));
  m.def("unsqueeze(Tensor(a) self, int dim) -> Tensor(a)");
  m.impl("unsqueeze",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::unsqueeze)));
  m.def("unsqueeze_(Tensor(a!) self, int dim) -> Tensor(a!)");
  m.impl("unsqueeze_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::unsqueeze_));
  m.def("vander(Tensor x, int? N=None, bool increasing=False) -> Tensor");
  m.impl("vander",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::vander)));
  m.def("var(Tensor self, bool unbiased=True) -> Tensor");
  m.impl("var",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::var)));
  m.def("var.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor");
  m.impl("var.dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::var_dim)));
  m.def("var.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("var.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::var_out_out));
  m.def("var.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor");
  m.impl("var.names_dim",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::var_names_dim));
  m.def("var.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("var.names_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::var_out_names_out));
  m.def("var_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)");
  m.impl("var_mean",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::var_mean)));
  m.def("var_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)");
  m.impl("var_mean.dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::var_mean_dim)));
  m.def("var_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)");
  m.impl("var_mean.names_dim",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::var_mean_names_dim));
  m.def("view_as(Tensor(a) self, Tensor other) -> Tensor(a)");
  m.impl("view_as",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::view_as)));
  m.def("where.self(Tensor condition, Tensor self, Tensor other) -> Tensor");
  m.impl("where.self",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::where_self)));
  m.def("where(Tensor condition) -> Tensor[]");
  m.impl("where",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::where)));
  m.def("_s_where(Tensor condition, Tensor self, Tensor other) -> Tensor");
  m.impl("_s_where",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_s_where)));
  m.def("norm_except_dim(Tensor v, int pow=2, int dim=0) -> Tensor");
  m.impl("norm_except_dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::norm_except_dim)));
  m.def("_weight_norm(Tensor v, Tensor g, int dim=0) -> Tensor");
  m.impl("_weight_norm",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_weight_norm)));
  m.def("_weight_norm_cuda_interface(Tensor v, Tensor g, int dim=0) -> (Tensor, Tensor)");
  m.def("_weight_norm_cuda_interface_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)");
  m.def("_weight_norm_differentiable_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)");
  m.impl("_weight_norm_differentiable_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_weight_norm_differentiable_backward)));
  m.def("zeros.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("zeros.names",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::zeros_names));
  m.def("zeros(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("zeros",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::zeros)));
  m.def("zeros.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("zeros.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::zeros_out_out));
  m.def("zeros_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.impl("zeros_like",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::zeros_like)));
  m.def("_standard_gamma_grad(Tensor self, Tensor output) -> Tensor");
  m.def("_standard_gamma(Tensor self, Generator? generator=None) -> Tensor");
  m.def("_dirichlet_grad(Tensor x, Tensor alpha, Tensor total) -> Tensor");
  m.def("_sample_dirichlet(Tensor self, Generator? generator=None) -> Tensor");
  m.def("poisson(Tensor self, Generator? generator=None) -> Tensor");
  m.def("binomial(Tensor count, Tensor prob, Generator? generator=None) -> Tensor");
  m.def("native_norm(Tensor self, Scalar p=2) -> Tensor");
  m.def("_sparse_sum(Tensor self) -> Tensor");
  m.impl("_sparse_sum",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_sparse_sum)));
  m.def("_sparse_sum.dtype(Tensor self, *, ScalarType dtype) -> Tensor");
  m.impl("_sparse_sum.dtype",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_sparse_sum_dtype)));
  m.def("_sparse_sum.dim(Tensor self, int[1] dim) -> Tensor");
  m.impl("_sparse_sum.dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_sparse_sum_dim)));
  m.def("_sparse_sum.dim_dtype(Tensor self, int[1] dim, *, ScalarType dtype) -> Tensor");
  m.impl("_sparse_sum.dim_dtype",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_sparse_sum_dim_dtype)));
  m.def("_sparse_sum_backward(Tensor grad, Tensor self, int[] dim) -> Tensor");
  m.def("_sparse_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor");
  m.impl("_sparse_softmax.int",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_sparse_softmax_int)));
  m.def("_sparse_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor");
  m.impl("_sparse_softmax.Dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_sparse_softmax_Dimname));
  m.def("_sparse_softmax(Tensor self, int dim, bool half_to_float) -> Tensor");
  m.def("_sparse_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor");
  m.def("_sparse_log_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor");
  m.impl("_sparse_log_softmax.int",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_sparse_log_softmax_int)));
  m.def("_sparse_log_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor");
  m.impl("_sparse_log_softmax.Dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_sparse_log_softmax_Dimname));
  m.def("_sparse_log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor");
  m.def("_sparse_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor");
  m.def("norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, ScalarType dtype) -> Tensor");
  m.impl("norm.ScalarOpt_dtype",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::norm_ScalarOpt_dtype)));
  m.def("norm.Scalar(Tensor self, Scalar p=2) -> Tensor");
  m.impl("norm.Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::norm_Scalar)));
  m.def("norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor");
  m.impl("norm.ScalarOpt_dim_dtype",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::norm_ScalarOpt_dim_dtype)));
  m.def("norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> Tensor");
  m.impl("norm.ScalarOpt_dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::norm_ScalarOpt_dim)));
  m.def("norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)");
  m.impl("norm.dtype_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::norm_out_dtype_out));
  m.def("norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("norm.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::norm_out_out));
  m.def("norm.names_ScalarOpt_dim_dtype(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor");
  m.impl("norm.names_ScalarOpt_dim_dtype",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::norm_names_ScalarOpt_dim_dtype));
  m.def("norm.names_ScalarOpt_dim(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False) -> Tensor");
  m.impl("norm.names_ScalarOpt_dim",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::norm_names_ScalarOpt_dim));
  m.def("norm.names_dtype_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)");
  m.impl("norm.names_dtype_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::norm_out_names_dtype_out));
  m.def("norm.names_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("norm.names_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::norm_out_names_out));
  m.def("frobenius_norm(Tensor self) -> Tensor");
  m.impl("frobenius_norm",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::frobenius_norm)));
  m.def("frobenius_norm.dim(Tensor self, int[1] dim, bool keepdim=False) -> Tensor");
  m.impl("frobenius_norm.dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::frobenius_norm_dim)));
  m.def("frobenius_norm.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("frobenius_norm.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::frobenius_norm_out_out));
  m.def("nuclear_norm(Tensor self, bool keepdim=False) -> Tensor");
  m.impl("nuclear_norm",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::nuclear_norm)));
  m.def("nuclear_norm.out(Tensor self, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("nuclear_norm.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::nuclear_norm_out_out));
  m.def("nuclear_norm.dim(Tensor self, int[2] dim, bool keepdim=False) -> Tensor");
  m.impl("nuclear_norm.dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::nuclear_norm_dim)));
  m.def("nuclear_norm.dim_out(Tensor self, int[2] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("nuclear_norm.dim_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::nuclear_norm_out_dim_out));
  m.def("clone(Tensor self, *, MemoryFormat? memory_format=None) -> Tensor");
  m.def("resize_as_(Tensor(a!) self, Tensor the_template, *, MemoryFormat? memory_format=None) -> Tensor(a!)");
  m.def("pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("pow.Tensor_Scalar(Tensor self, Scalar exponent) -> Tensor");
  m.def("zero_(Tensor(a!) self) -> Tensor(a!)");
  m.def("sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("sub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor");
  m.def("sub_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)");
  m.def("sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor");
  m.impl("sub.Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::sub_Scalar)));
  m.def("sub_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)");
  m.impl("sub_.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::sub__Scalar));
  m.def("rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor");
  m.impl("rsub.Tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::rsub_Tensor)));
  m.def("rsub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor");
  m.impl("rsub.Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::rsub_Scalar)));
  m.def("_sparse_addmm(Tensor self, Tensor sparse, Tensor dense, *, Scalar beta=1, Scalar alpha=1) -> Tensor");
  m.impl("_sparse_addmm",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_sparse_addmm)));
  m.def("addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor");
  m.def("addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)");
  m.def("sparse_coo_tensor.size(int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor");
  m.impl("sparse_coo_tensor.size",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::sparse_coo_tensor_size));
  m.def("sparse_coo_tensor.indices(Tensor indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("sparse_coo_tensor.indices",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::sparse_coo_tensor_indices)));
  m.def("sparse_coo_tensor.indices_size(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("sparse_coo_tensor.indices_size",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::sparse_coo_tensor_indices_size)));
  m.def("_sparse_coo_tensor_unsafe(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("_sparse_coo_tensor_unsafe",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_sparse_coo_tensor_unsafe)));
  m.def("_validate_sparse_coo_tensor_args(Tensor indices, Tensor values, int[] size) -> ()");
  m.impl("_validate_sparse_coo_tensor_args",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_validate_sparse_coo_tensor_args));
  m.def("_sparse_coo_tensor_with_dims(int sparse_dim, int dense_dim, int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor");
  m.def("_sparse_coo_tensor_with_dims_and_tensors(int sparse_dim, int dense_dim, int[] size, Tensor indices, Tensor values, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor");
  m.def("sparse_resize_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)");
  m.def("sparse_resize_and_clear_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)");
  m.def("sparse_mask(Tensor self, Tensor mask) -> Tensor");
  m.def("to_dense(Tensor self) -> Tensor");
  m.def("to_dense_backward(Tensor grad, Tensor input) -> Tensor");
  m.impl("to_dense_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::to_dense_backward)));
  m.def("sparse_dim(Tensor self) -> int");
  m.def("_dimI(Tensor self) -> int");
  m.def("dense_dim(Tensor self) -> int");
  m.def("_dimV(Tensor self) -> int");
  m.def("_nnz(Tensor self) -> int");
  m.def("coalesce(Tensor self) -> Tensor");
  m.def("is_coalesced(Tensor self) -> bool");
  m.def("_indices(Tensor(a) self) -> Tensor(a)");
  m.def("_values(Tensor(a) self) -> Tensor(a)");
  m.def("_coalesced_(Tensor(a!) self, bool coalesced) -> Tensor(a!)");
  m.def("indices(Tensor(a) self) -> Tensor(a)");
  m.def("values(Tensor(a) self) -> Tensor(a)");
  m.def("hspmm.out(Tensor mat1, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("hspmm(Tensor mat1, Tensor mat2) -> Tensor");
  m.def("copy_sparse_to_sparse_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)");
  m.def("unbind.int(Tensor(a) self, int dim=0) -> Tensor(a)[]");
  m.impl("unbind.int",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::unbind_int)));
  m.def("unbind.Dimname(Tensor(a) self, Dimname dim) -> Tensor(a)[]");
  m.impl("unbind.Dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::unbind_Dimname));
  m.def("to_sparse.sparse_dim(Tensor self, int sparse_dim) -> Tensor");
  m.def("to_sparse(Tensor self) -> Tensor");
  m.def("to_mkldnn(Tensor self) -> Tensor");
  m.def("mkldnn_reorder_conv2d_weight(Tensor self, int[2] padding=0, int[2] stride=1, int[2] dilation=1, int groups=1) -> Tensor");
  m.def("to_mkldnn_backward(Tensor grad, Tensor input) -> Tensor");
  m.impl("to_mkldnn_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::to_mkldnn_backward)));
  m.def("quantize_per_tensor(Tensor self, float scale, int zero_point, ScalarType dtype) -> Tensor");
  m.def("quantize_per_tensor.tensors(Tensor[] tensors, Tensor scales, Tensor zero_points, ScalarType dtype) -> Tensor[]");
  m.def("quantize_per_channel(Tensor self, Tensor scales, Tensor zero_points, int axis, ScalarType dtype) -> Tensor");
  m.def("dequantize.self(Tensor self) -> Tensor");
  m.def("dequantize.tensors(Tensor[] tensors) -> Tensor[]");
  m.def("q_scale(Tensor self) -> float");
  m.def("q_zero_point(Tensor self) -> int");
  m.def("q_per_channel_scales(Tensor self) -> Tensor");
  m.def("q_per_channel_zero_points(Tensor self) -> Tensor");
  m.def("q_per_channel_axis(Tensor self) -> int");
  m.def("int_repr(Tensor self) -> Tensor");
  m.def("_make_per_tensor_quantized_tensor(Tensor self, float scale, int zero_point) -> Tensor");
  m.def("_make_per_channel_quantized_tensor(Tensor self, Tensor scale, Tensor zero_point, int axis) -> Tensor");
  m.def("qscheme(Tensor self) -> QScheme");
  m.def("fake_quantize_per_tensor_affine(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> Tensor");
  m.impl("fake_quantize_per_tensor_affine",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::fake_quantize_per_tensor_affine)));
  m.def("fake_quantize_per_tensor_affine_backward(Tensor grad, Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> Tensor");
  m.impl("fake_quantize_per_tensor_affine_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::fake_quantize_per_tensor_affine_backward)));
  m.def("fake_quantize_per_channel_affine(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> Tensor");
  m.impl("fake_quantize_per_channel_affine",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::fake_quantize_per_channel_affine)));
  m.def("fake_quantize_per_channel_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> Tensor");
  m.impl("fake_quantize_per_channel_affine_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::fake_quantize_per_channel_affine_backward)));
  m.def("_choose_qparams_per_tensor(Tensor self, bool reduce_range=False) -> (float, int)");
  m.impl("_choose_qparams_per_tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_choose_qparams_per_tensor)));
  m.def("to.dtype_layout(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor");
  m.impl("to.dtype_layout",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::to_dtype_layout));
  m.def("to.device(Tensor self, Device device, ScalarType dtype, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor");
  m.impl("to.device",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::to_device)));
  m.def("to.dtype(Tensor self, ScalarType dtype, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor");
  m.impl("to.dtype",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::to_dtype)));
  m.def("to.other(Tensor self, Tensor other, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor");
  m.impl("to.other",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::to_other)));
  m.def("meshgrid(Tensor[] tensors) -> Tensor[]");
  m.impl("meshgrid",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::meshgrid)));
  m.def("cartesian_prod(Tensor[] tensors) -> Tensor");
  m.impl("cartesian_prod",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::cartesian_prod)));
  m.def("combinations(Tensor self, int r=2, bool with_replacement=False) -> Tensor");
  m.impl("combinations",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::combinations)));
  m.def("item(Tensor self) -> Scalar");
  m.impl("item",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::item)));
  m.def("result_type.Tensor(Tensor tensor, Tensor other) -> ScalarType");
  m.impl("result_type.Tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::result_type_Tensor)));
  m.def("result_type.Scalar(Tensor tensor, Scalar other) -> ScalarType");
  m.impl("result_type.Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::result_type_Scalar)));
  m.def("result_type.Scalar_Tensor(Scalar scalar, Tensor tensor) -> ScalarType");
  m.impl("result_type.Scalar_Tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::result_type_Scalar_Tensor)));
  m.def("result_type.Scalar_Scalar(Scalar scalar1, Scalar scalar2) -> ScalarType");
  m.impl("result_type.Scalar_Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::result_type_Scalar_Scalar)));
  m.def("can_cast(ScalarType from, ScalarType to) -> bool");
  m.impl("can_cast",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::can_cast)));
  m.def("promote_types(ScalarType type1, ScalarType type2) -> ScalarType");
  m.impl("promote_types",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::promote_types)));
  m.def("_local_scalar_dense(Tensor self) -> Scalar");
  m.def("_thnn_fused_lstm_cell(Tensor input_gates, Tensor hidden_gates, Tensor cx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor, Tensor)");
  m.def("_thnn_fused_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor cx, Tensor cy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)");
  m.def("_thnn_differentiable_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor input_gates, Tensor hidden_gates, Tensor? input_bias, Tensor? hidden_bias, Tensor cx, Tensor cy) -> (Tensor, Tensor, Tensor, Tensor, Tensor)");
  m.impl("_thnn_differentiable_lstm_cell_backward",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_thnn_differentiable_lstm_cell_backward));
  m.def("_thnn_fused_gru_cell(Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor)");
  m.def("_thnn_fused_gru_cell_backward(Tensor grad_hy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)");
  m.def("_thnn_differentiable_gru_cell_backward(Tensor grad_hy, Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias, Tensor? hidden_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)");
  m.impl("_thnn_differentiable_gru_cell_backward",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::_thnn_differentiable_gru_cell_backward));
  m.def("lstm.input(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor)");
  m.impl("lstm.input",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::lstm_input)));
  m.def("lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor, Tensor)");
  m.impl("lstm.data",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::lstm_data)));
  m.def("gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)");
  m.impl("gru.input",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::gru_input)));
  m.def("gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)");
  m.impl("gru.data",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::gru_data)));
  m.def("rnn_tanh.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)");
  m.impl("rnn_tanh.input",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::rnn_tanh_input)));
  m.def("rnn_tanh.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)");
  m.impl("rnn_tanh.data",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::rnn_tanh_data)));
  m.def("rnn_relu.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)");
  m.impl("rnn_relu.input",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::rnn_relu_input)));
  m.def("rnn_relu.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)");
  m.impl("rnn_relu.data",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::rnn_relu_data)));
  m.def("lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)");
  m.impl("lstm_cell",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::lstm_cell));
  m.def("gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor");
  m.impl("gru_cell",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::gru_cell));
  m.def("rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor");
  m.impl("rnn_tanh_cell",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::rnn_tanh_cell));
  m.def("rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor");
  m.impl("rnn_relu_cell",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::rnn_relu_cell));
  m.def("quantized_lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor, Tensor)");
  m.impl("quantized_lstm_cell",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::quantized_lstm_cell)));
  m.def("quantized_gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor");
  m.impl("quantized_gru_cell",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::quantized_gru_cell)));
  m.def("quantized_rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor");
  m.impl("quantized_rnn_relu_cell",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::quantized_rnn_relu_cell)));
  m.def("quantized_rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor");
  m.impl("quantized_rnn_tanh_cell",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::quantized_rnn_tanh_cell)));
  m.def("_pack_padded_sequence(Tensor input, Tensor lengths, bool batch_first) -> (Tensor, Tensor)");
  m.impl("_pack_padded_sequence",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_pack_padded_sequence)));
  m.def("_pack_padded_sequence_backward(Tensor grad, int[] input_size, Tensor batch_sizes, bool batch_first) -> Tensor");
  m.impl("_pack_padded_sequence_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_pack_padded_sequence_backward)));
  m.def("_pad_packed_sequence(Tensor data, Tensor batch_sizes, bool batch_first, Scalar padding_value, int total_length) -> (Tensor, Tensor)");
  m.impl("_pad_packed_sequence",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_pad_packed_sequence)));
  m.def("set_.source_Storage(Tensor(a!) self, Storage source) -> Tensor(a!)");
  m.def("set_.source_Storage_storage_offset(Tensor(a!) self, Storage source, int storage_offset, int[] size, int[] stride=[]) -> Tensor(a!)");
  m.def("set_.source_Tensor(Tensor(a!) self, Tensor source) -> Tensor(a!)");
  m.def("set_(Tensor(a!) self) -> Tensor(a!)");
  m.def("set_quantizer_(Tensor(a!) self, ConstQuantizerPtr quantizer) -> Tensor(a!)");
  m.def("is_set_to(Tensor self, Tensor tensor) -> bool");
  m.def("masked_fill_.Scalar(Tensor(a!) self, Tensor mask, Scalar value) -> Tensor(a!)");
  m.def("masked_fill.Scalar(Tensor self, Tensor mask, Scalar value) -> Tensor");
  m.impl("masked_fill.Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::masked_fill_Scalar)));
  m.def("masked_fill_.Tensor(Tensor(a!) self, Tensor mask, Tensor value) -> Tensor(a!)");
  m.def("masked_fill.Tensor(Tensor self, Tensor mask, Tensor value) -> Tensor");
  m.impl("masked_fill.Tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::masked_fill_Tensor)));
  m.def("masked_scatter_(Tensor(a!) self, Tensor mask, Tensor source) -> Tensor(a!)");
  m.def("masked_scatter(Tensor self, Tensor mask, Tensor source) -> Tensor");
  m.impl("masked_scatter",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::masked_scatter)));
  m.def("view(Tensor(a) self, int[] size) -> Tensor(a)");
  m.def("put_(Tensor(a!) self, Tensor index, Tensor source, bool accumulate=False) -> Tensor(a!)");
  m.def("index_add_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)");
  m.def("index_add(Tensor self, int dim, Tensor index, Tensor source) -> Tensor");
  m.impl("index_add",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::index_add)));
  m.def("index_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor");
  m.impl("index_add.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::index_add_dimname));
  m.def("index_fill_.int_Scalar(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)");
  m.def("index_fill.int_Scalar(Tensor self, int dim, Tensor index, Scalar value) -> Tensor");
  m.impl("index_fill.int_Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::index_fill_int_Scalar)));
  m.def("index_fill_.int_Tensor(Tensor(a!) self, int dim, Tensor index, Tensor value) -> Tensor(a!)");
  m.def("index_fill.int_Tensor(Tensor self, int dim, Tensor index, Tensor value) -> Tensor");
  m.impl("index_fill.int_Tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::index_fill_int_Tensor)));
  m.def("index_fill_.Dimname_Scalar(Tensor(a!) self, Dimname dim, Tensor index, Scalar value) -> Tensor(a!)");
  m.impl("index_fill_.Dimname_Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::index_fill__Dimname_Scalar));
  m.def("index_fill_.Dimname_Tensor(Tensor(a!) self, Dimname dim, Tensor index, Tensor value) -> Tensor(a!)");
  m.impl("index_fill_.Dimname_Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::index_fill__Dimname_Tensor));
  m.def("index_fill.Dimname_Scalar(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor");
  m.impl("index_fill.Dimname_Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::index_fill_Dimname_Scalar));
  m.def("index_fill.Dimname_Tensor(Tensor self, Dimname dim, Tensor index, Tensor value) -> Tensor");
  m.impl("index_fill.Dimname_Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::index_fill_Dimname_Tensor));
  m.def("scatter_.src(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)");
  m.def("scatter.src(Tensor self, int dim, Tensor index, Tensor src) -> Tensor");
  m.impl("scatter.src",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::scatter_src)));
  m.def("scatter_.value(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)");
  m.def("scatter.value(Tensor self, int dim, Tensor index, Scalar value) -> Tensor");
  m.impl("scatter.value",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::scatter_value)));
  m.def("scatter.dimname_src(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor");
  m.impl("scatter.dimname_src",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::scatter_dimname_src));
  m.def("scatter.dimname_value(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor");
  m.impl("scatter.dimname_value",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::scatter_dimname_value));
  m.def("scatter_.reduce(Tensor(a!) self, int dim, Tensor index, Tensor src, *, str reduce) -> Tensor(a!)");
  m.def("scatter_.value_reduce(Tensor(a!) self, int dim, Tensor index, Scalar value, *, str reduce) -> Tensor(a!)");
  m.def("scatter_add_(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)");
  m.def("scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> Tensor");
  m.impl("scatter_add",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::scatter_add)));
  m.def("scatter_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor");
  m.impl("scatter_add.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::scatter_add_dimname));
  m.def("lt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.impl("lt_.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::lt__Scalar));
  m.def("lt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.impl("lt_.Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::lt__Tensor));
  m.def("gt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.impl("gt_.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::gt__Scalar));
  m.def("gt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.impl("gt_.Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::gt__Tensor));
  m.def("le_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.impl("le_.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::le__Scalar));
  m.def("le_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.impl("le_.Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::le__Tensor));
  m.def("ge_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.impl("ge_.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::ge__Scalar));
  m.def("ge_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.impl("ge_.Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::ge__Tensor));
  m.def("eq_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.impl("eq_.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::eq__Scalar));
  m.def("eq_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.impl("eq_.Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::eq__Tensor));
  m.def("ne_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.impl("ne_.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::ne__Scalar));
  m.def("ne_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.impl("ne_.Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::ne__Tensor));
  m.def("bitwise_and.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("bitwise_and.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("bitwise_and.Scalar(Tensor self, Scalar other) -> Tensor");
  m.impl("bitwise_and.Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::bitwise_and_Scalar)));
  m.def("bitwise_and.Tensor(Tensor self, Tensor other) -> Tensor");
  m.impl("bitwise_and.Tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::bitwise_and_Tensor)));
  m.def("bitwise_and_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.impl("bitwise_and_.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::bitwise_and__Scalar));
  m.def("bitwise_and_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.impl("bitwise_and_.Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::bitwise_and__Tensor));
  m.def("__and__.Scalar(Tensor self, Scalar other) -> Tensor");
  m.impl("__and__.Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::__and___Scalar)));
  m.def("__and__.Tensor(Tensor self, Tensor other) -> Tensor");
  m.impl("__and__.Tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::__and___Tensor)));
  m.def("__iand__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.impl("__iand__.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::__iand___Scalar));
  m.def("__iand__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.impl("__iand__.Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::__iand___Tensor));
  m.def("bitwise_or.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("bitwise_or.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("bitwise_or.Scalar(Tensor self, Scalar other) -> Tensor");
  m.impl("bitwise_or.Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::bitwise_or_Scalar)));
  m.def("bitwise_or.Tensor(Tensor self, Tensor other) -> Tensor");
  m.impl("bitwise_or.Tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::bitwise_or_Tensor)));
  m.def("bitwise_or_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.impl("bitwise_or_.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::bitwise_or__Scalar));
  m.def("bitwise_or_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.impl("bitwise_or_.Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::bitwise_or__Tensor));
  m.def("__or__.Scalar(Tensor self, Scalar other) -> Tensor");
  m.impl("__or__.Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::__or___Scalar)));
  m.def("__or__.Tensor(Tensor self, Tensor other) -> Tensor");
  m.impl("__or__.Tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::__or___Tensor)));
  m.def("__ior__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.impl("__ior__.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::__ior___Scalar));
  m.def("__ior__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.impl("__ior__.Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::__ior___Tensor));
  m.def("bitwise_xor.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("bitwise_xor.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("bitwise_xor.Scalar(Tensor self, Scalar other) -> Tensor");
  m.impl("bitwise_xor.Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::bitwise_xor_Scalar)));
  m.def("bitwise_xor.Tensor(Tensor self, Tensor other) -> Tensor");
  m.impl("bitwise_xor.Tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::bitwise_xor_Tensor)));
  m.def("bitwise_xor_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.impl("bitwise_xor_.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::bitwise_xor__Scalar));
  m.def("bitwise_xor_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.impl("bitwise_xor_.Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::bitwise_xor__Tensor));
  m.def("__xor__.Scalar(Tensor self, Scalar other) -> Tensor");
  m.impl("__xor__.Scalar",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::__xor___Scalar)));
  m.def("__xor__.Tensor(Tensor self, Tensor other) -> Tensor");
  m.impl("__xor__.Tensor",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::__xor___Tensor)));
  m.def("__ixor__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.impl("__ixor__.Scalar",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::__ixor___Scalar));
  m.def("__ixor__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.impl("__ixor__.Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::__ixor___Tensor));
  m.def("__lshift__.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("__lshift__.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("__ilshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("__ilshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("__rshift__.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("__rshift__.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("__irshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("__irshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("lgamma_(Tensor(a!) self) -> Tensor(a!)");
  m.def("atan2_(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.impl("atan2_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::atan2_));
  m.def("tril_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)");
  m.def("triu_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)");
  m.def("digamma_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("digamma_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::digamma_));
  m.def("polygamma_(Tensor(a!) self, int n) -> Tensor(a!)");
  m.impl("polygamma_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::polygamma_));
  m.def("renorm_(Tensor(a!) self, Scalar p, int dim, Scalar maxnorm) -> Tensor(a!)");
  m.def("pow_.Scalar(Tensor(a!) self, Scalar exponent) -> Tensor(a!)");
  m.def("pow_.Tensor(Tensor(a!) self, Tensor exponent) -> Tensor(a!)");
  m.def("lerp_.Scalar(Tensor(a!) self, Tensor end, Scalar weight) -> Tensor(a!)");
  m.def("lerp_.Tensor(Tensor(a!) self, Tensor end, Tensor weight) -> Tensor(a!)");
  m.def("fmod_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("fmod_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("remainder_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("remainder_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("addbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)");
  m.def("addbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("addbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor");
  m.def("addcdiv_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)");
  m.impl("addcdiv_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::addcdiv_));
  m.def("random_.from(Tensor(a!) self, int from, int? to, *, Generator? generator=None) -> Tensor(a!)");
  m.impl("random_.from",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::random__from));
  m.def("random_.to(Tensor(a!) self, int to, *, Generator? generator=None) -> Tensor(a!)");
  m.impl("random_.to",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::random__to));
  m.def("random_(Tensor(a!) self, *, Generator? generator=None) -> Tensor(a!)");
  m.impl("random_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::random_));
  m.def("uniform_(Tensor(a!) self, float from=0, float to=1, *, Generator? generator=None) -> Tensor(a!)");
  m.impl("uniform_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::uniform_));
  m.def("cauchy_(Tensor(a!) self, float median=0, float sigma=1, *, Generator? generator=None) -> Tensor(a!)");
  m.impl("cauchy_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cauchy_));
  m.def("log_normal_(Tensor(a!) self, float mean=1, float std=2, *, Generator? generator=None) -> Tensor(a!)");
  m.impl("log_normal_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::log_normal_));
  m.def("exponential_(Tensor(a!) self, float lambd=1, *, Generator? generator=None) -> Tensor(a!)");
  m.impl("exponential_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::exponential_));
  m.def("geometric_(Tensor(a!) self, float p, *, Generator? generator=None) -> Tensor(a!)");
  m.impl("geometric_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::geometric_));
  m.def("diag.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("diag(Tensor self, int diagonal=0) -> Tensor");
  m.impl("diag",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::diag)));
  m.def("cross.out(Tensor self, Tensor other, int? dim=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("cross.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cross_out_out));
  m.def("cross(Tensor self, Tensor other, int? dim=None) -> Tensor");
  m.impl("cross",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::cross)));
  m.def("triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("triu(Tensor self, int diagonal=0) -> Tensor");
  m.impl("triu",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::triu)));
  m.def("tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("tril(Tensor self, int diagonal=0) -> Tensor");
  m.impl("tril",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::tril)));
  m.def("tril_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("triu_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("trace(Tensor self) -> Tensor");
  m.def("ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("ne.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("ne.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("eq.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("eq.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("ge.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("ge.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("le.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("le.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("gt.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("gt.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("lt.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("lt.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("take(Tensor self, Tensor index) -> Tensor");
  m.def("index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("index_select(Tensor self, int dim, Tensor index) -> Tensor");
  m.def("index_select.dimname_out(Tensor self, Dimname dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("index_select.dimname_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::index_select_out_dimname_out));
  m.def("index_select.dimname(Tensor self, Dimname dim, Tensor index) -> Tensor");
  m.impl("index_select.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::index_select_dimname));
  m.def("masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("masked_select(Tensor self, Tensor mask) -> Tensor");
  m.def("nonzero.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("nonzero(Tensor self) -> Tensor");
  m.def("nonzero_numpy(Tensor self) -> Tensor[]");
  m.impl("nonzero_numpy",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::nonzero_numpy)));
  m.def("gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("gather(Tensor self, int dim, Tensor index, *, bool sparse_grad=False) -> Tensor");
  m.def("gather.dimname_out(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)");
  m.impl("gather.dimname_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::gather_out_dimname_out));
  m.def("gather.dimname(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False) -> Tensor");
  m.impl("gather.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::gather_dimname));
  m.def("_gather_sparse_backward(Tensor self, int dim, Tensor index, Tensor grad) -> Tensor");
  m.impl("_gather_sparse_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_gather_sparse_backward)));
  m.def("addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)");
  m.impl("addcmul.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::addcmul_out_out));
  m.def("addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor");
  m.impl("addcmul",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::addcmul)));
  m.def("addcmul_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)");
  m.impl("addcmul_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::addcmul_));
  m.def("addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)");
  m.impl("addcdiv.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::addcdiv_out_out));
  m.def("addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor");
  m.impl("addcdiv",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::addcdiv)));
  m.def("lstsq.X(Tensor self, Tensor A, *, Tensor(a!) X, Tensor(b!) qr) -> (Tensor(a!) solution, Tensor(b!) QR)");
  m.def("lstsq(Tensor self, Tensor A) -> (Tensor solution, Tensor QR)");
  m.def("triangular_solve.X(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False, *, Tensor(a!) X, Tensor(b!) M) -> (Tensor(a!) solution, Tensor(b!) cloned_coefficient)");
  m.impl("triangular_solve.X",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::triangular_solve_out_X));
  m.def("triangular_solve(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False) -> (Tensor solution, Tensor cloned_coefficient)");
  m.impl("triangular_solve",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::triangular_solve)));
  m.def("_triangular_solve_helper(Tensor self, Tensor A, bool upper, bool transpose, bool unitriangular) -> (Tensor, Tensor)");
  m.def("symeig.e(Tensor self, bool eigenvectors=False, bool upper=True, *, Tensor(a!) e, Tensor(b!) V) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)");
  m.impl("symeig.e",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::symeig_out_e));
  m.def("symeig(Tensor self, bool eigenvectors=False, bool upper=True) -> (Tensor eigenvalues, Tensor eigenvectors)");
  m.impl("symeig",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::symeig)));
  m.def("_symeig_helper(Tensor self, bool eigenvectors, bool upper) -> (Tensor, Tensor)");
  m.def("eig.e(Tensor self, bool eigenvectors=False, *, Tensor(a!) e, Tensor(b!) v) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)");
  m.def("eig(Tensor self, bool eigenvectors=False) -> (Tensor eigenvalues, Tensor eigenvectors)");
  m.def("svd.U(Tensor self, bool some=True, bool compute_uv=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) V) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) V)");
  m.impl("svd.U",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::svd_out_U));
  m.def("svd(Tensor self, bool some=True, bool compute_uv=True) -> (Tensor U, Tensor S, Tensor V)");
  m.impl("svd",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::svd)));
  m.def("_svd_helper(Tensor self, bool some, bool compute_uv) -> (Tensor, Tensor, Tensor)");
  m.def("cholesky.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("cholesky.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cholesky_out_out));
  m.def("cholesky(Tensor self, bool upper=False) -> Tensor");
  m.impl("cholesky",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::cholesky)));
  m.def("_cholesky_helper(Tensor self, bool upper) -> Tensor");
  m.def("cholesky_solve.out(Tensor self, Tensor input2, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("cholesky_solve.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::cholesky_solve_out_out));
  m.def("cholesky_solve(Tensor self, Tensor input2, bool upper=False) -> Tensor");
  m.impl("cholesky_solve",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::cholesky_solve)));
  m.def("_cholesky_solve_helper(Tensor self, Tensor A, bool upper) -> Tensor");
  m.def("solve(Tensor self, Tensor A) -> (Tensor solution, Tensor LU)");
  m.impl("solve",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::solve)));
  m.def("solve.solution(Tensor self, Tensor A, *, Tensor(a!) solution, Tensor(b!) lu) -> (Tensor(a!) solution, Tensor(b!) LU)");
  m.impl("solve.solution",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::solve_out_solution));
  m.def("_solve_helper(Tensor self, Tensor A) -> (Tensor, Tensor)");
  m.def("cholesky_inverse.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("cholesky_inverse(Tensor self, bool upper=False) -> Tensor");
  m.def("qr.Q(Tensor self, bool some=True, *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)");
  m.impl("qr.Q",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::qr_out_Q));
  m.def("qr(Tensor self, bool some=True) -> (Tensor Q, Tensor R)");
  m.impl("qr",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::qr)));
  m.def("_qr_helper(Tensor self, bool some) -> (Tensor, Tensor)");
  m.def("geqrf.a(Tensor self, *, Tensor(a!) a, Tensor(b!) tau) -> (Tensor(a!) a, Tensor(b!) tau)");
  m.def("geqrf(Tensor self) -> (Tensor a, Tensor tau)");
  m.def("orgqr.out(Tensor self, Tensor input2, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("orgqr(Tensor self, Tensor input2) -> Tensor");
  m.def("ormqr.out(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("ormqr(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False) -> Tensor");
  m.def("_lu_with_info(Tensor self, bool pivot=True, bool check_errors=True) -> (Tensor, Tensor, Tensor)");
  m.def("lu_solve.out(Tensor self, Tensor LU_data, Tensor LU_pivots, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("lu_solve.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::lu_solve_out_out));
  m.def("lu_solve(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor");
  m.impl("lu_solve",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::lu_solve)));
  m.def("_lu_solve_helper(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor");
  m.def("multinomial.out(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("multinomial(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None) -> Tensor");
  m.def("_multinomial_alias_setup(Tensor probs) -> (Tensor, Tensor)");
  m.def("_multinomial_alias_draw(Tensor J, Tensor q, int num_samples, *, Generator? generator=None) -> Tensor");
  m.def("lgamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("lgamma(Tensor self) -> Tensor");
  m.def("digamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("digamma.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::digamma_out_out));
  m.def("digamma(Tensor self) -> Tensor");
  m.impl("digamma",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::digamma)));
  m.def("polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("polygamma.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::polygamma_out_out));
  m.def("polygamma(int n, Tensor self) -> Tensor");
  m.impl("polygamma",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::polygamma)));
  m.def("erfinv(Tensor self) -> Tensor");
  m.def("erfinv_(Tensor(a!) self) -> Tensor(a!)");
  m.def("erfinv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("sign(Tensor self) -> Tensor");
  m.impl("sign",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::sign)));
  m.def("sign_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("sign_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::sign_));
  m.def("sign.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("dist(Tensor self, Tensor other, Scalar p=2) -> Tensor");
  m.impl("dist",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::dist)));
  m.def("atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("atan2.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::atan2_out_out));
  m.def("atan2(Tensor self, Tensor other) -> Tensor");
  m.impl("atan2",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::atan2)));
  m.def("lerp.Scalar_out(Tensor self, Tensor end, Scalar weight, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("lerp.Tensor_out(Tensor self, Tensor end, Tensor weight, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("lerp.Scalar(Tensor self, Tensor end, Scalar weight) -> Tensor");
  m.def("lerp.Tensor(Tensor self, Tensor end, Tensor weight) -> Tensor");
  m.def("histc.out(Tensor self, int bins=100, Scalar min=0, Scalar max=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("histc(Tensor self, int bins=100, Scalar min=0, Scalar max=0) -> Tensor");
  m.def("fmod.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fmod.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fmod.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("remainder.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("remainder.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("remainder.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("min.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::min_out_out));
  m.def("min.other(Tensor self, Tensor other) -> Tensor");
  m.impl("min.other",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::min_other)));
  m.def("min(Tensor self) -> Tensor");
  m.def("max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("max.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::max_out_out));
  m.def("max.other(Tensor self, Tensor other) -> Tensor");
  m.impl("max.other",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::max_other)));
  m.def("max(Tensor self) -> Tensor");
  m.def("median(Tensor self) -> Tensor");
  m.def("sort.values(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("sort(Tensor self, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)");
  m.def("sort.dimname_values(Tensor self, Dimname dim, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.impl("sort.dimname_values",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::sort_out_dimname_values));
  m.def("sort.dimname(Tensor self, Dimname dim, bool descending=False) -> (Tensor values, Tensor indices)");
  m.impl("sort.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::sort_dimname));
  m.def("argsort(Tensor self, int dim=-1, bool descending=False) -> Tensor");
  m.impl("argsort",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::argsort)));
  m.def("argsort.dimname(Tensor self, Dimname dim, bool descending=False) -> Tensor");
  m.impl("argsort.dimname",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::argsort_dimname));
  m.def("topk.values(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) ->(Tensor(a!) values, Tensor(b!) indices)");
  m.def("topk(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices)");
  m.def("all(Tensor self) -> Tensor");
  m.impl("all",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::all)));
  m.def("any(Tensor self) -> Tensor");
  m.def("renorm.out(Tensor self, Scalar p, int dim, Scalar maxnorm, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("renorm(Tensor self, Scalar p, int dim, Scalar maxnorm) -> Tensor");
  m.def("unfold(Tensor(a) self, int dimension, int size, int step) -> Tensor(a)");
  m.def("unfold_backward(Tensor grad_in, int[] input_sizes, int dim, int size, int step) -> Tensor");
  m.def("equal(Tensor self, Tensor other) -> bool");
  m.def("pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("pow.Tensor_Tensor(Tensor self, Tensor exponent) -> Tensor");
  m.def("pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("pow.Scalar(Scalar self, Tensor exponent) -> Tensor");
  m.def("normal_(Tensor(a!) self, float mean=0, float std=1, *, Generator? generator=None) -> Tensor(a!)");
  m.impl("normal_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::normal_));
  m.def("normal.Tensor_float_out(Tensor mean, float std=1, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)");
  m.impl("normal.Tensor_float_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::normal_out_Tensor_float_out));
  m.def("normal.Tensor_float(Tensor mean, float std=1, *, Generator? generator=None) -> Tensor");
  m.impl("normal.Tensor_float",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::normal_Tensor_float));
  m.def("normal.float_Tensor_out(float mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)");
  m.impl("normal.float_Tensor_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::normal_out_float_Tensor_out));
  m.def("normal.float_Tensor(float mean, Tensor std, *, Generator? generator=None) -> Tensor");
  m.impl("normal.float_Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::normal_float_Tensor));
  m.def("normal.Tensor_Tensor_out(Tensor mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)");
  m.impl("normal.Tensor_Tensor_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::normal_out_Tensor_Tensor_out));
  m.def("normal.Tensor_Tensor(Tensor mean, Tensor std, *, Generator? generator=None) -> Tensor");
  m.impl("normal.Tensor_Tensor",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::normal_Tensor_Tensor));
  m.def("normal.float_float(float mean, float std, int[] size, *, Generator? generator=None, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.impl("normal.float_float",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::normal_float_float));
  m.def("normal.float_float_out(float mean, float std, int[] size, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)");
  m.impl("normal.float_float_out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::normal_out_float_float_out));
  m.def("alias(Tensor(a) self) -> Tensor(a)");
  m.impl("alias",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::alias)));
  m.def("_addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor");
  m.def("_addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)");
  m.def("_addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("_index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)");
  m.def("_cumsum(Tensor self, int dim) -> Tensor");
  m.def("_cumsum.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_cumprod(Tensor self, int dim) -> Tensor");
  m.def("_cumprod.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_var(Tensor self, bool unbiased=True) -> Tensor");
  m.def("_std(Tensor self, bool unbiased=True) -> Tensor");
  m.def("_amp_non_finite_check_and_unscale_(Tensor(a!) self, Tensor(b!) found_inf, Tensor inv_scale) -> ()");
  m.def("_amp_update_scale(Tensor(a!) growth_tracker, Tensor current_scale, Tensor found_inf, float scale_growth_factor, float scale_backoff_factor, int growth_interval) -> Tensor");
  m.def("_cat(Tensor[] tensors, int dim=0) -> Tensor");
  m.def("_cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor, Tensor)");
  m.def("_mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))");
  m.def("bucketize.Tensor(Tensor self, Tensor boundaries, *, bool out_int32=False, bool right=False) -> Tensor");
  m.def("bucketize.Tensor_out(Tensor self, Tensor boundaries, *, bool out_int32=False, bool right=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("bucketize.Scalar(Scalar self, Tensor boundaries, *, bool out_int32=False, bool right=False) -> Tensor");
  m.def("searchsorted.Tensor(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False) -> Tensor");
  m.def("searchsorted.Tensor_out(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("searchsorted.Scalar(Tensor sorted_sequence, Scalar self, *, bool out_int32=False, bool right=False) -> Tensor");
  m.def("mse_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("mse_loss.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::mse_loss_out_out));
  m.def("mse_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor");
  m.impl("mse_loss",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::mse_loss)));
  m.def("mse_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("mse_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor");
  m.def("l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("l1_loss.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::l1_loss_out_out));
  m.def("l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor");
  m.impl("l1_loss",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::l1_loss)));
  m.def("l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor");
  m.impl("l1_loss_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::l1_loss_backward)));
  m.def("multi_margin_loss.out(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("multi_margin_loss(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean) -> Tensor");
  m.def("multi_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("multi_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean) -> Tensor");
  m.def("multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("multilabel_margin_loss.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::multilabel_margin_loss_out_out));
  m.def("multilabel_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor");
  m.impl("multilabel_margin_loss",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::multilabel_margin_loss)));
  m.def("multilabel_margin_loss_forward.output(Tensor self, Tensor target, int reduction, *, Tensor(a!) output, Tensor(b!) is_target) -> (Tensor(a!), Tensor(b!))");
  m.def("multilabel_margin_loss_forward(Tensor self, Tensor target, int reduction) -> (Tensor output, Tensor is_target)");
  m.def("multilabel_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("multilabel_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target) -> Tensor");
  m.def("nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("nll_loss.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::nll_loss_out_out));
  m.def("nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor");
  m.impl("nll_loss",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::nll_loss));
  m.def("nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))");
  m.def("nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)");
  m.def("nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor");
  m.def("nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("nll_loss2d.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::nll_loss2d_out_out));
  m.def("nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor");
  m.impl("nll_loss2d",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::nll_loss2d));
  m.def("nll_loss2d_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))");
  m.def("nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)");
  m.def("nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor");
  m.def("smooth_l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("smooth_l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor");
  m.impl("smooth_l1_loss",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::smooth_l1_loss)));
  m.def("smooth_l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("smooth_l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor");
  m.impl("smooth_l1_loss_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::smooth_l1_loss_backward)));
  m.def("soft_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("soft_margin_loss.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::soft_margin_loss_out_out));
  m.def("soft_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor");
  m.impl("soft_margin_loss",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::soft_margin_loss)));
  m.def("soft_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.impl("soft_margin_loss_backward.grad_input",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::soft_margin_loss_backward_out_grad_input));
  m.def("soft_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor");
  m.impl("soft_margin_loss_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::soft_margin_loss_backward)));
  m.def("elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("elu.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::elu_out_out));
  m.def("elu(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor");
  m.impl("elu",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::elu)));
  m.def("elu_backward.grad_input(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("elu_backward(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output) -> Tensor");
  m.impl("elu_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::elu_backward)));
  m.def("elu_(Tensor(a!) self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor(a!)");
  m.impl("elu_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::elu_));
  m.def("glu.out(Tensor self, int dim=-1, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("glu(Tensor self, int dim=-1) -> Tensor");
  m.def("glu_backward.grad_input(Tensor grad_output, Tensor self, int dim, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("glu_backward(Tensor grad_output, Tensor self, int dim) -> Tensor");
  m.def("hardsigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("hardsigmoid.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::hardsigmoid_out_out));
  m.def("hardsigmoid(Tensor self) -> Tensor");
  m.def("hardsigmoid_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("hardsigmoid_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::hardsigmoid_));
  m.def("hardsigmoid_backward(Tensor grad_output, Tensor self) -> Tensor");
  m.def("hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1) -> Tensor");
  m.def("hardtanh_backward.grad_input(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("hardtanh_backward(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val) -> Tensor");
  m.impl("hardtanh_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::hardtanh_backward)));
  m.def("hardtanh_(Tensor(a!) self, Scalar min_val=-1, Scalar max_val=1) -> Tensor(a!)");
  m.def("hardswish.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("hardswish.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::hardswish_out_out));
  m.def("hardswish(Tensor self) -> Tensor");
  m.impl("hardswish",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::hardswish)));
  m.def("hardswish_(Tensor(a!) self) -> Tensor(a!)");
  m.impl("hardswish_",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::hardswish_));
  m.def("hardswish_backward(Tensor grad_output, Tensor self) -> Tensor");
  m.def("leaky_relu.out(Tensor self, Scalar negative_slope=0.01, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("leaky_relu(Tensor self, Scalar negative_slope=0.01) -> Tensor");
  m.def("leaky_relu_backward(Tensor grad_output, Tensor self, Scalar negative_slope, bool self_is_result) -> Tensor");
  m.impl("leaky_relu_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::leaky_relu_backward)));
  m.def("leaky_relu_(Tensor(a!) self, Scalar negative_slope=0.01) -> Tensor(a!)");
  m.def("log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("log_sigmoid.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::log_sigmoid_out_out));
  m.def("log_sigmoid(Tensor self) -> Tensor");
  m.impl("log_sigmoid",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::log_sigmoid)));
  m.def("log_sigmoid_forward.output(Tensor self, *, Tensor(a!) output, Tensor(b!) buffer) -> (Tensor(a!), Tensor(b!))");
  m.def("log_sigmoid_forward(Tensor self) -> (Tensor output, Tensor buffer)");
  m.def("log_sigmoid_backward.grad_input(Tensor grad_output, Tensor self, Tensor buffer, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("log_sigmoid_backward(Tensor grad_output, Tensor self, Tensor buffer) -> Tensor");
  m.def("rrelu_with_noise.out(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("rrelu_with_noise(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor");
  m.def("rrelu_with_noise_backward(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, bool self_is_result) -> Tensor");
  m.impl("rrelu_with_noise_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::rrelu_with_noise_backward)));
  m.def("rrelu_with_noise_(Tensor(a!) self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)");
  m.def("softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("softplus.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::softplus_out_out));
  m.def("softplus(Tensor self, Scalar beta=1, Scalar threshold=20) -> Tensor");
  m.impl("softplus",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::softplus)));
  m.def("softplus_backward.grad_input(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("softplus_backward(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output) -> Tensor");
  m.impl("softplus_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::softplus_backward)));
  m.def("softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("softshrink.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::softshrink_out_out));
  m.def("softshrink(Tensor self, Scalar lambd=0.5) -> Tensor");
  m.impl("softshrink",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::softshrink)));
  m.def("softshrink_backward.grad_input(Tensor grad_output, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("softshrink_backward(Tensor grad_output, Tensor self, Scalar lambd) -> Tensor");
  m.impl("softshrink_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::softshrink_backward)));
  m.def("adaptive_avg_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor");
  m.impl("adaptive_avg_pool2d",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::adaptive_avg_pool2d)));
  m.def("mkldnn_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor");
  m.def("_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor");
  m.def("_adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> Tensor");
  m.def("adaptive_avg_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("adaptive_avg_pool3d(Tensor self, int[3] output_size) -> Tensor");
  m.def("adaptive_avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("adaptive_avg_pool3d_backward(Tensor grad_output, Tensor self) -> Tensor");
  m.def("adaptive_max_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))");
  m.def("adaptive_max_pool2d(Tensor self, int[2] output_size) -> (Tensor, Tensor)");
  m.def("adaptive_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("adaptive_max_pool2d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor");
  m.def("adaptive_max_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))");
  m.def("adaptive_max_pool3d(Tensor self, int[3] output_size) -> (Tensor, Tensor)");
  m.def("adaptive_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("adaptive_max_pool3d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor");
  m.def("avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("avg_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor");
  m.def("avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("avg_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor");
  m.def("avg_pool3d.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("avg_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor");
  m.def("avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("avg_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor");
  m.def("fractional_max_pool2d.output(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))");
  m.def("fractional_max_pool2d(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples) -> (Tensor, Tensor)");
  m.def("fractional_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("fractional_max_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices) -> Tensor");
  m.def("fractional_max_pool3d.output(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))");
  m.def("fractional_max_pool3d(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples) -> (Tensor, Tensor)");
  m.def("fractional_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("fractional_max_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices) -> Tensor");
  m.def("max_pool2d_with_indices.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))");
  m.def("max_pool2d_with_indices(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)");
  m.def("max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("max_pool2d_with_indices_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices) -> Tensor");
  m.def("max_pool3d_with_indices.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))");
  m.def("max_pool3d_with_indices(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)");
  m.def("max_pool3d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("max_pool3d_with_indices_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices) -> Tensor");
  m.def("max_unpool2d.out(Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("max_unpool2d(Tensor self, Tensor indices, int[2] output_size) -> Tensor");
  m.def("max_unpool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("max_unpool2d_backward(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size) -> Tensor");
  m.def("max_unpool3d.out(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("max_unpool3d(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor");
  m.def("max_unpool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("max_unpool3d_backward(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor");
  m.def("reflection_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("reflection_pad1d(Tensor self, int[2] padding) -> Tensor");
  m.def("reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("reflection_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor");
  m.def("reflection_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("reflection_pad2d(Tensor self, int[4] padding) -> Tensor");
  m.def("reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("reflection_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor");
  m.def("replication_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("replication_pad1d(Tensor self, int[2] padding) -> Tensor");
  m.def("replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("replication_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor");
  m.def("replication_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("replication_pad2d(Tensor self, int[4] padding) -> Tensor");
  m.def("replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("replication_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor");
  m.def("replication_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("replication_pad3d(Tensor self, int[6] padding) -> Tensor");
  m.def("replication_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("replication_pad3d_backward(Tensor grad_output, Tensor self, int[6] padding) -> Tensor");
  m.def("upsample_linear1d.out(Tensor self, int[1] output_size, bool align_corners, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("upsample_linear1d(Tensor self, int[1] output_size, bool align_corners, float? scales=None) -> Tensor");
  m.def("upsample_linear1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("upsample_linear1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, float? scales=None) -> Tensor");
  m.def("upsample_bilinear2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("upsample_bilinear2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_bilinear2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("upsample_bilinear2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_bicubic2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("upsample_bicubic2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_bicubic2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("upsample_bicubic2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_trilinear3d.out(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("upsample_trilinear3d(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_trilinear3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("upsample_trilinear3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_nearest1d.out(Tensor self, int[1] output_size, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("upsample_nearest1d(Tensor self, int[1] output_size, float? scales=None) -> Tensor");
  m.def("upsample_nearest1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("upsample_nearest1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None) -> Tensor");
  m.def("upsample_nearest2d.out(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("upsample_nearest2d(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_nearest2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("upsample_nearest2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_nearest3d.out(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("upsample_nearest3d(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_nearest3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("upsample_nearest3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("sigmoid_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("sigmoid_backward(Tensor grad_output, Tensor output) -> Tensor");
  m.impl("sigmoid_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::sigmoid_backward)));
  m.def("tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("tanh_backward(Tensor grad_output, Tensor output) -> Tensor");
  m.impl("tanh_backward",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::tanh_backward)));
  m.def("slow_conv_transpose2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("slow_conv_transpose2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1) -> Tensor");
  m.def("slow_conv_transpose2d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))");
  m.def("slow_conv_transpose2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)");
  m.def("slow_conv_transpose3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("slow_conv_transpose3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1) -> Tensor");
  m.def("slow_conv_transpose3d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))");
  m.def("slow_conv_transpose3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)");
  m.def("thnn_conv2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("thnn_conv2d.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::thnn_conv2d_out_out));
  m.def("thnn_conv2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0) -> Tensor");
  m.impl("thnn_conv2d",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::thnn_conv2d));
  m.def("thnn_conv2d_forward.output(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))");
  m.def("thnn_conv2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)");
  m.def("thnn_conv2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))");
  m.def("thnn_conv2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)");
  m.def("thnn_conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("thnn_conv_depthwise2d.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::thnn_conv_depthwise2d_out_out));
  m.def("thnn_conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor");
  m.impl("thnn_conv_depthwise2d",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::thnn_conv_depthwise2d));
  m.def("thnn_conv_depthwise2d_forward.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("thnn_conv_depthwise2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation) -> Tensor");
  m.def("thnn_conv_depthwise2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight) -> (Tensor(a!), Tensor(b!))");
  m.def("thnn_conv_depthwise2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[2] output_mask) -> (Tensor grad_input, Tensor grad_weight)");
  m.def("slow_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.impl("slow_conv3d.out",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::slow_conv3d_out_out));
  m.def("slow_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0) -> Tensor");
  m.impl("slow_conv3d",
         torch::CppFunction::makeUnboxedOnly(&TypeDefault::slow_conv3d));
  m.def("slow_conv3d_forward.output(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))");
  m.def("slow_conv3d_forward(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)");
  m.def("slow_conv3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))");
  m.def("slow_conv3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)");
  m.def("slow_conv_dilated2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor");
  m.def("slow_conv_dilated2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)");
  m.def("slow_conv_dilated3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1) -> Tensor");
  m.def("slow_conv_dilated3d_backward(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)");
  m.def("col2im.out(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("col2im(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor");
  m.def("col2im_backward.grad_input(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("col2im_backward(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor");
  m.def("im2col.out(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("im2col(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor");
  m.def("im2col_backward.grad_input(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("im2col_backward(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor");
  m.def("isfinite(Tensor self) -> Tensor");
  m.impl("isfinite",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::isfinite)));
  m.def("isinf(Tensor self) -> Tensor");
  m.impl("isinf",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::isinf)));
  m.def("_add_batch_dim(Tensor self, int batch_dim, int level) -> Tensor");
  m.impl("_add_batch_dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_add_batch_dim)));
  m.def("_remove_batch_dim(Tensor self, int level, int batch_size, int out_dim) -> Tensor");
  m.impl("_remove_batch_dim",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_remove_batch_dim)));
  m.def("_test_serialization_subcmul(Tensor self, Tensor other, Scalar alpha=1) -> Tensor");
  m.impl("_test_serialization_subcmul",
         c10::impl::hacky_wrapper_for_legacy_signatures(TORCH_FN(TypeDefault::_test_serialization_subcmul)));
  m.def("_test_optional_intlist(Tensor values, int[]? addends) -> Tensor");;

  // String Ops
  // Implementations located in torch/csrc/jit/runtime/register_string_ops.cpp
  m.def("splitlines(str self, bool keepends=False) -> str[]");
  m.def(
      "slice.str(str string, int start, int end=9223372036854775807, int step=1) -> str");
  m.def("isupper(str self) -> bool");
  m.def("islower(str self) -> bool");
  m.def("capitalize(str self) -> str");
  m.def("title(str self) -> str");
  m.def("center(str self, int width, str fillchar=' ') -> str");
  m.def("count(str self, str substr, int start=0, int end=-1) -> int");
  m.def("endswith(str self, str substr, int start=0, int end=-1) -> bool");
  m.def("startswith(str self, str substr, int start=0, int end=-1) -> bool");
  m.def("expandtabs(str self, int tabsize=8) -> str");
  m.def("find(str self, str substr, int start=0, int end=-1) -> int");
  m.def("rfind(str self, str substr, int start=0, int end=-1) -> int");
  m.def("index.str(str self, str substr, int start=0, int end=-1) -> int");
  m.def("rindex(str self, str substr, int start=0, int end=-1) -> int");
  m.def("isidentifier(str self) -> bool");
  m.def("istitle(str self) -> bool");
  m.def("isprintable(str self) -> bool");
  m.def("ljust(str self, int width, str fillchar=' ') -> str");
  m.def("rjust(str self, int width, str fillchar=' ') -> str");
  m.def("zfill(str self, int width) -> str");
  m.def("lstrip(str self, str chars=' \\n\\t\\f\\v') -> str");
  m.def("rstrip(str self, str chars=' \\n\\t\\f\\v') -> str");
  m.def("strip(str self, str chars=' \\n\\t\\f\\v') -> str");
  m.def("replace(str self, str old, str new, int max=-1) -> str");
  m.def("partition(str self, str separator) -> (str, str, str)");
  m.def("rpartition(str self, str separator) -> (str, str, str)");
  m.def("split.str(str self, str? separator=None, int max=-1) -> str[]");
  m.def("rsplit(str self, str separator=' ', int max=-1) -> str[]");
  m.def("join(str self, str[] values) -> str");

  // Integer Ops
  // Implementations located in torch/csrc/jit/runtime/register_prim_ops_c10.cp
  m.def("Int.Tensor(Tensor a) -> int");
  m.def("Int.bool(bool a) -> int");
  m.def("Int.float(float a) -> int");
  m.def("Int.Scalar(Scalar a) -> int");
  m.def("Int.str(str a) -> int");

  // Distributed Ops
  // Implementations located in torch/csrc/jit/runtime/register_distributed_ops.cpp
  m.def("get_gradients(int context_id) -> Dict(Tensor, Tensor)");
}

}  // namespace at
