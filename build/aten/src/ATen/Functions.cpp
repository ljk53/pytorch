// @generated by aten/src/ATen/gen.py from Functions.cpp

#include <ATen/Functions.h>

#include <ATen/core/dispatch/Dispatcher.h>
#include <ATen/TypeDefault.h>
#include <ATen/CPUType.h>
#include <ATen/QuantizedCPUType.h>
#ifdef USE_VULKAN
#include <ATen/VulkanType.h>
#endif

namespace at {

using native::tensor;


// aten::_cast_Byte(Tensor self, bool non_blocking=False) -> Tensor
Tensor _cast_Byte(const Tensor & self, bool non_blocking) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_cast_Byte(self, non_blocking);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cast_Byte", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, non_blocking);
#endif
}

// aten::_cast_Char(Tensor self, bool non_blocking=False) -> Tensor
Tensor _cast_Char(const Tensor & self, bool non_blocking) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_cast_Char(self, non_blocking);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cast_Char", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, non_blocking);
#endif
}

// aten::_cast_Double(Tensor self, bool non_blocking=False) -> Tensor
Tensor _cast_Double(const Tensor & self, bool non_blocking) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_cast_Double(self, non_blocking);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cast_Double", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, non_blocking);
#endif
}

// aten::_cast_Float(Tensor self, bool non_blocking=False) -> Tensor
Tensor _cast_Float(const Tensor & self, bool non_blocking) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_cast_Float(self, non_blocking);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cast_Float", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, non_blocking);
#endif
}

// aten::_cast_Int(Tensor self, bool non_blocking=False) -> Tensor
Tensor _cast_Int(const Tensor & self, bool non_blocking) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_cast_Int(self, non_blocking);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cast_Int", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, non_blocking);
#endif
}

// aten::_cast_Long(Tensor self, bool non_blocking=False) -> Tensor
Tensor _cast_Long(const Tensor & self, bool non_blocking) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_cast_Long(self, non_blocking);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cast_Long", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, non_blocking);
#endif
}

// aten::_cast_Short(Tensor self, bool non_blocking=False) -> Tensor
Tensor _cast_Short(const Tensor & self, bool non_blocking) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_cast_Short(self, non_blocking);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cast_Short", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, non_blocking);
#endif
}

// aten::_cast_Half(Tensor self, bool non_blocking=False) -> Tensor
Tensor _cast_Half(const Tensor & self, bool non_blocking) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_cast_Half(self, non_blocking);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cast_Half", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, non_blocking);
#endif
}

// aten::align_tensors(Tensor[] tensors) -> Tensor[]
std::vector<Tensor> align_tensors(TensorList tensors) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::align_tensors(tensors);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::align_tensors", "")
        .typed<std::vector<Tensor> (TensorList)>();
    return op.call(tensors);
#endif
}

// aten::_use_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank) -> bool
bool _use_cudnn_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(log_probs, targets);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_use_cudnn_ctc_loss not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_use_cudnn_ctc_loss", "")
        .typed<bool (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t)>();
    return op.call(log_probs, targets, input_lengths, target_lengths, blank);
#endif
}

// aten::_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank, bool deterministic, bool zero_infinity) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _cudnn_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool deterministic, bool zero_infinity) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(log_probs, targets);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_cudnn_ctc_loss not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cudnn_ctc_loss", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(log_probs, targets, input_lengths, target_lengths, blank, deterministic, zero_infinity);
#endif
}

// aten::_use_cudnn_rnn_flatten_weight() -> bool
bool _use_cudnn_rnn_flatten_weight() {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_use_cudnn_rnn_flatten_weight();
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_use_cudnn_rnn_flatten_weight", "")
        .typed<bool ()>();
    return op.call();
#endif
}

// aten::_cudnn_rnn_flatten_weight(Tensor[] weight_arr, int weight_stride0, int input_size, int mode, int hidden_size, int num_layers, bool batch_first, bool bidirectional) -> Tensor
Tensor _cudnn_rnn_flatten_weight(TensorList weight_arr, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, bool bidirectional) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(weight_arr);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_cudnn_rnn_flatten_weight not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cudnn_rnn_flatten_weight", "")
        .typed<Tensor (TensorList, int64_t, int64_t, int64_t, int64_t, int64_t, bool, bool)>();
    return op.call(weight_arr, weight_stride0, input_size, mode, hidden_size, num_layers, batch_first, bidirectional);
#endif
}

// aten::_cudnn_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor? weight_buf, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, weight, weight_buf, hx, cx, dropout_state);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_cudnn_rnn not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cudnn_rnn", "")
        .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const Tensor &)>();
    return op.call(input, weight, weight_stride0, weight_buf, hx, cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state);
#endif
}

// aten::_cudnn_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])
std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> _cudnn_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, weight, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, dropout_state, reserve);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_cudnn_rnn_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cudnn_rnn_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> (const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,4>)>();
    return op.call(input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask);
#endif
}

// aten::_cudnn_init_dropout_state(float dropout, bool train, int dropout_seed, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor
Tensor _cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKey _dk = options.computeDispatchKey();
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_cudnn_init_dropout_state not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cudnn_init_dropout_state", "")
        .typed<Tensor (double, bool, int64_t, const TensorOptions &)>();
    return op.call(dropout, train, dropout_seed, options);
#endif
}

// aten::_debug_has_internal_overlap(Tensor self) -> int
int64_t _debug_has_internal_overlap(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_debug_has_internal_overlap(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_debug_has_internal_overlap", "")
        .typed<int64_t (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::_fused_dropout(Tensor self, float p, Generator? generator=None) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _fused_dropout(const Tensor & self, double p, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_fused_dropout not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_fused_dropout", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, double, c10::optional<Generator>)>();
    return op.call(self, p, generator);
#endif
}

// aten::_masked_scale(Tensor self, Tensor mask, float scale) -> Tensor
Tensor _masked_scale(const Tensor & self, const Tensor & mask, double scale) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, mask);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_masked_scale not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_masked_scale", "")
        .typed<Tensor (const Tensor &, const Tensor &, double)>();
    return op.call(self, mask, scale);
#endif
}

// aten::_sobol_engine_draw(Tensor quasi, int n, Tensor sobolstate, int dimension, int num_generated, ScalarType? dtype) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_sobol_engine_draw(quasi, n, sobolstate, dimension, num_generated, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sobol_engine_draw", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, const Tensor &, int64_t, int64_t, c10::optional<ScalarType>)>();
    return op.call(quasi, n, sobolstate, dimension, num_generated, dtype);
#endif
}

// aten::_sobol_engine_ff_(Tensor(a!) self, int n, Tensor sobolstate, int dimension, int num_generated) -> Tensor(a!)
Tensor & _sobol_engine_ff_(Tensor & self, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_sobol_engine_ff_(self, n, sobolstate, dimension, num_generated);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sobol_engine_ff_", "")
        .typed<Tensor & (Tensor &, int64_t, const Tensor &, int64_t, int64_t)>();
    return op.call(self, n, sobolstate, dimension, num_generated);
#endif
}

// aten::_sobol_engine_scramble_(Tensor(a!) self, Tensor ltm, int dimension) -> Tensor(a!)
Tensor & _sobol_engine_scramble_(Tensor & self, const Tensor & ltm, int64_t dimension) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_sobol_engine_scramble_(self, ltm, dimension);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sobol_engine_scramble_", "")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t)>();
    return op.call(self, ltm, dimension);
#endif
}

// aten::_sobol_engine_initialize_state_(Tensor(a!) self, int dimension) -> Tensor(a!)
Tensor & _sobol_engine_initialize_state_(Tensor & self, int64_t dimension) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_sobol_engine_initialize_state_(self, dimension);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sobol_engine_initialize_state_", "")
        .typed<Tensor & (Tensor &, int64_t)>();
    return op.call(self, dimension);
#endif
}

// aten::_reshape_from_tensor(Tensor self, Tensor shape) -> Tensor
Tensor _reshape_from_tensor(const Tensor & self, const Tensor & shape) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_reshape_from_tensor(self, shape);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_reshape_from_tensor", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, shape);
#endif
}

// aten::_shape_as_tensor(Tensor self) -> Tensor
Tensor _shape_as_tensor(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_shape_as_tensor(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_shape_as_tensor", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::dropout(Tensor input, float p, bool train) -> Tensor
Tensor dropout(const Tensor & input, double p, bool train) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::dropout(input, p, train);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::dropout", "")
        .typed<Tensor (const Tensor &, double, bool)>();
    return op.call(input, p, train);
#endif
}

// aten::dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)
Tensor & dropout_(Tensor & self, double p, bool train) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::dropout_(self, p, train);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::dropout_", "")
        .typed<Tensor & (Tensor &, double, bool)>();
    return op.call(self, p, train);
#endif
}

// aten::feature_dropout(Tensor input, float p, bool train) -> Tensor
Tensor feature_dropout(const Tensor & input, double p, bool train) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::feature_dropout(input, p, train);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::feature_dropout", "")
        .typed<Tensor (const Tensor &, double, bool)>();
    return op.call(input, p, train);
#endif
}

// aten::feature_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)
Tensor & feature_dropout_(Tensor & self, double p, bool train) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::feature_dropout_(self, p, train);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::feature_dropout_", "")
        .typed<Tensor & (Tensor &, double, bool)>();
    return op.call(self, p, train);
#endif
}

// aten::alpha_dropout(Tensor input, float p, bool train) -> Tensor
Tensor alpha_dropout(const Tensor & input, double p, bool train) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::alpha_dropout(input, p, train);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::alpha_dropout", "")
        .typed<Tensor (const Tensor &, double, bool)>();
    return op.call(input, p, train);
#endif
}

// aten::alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)
Tensor & alpha_dropout_(Tensor & self, double p, bool train) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::alpha_dropout_(self, p, train);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::alpha_dropout_", "")
        .typed<Tensor & (Tensor &, double, bool)>();
    return op.call(self, p, train);
#endif
}

// aten::feature_alpha_dropout(Tensor input, float p, bool train) -> Tensor
Tensor feature_alpha_dropout(const Tensor & input, double p, bool train) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::feature_alpha_dropout(input, p, train);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::feature_alpha_dropout", "")
        .typed<Tensor (const Tensor &, double, bool)>();
    return op.call(input, p, train);
#endif
}

// aten::feature_alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)
Tensor & feature_alpha_dropout_(Tensor & self, double p, bool train) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::feature_alpha_dropout_(self, p, train);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::feature_alpha_dropout_", "")
        .typed<Tensor & (Tensor &, double, bool)>();
    return op.call(self, p, train);
#endif
}

// aten::abs(Tensor self) -> Tensor
Tensor abs(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::abs(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::abs", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::abs_(Tensor(a!) self) -> Tensor(a!)
Tensor & abs_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::abs_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::abs_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::abs.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & abs_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::abs_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::abs", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::absolute(Tensor self) -> Tensor
Tensor absolute(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::absolute(self);
            break;
        default:
            AT_ERROR("absolute not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::absolute", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::absolute_(Tensor(a!) self) -> Tensor(a!)
Tensor & absolute_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::absolute_(self);
            break;
        default:
            AT_ERROR("absolute_ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::absolute_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::absolute.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & absolute_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::absolute_out_out(out, self);
            break;
        default:
            AT_ERROR("absolute_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::absolute", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::angle(Tensor self) -> Tensor
Tensor angle(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::angle(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::angle", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::angle.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & angle_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::angle_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::angle", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::view_as_real(Tensor(a) self) -> Tensor(a)
Tensor view_as_real(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::view_as_real(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::view_as_real", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::view_as_complex(Tensor(a) self) -> Tensor(a)
Tensor view_as_complex(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::view_as_complex(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::view_as_complex", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::real(Tensor(a) self) -> Tensor(a)
Tensor real(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::real(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::real", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::imag(Tensor(a) self) -> Tensor(a)
Tensor imag(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::imag(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::imag", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::conj(Tensor self) -> Tensor
Tensor conj(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::conj(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::conj", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::conj.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & conj_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::conj_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::conj", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::acos(Tensor self) -> Tensor
Tensor acos(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::acos(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::acos", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::acos_(Tensor(a!) self) -> Tensor(a!)
Tensor & acos_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::acos_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::acos_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::acos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & acos_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::acos_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::acos", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::avg_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, bool ceil_mode=False, bool count_include_pad=True) -> Tensor
Tensor avg_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::avg_pool1d(self, kernel_size, stride, padding, ceil_mode, count_include_pad);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::avg_pool1d", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool)>();
    return op.call(self, kernel_size, stride, padding, ceil_mode, count_include_pad);
#endif
}

// aten::adaptive_avg_pool1d(Tensor self, int[1] output_size) -> Tensor
Tensor adaptive_avg_pool1d(const Tensor & self, IntArrayRef output_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::adaptive_avg_pool1d(self, output_size);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::adaptive_avg_pool1d", "")
        .typed<Tensor (const Tensor &, IntArrayRef)>();
    return op.call(self, output_size);
#endif
}

// aten::adaptive_max_pool1d(Tensor self, int[1] output_size) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> adaptive_max_pool1d(const Tensor & self, IntArrayRef output_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::adaptive_max_pool1d(self, output_size);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::adaptive_max_pool1d", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef)>();
    return op.call(self, output_size);
#endif
}

// aten::add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
Tensor add(const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::add_Tensor(self, other, alpha);
            break;
        #ifdef USE_VULKAN
        case Backend::Vulkan:
            return VulkanType::add_Tensor(self, other, alpha);
            break;
        #endif
        default:
            AT_ERROR("add not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::add", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &, Scalar)>();
    return op.call(self, other, alpha);
#endif
}

// aten::add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
Tensor & add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::add_out_out(out, self, other, alpha);
            break;
        default:
            AT_ERROR("add_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::add", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, other, alpha);
#endif
}

// aten::add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor
Tensor add(const Tensor & self, Scalar other, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::add_Scalar(self, other, alpha);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::add", "Scalar")
        .typed<Tensor (const Tensor &, Scalar, Scalar)>();
    return op.call(self, other, alpha);
#endif
}

// aten::addmv(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor
Tensor addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::addmv(self, mat, vec, beta, alpha);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::addmv", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(self, mat, vec, beta, alpha);
#endif
}

// aten::addmv_(Tensor(a!) self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
Tensor & addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::addmv_(self, mat, vec, beta, alpha);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::addmv_", "")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(self, mat, vec, beta, alpha);
#endif
}

// aten::addmv.out(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
Tensor & addmv_out(Tensor & out, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::addmv_out_out(out, self, mat, vec, beta, alpha);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::addmv", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(out, self, mat, vec, beta, alpha);
#endif
}

// aten::_addmv_impl_(Tensor(a!) self, Tensor self2, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
Tensor & _addmv_impl_(Tensor & self, const Tensor & self2, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, self2, mat, vec);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_addmv_impl_(self, self2, mat, vec, beta, alpha);
            break;
        default:
            AT_ERROR("_addmv_impl_ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_addmv_impl_", "")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(self, self2, mat, vec, beta, alpha);
#endif
}

// aten::addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
Tensor addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::addr(self, vec1, vec2, beta, alpha);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::addr", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(self, vec1, vec2, beta, alpha);
#endif
}

// aten::addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
Tensor & addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::addr_out_out(out, self, vec1, vec2, beta, alpha);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::addr", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(out, self, vec1, vec2, beta, alpha);
#endif
}

// aten::affine_grid_generator(Tensor theta, int[] size, bool align_corners) -> Tensor
Tensor affine_grid_generator(const Tensor & theta, IntArrayRef size, bool align_corners) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::affine_grid_generator(theta, size, align_corners);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::affine_grid_generator", "")
        .typed<Tensor (const Tensor &, IntArrayRef, bool)>();
    return op.call(theta, size, align_corners);
#endif
}

// aten::affine_grid_generator_backward(Tensor grad, int[] size, bool align_corners) -> Tensor
Tensor affine_grid_generator_backward(const Tensor & grad, IntArrayRef size, bool align_corners) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::affine_grid_generator_backward(grad, size, align_corners);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::affine_grid_generator_backward", "")
        .typed<Tensor (const Tensor &, IntArrayRef, bool)>();
    return op.call(grad, size, align_corners);
#endif
}

// aten::all.dim(Tensor self, int dim, bool keepdim=False) -> Tensor
Tensor all(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::all_dim(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::all", "dim")
        .typed<Tensor (const Tensor &, int64_t, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & all_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::all_out_out(out, self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::all", "out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t, bool)>();
    return op.call(out, self, dim, keepdim);
#endif
}

// aten::all.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor
Tensor all(const Tensor & self, Dimname dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::all_dimname(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::all", "dimname")
        .typed<Tensor (const Tensor &, Dimname, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::all.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & all_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::all_out_dimname_out(out, self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::all", "dimname_out")
        .typed<Tensor & (Tensor &, const Tensor &, Dimname, bool)>();
    return op.call(out, self, dim, keepdim);
#endif
}

// aten::allclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> bool
bool allclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::allclose(self, other, rtol, atol, equal_nan);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::allclose", "")
        .typed<bool (const Tensor &, const Tensor &, double, double, bool)>();
    return op.call(self, other, rtol, atol, equal_nan);
#endif
}

// aten::any.dim(Tensor self, int dim, bool keepdim=False) -> Tensor
Tensor any(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::any_dim(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::any", "dim")
        .typed<Tensor (const Tensor &, int64_t, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & any_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::any_out_out(out, self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::any", "out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t, bool)>();
    return op.call(out, self, dim, keepdim);
#endif
}

// aten::any.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor
Tensor any(const Tensor & self, Dimname dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::any_dimname(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::any", "dimname")
        .typed<Tensor (const Tensor &, Dimname, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::any.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & any_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::any_out_dimname_out(out, self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::any", "dimname_out")
        .typed<Tensor & (Tensor &, const Tensor &, Dimname, bool)>();
    return op.call(out, self, dim, keepdim);
#endif
}

// aten::arange(Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor arange(Scalar end, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::arange(end, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::arange", "")
        .typed<Tensor (Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(end, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::arange.start(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor arange(Scalar start, Scalar end, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::arange_start(start, end, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::arange", "start")
        .typed<Tensor (Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(start, end, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::arange.start_step(Scalar start, Scalar end, Scalar step, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor arange(Scalar start, Scalar end, Scalar step, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::arange_start_step(start, end, step, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::arange", "start_step")
        .typed<Tensor (Scalar, Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(start, end, step, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::arange.out(Scalar end, *, Tensor(a!) out) -> Tensor(a!)
Tensor & arange_out(Tensor & out, Scalar end) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::arange_out_out(out, end);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::arange", "out")
        .typed<Tensor & (Tensor &, Scalar)>();
    return op.call(out, end);
#endif
}

// aten::arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)
Tensor & arange_out(Tensor & out, Scalar start, Scalar end, Scalar step) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::arange_out_start_out(out, start, end, step);
            break;
        default:
            AT_ERROR("arange_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::arange", "start_out")
        .typed<Tensor & (Tensor &, Scalar, Scalar, Scalar)>();
    return op.call(out, start, end, step);
#endif
}

// aten::_dim_arange(Tensor like, int dim) -> Tensor
Tensor _dim_arange(const Tensor & like, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_dim_arange(like, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_dim_arange", "")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(like, dim);
#endif
}

// aten::argmax(Tensor self, int? dim=None, bool keepdim=False) -> Tensor
Tensor argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::argmax(self, dim, keepdim);
            break;
        default:
            AT_ERROR("argmax not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::argmax", "")
        .typed<Tensor (const Tensor &, c10::optional<int64_t>, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::argmin(Tensor self, int? dim=None, bool keepdim=False) -> Tensor
Tensor argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::argmin(self, dim, keepdim);
            break;
        default:
            AT_ERROR("argmin not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::argmin", "")
        .typed<Tensor (const Tensor &, c10::optional<int64_t>, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::acosh(Tensor self) -> Tensor
Tensor acosh(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::acosh(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::acosh", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::acosh_(Tensor(a!) self) -> Tensor(a!)
Tensor & acosh_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::acosh_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::acosh_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::acosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & acosh_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::acosh_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::acosh", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::asinh(Tensor self) -> Tensor
Tensor asinh(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::asinh(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::asinh", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::asinh_(Tensor(a!) self) -> Tensor(a!)
Tensor & asinh_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::asinh_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::asinh_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::asinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & asinh_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::asinh_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::asinh", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::atanh(Tensor self) -> Tensor
Tensor atanh(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::atanh(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::atanh", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::atanh_(Tensor(a!) self) -> Tensor(a!)
Tensor & atanh_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::atanh_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::atanh_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::atanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & atanh_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::atanh_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::atanh", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::as_strided(Tensor(a) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a)
Tensor as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::as_strided(self, size, stride, storage_offset);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::as_strided(self, size, stride, storage_offset);
            break;
        default:
            AT_ERROR("as_strided not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::as_strided", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>)>();
    return op.call(self, size, stride, storage_offset);
#endif
}

// aten::as_strided_(Tensor(a!) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a!)
Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::as_strided_(self, size, stride, storage_offset);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::as_strided_", "")
        .typed<Tensor & (Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>)>();
    return op.call(self, size, stride, storage_offset);
#endif
}

// aten::asin(Tensor self) -> Tensor
Tensor asin(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::asin(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::asin", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::asin_(Tensor(a!) self) -> Tensor(a!)
Tensor & asin_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::asin_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::asin_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::asin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & asin_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::asin_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::asin", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::atan(Tensor self) -> Tensor
Tensor atan(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::atan(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::atan", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::atan_(Tensor(a!) self) -> Tensor(a!)
Tensor & atan_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::atan_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::atan_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::atan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & atan_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::atan_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::atan", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::baddbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
Tensor baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, batch1, batch2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::baddbmm(self, batch1, batch2, beta, alpha);
            break;
        default:
            AT_ERROR("baddbmm not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::baddbmm", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(self, batch1, batch2, beta, alpha);
#endif
}

// aten::_baddbmm_mkl_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
Tensor & _baddbmm_mkl_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_baddbmm_mkl_(self, batch1, batch2, beta, alpha);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_baddbmm_mkl_", "")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(self, batch1, batch2, beta, alpha);
#endif
}

// aten::baddbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
Tensor & baddbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, batch1, batch2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::baddbmm_out_out(out, self, batch1, batch2, beta, alpha);
            break;
        default:
            AT_ERROR("baddbmm_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::baddbmm", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(out, self, batch1, batch2, beta, alpha);
#endif
}

// aten::bartlett_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor bartlett_window(int64_t window_length, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::bartlett_window(window_length, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bartlett_window", "")
        .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(window_length, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::bartlett_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor bartlett_window(int64_t window_length, bool periodic, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::bartlett_window_periodic(window_length, periodic, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bartlett_window", "periodic")
        .typed<Tensor (int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(window_length, periodic, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> Tensor
Tensor batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::batch_norm(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::batch_norm", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double, bool)>();
    return op.call(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
#endif
}

// aten::quantized_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> Tensor
Tensor quantized_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & mean, const Tensor & var, double eps, double output_scale, int64_t output_zero_point) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, weight, bias, mean, var);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::QuantizedCPU:
            return QuantizedCPUType::quantized_batch_norm(input, weight, bias, mean, var, eps, output_scale, output_zero_point);
            break;
        default:
            AT_ERROR("quantized_batch_norm not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::quantized_batch_norm", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double, double, int64_t)>();
    return op.call(input, weight, bias, mean, var, eps, output_scale, output_zero_point);
#endif
}

// aten::_batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, Tensor, int)
std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t> _batch_norm_impl_index(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_batch_norm_impl_index(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_batch_norm_impl_index", "")
        .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double, bool)>();
    return op.call(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
#endif
}

// aten::_batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask, Tensor reservedSpace) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> _batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var_transform, bool train, double eps, std::array<bool,3> output_mask, const Tensor & reservedSpace) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_batch_norm_impl_index_backward(impl_index, input, grad_output, weight, running_mean, running_var, save_mean, save_var_transform, train, eps, output_mask, reservedSpace);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_batch_norm_impl_index_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (int64_t, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, std::array<bool,3>, const Tensor &)>();
    return op.call(impl_index, input, grad_output, weight, running_mean, running_var, save_mean, save_var_transform, train, eps, output_mask, reservedSpace);
#endif
}

// aten::bernoulli(Tensor self, *, Generator? generator=None) -> Tensor
Tensor bernoulli(const Tensor & self, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::bernoulli(self, generator);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bernoulli", "")
        .typed<Tensor (const Tensor &, c10::optional<Generator>)>();
    return op.call(self, generator);
#endif
}

// aten::bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
Tensor & bernoulli_out(Tensor & out, const Tensor & self, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::bernoulli_out_out(out, self, generator);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bernoulli", "out")
        .typed<Tensor & (Tensor &, const Tensor &, c10::optional<Generator>)>();
    return op.call(out, self, generator);
#endif
}

// aten::bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> Tensor
Tensor bernoulli(const Tensor & self, double p, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::bernoulli_p(self, p, generator);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bernoulli", "p")
        .typed<Tensor (const Tensor &, double, c10::optional<Generator>)>();
    return op.call(self, p, generator);
#endif
}

// aten::bilinear(Tensor input1, Tensor input2, Tensor weight, Tensor? bias) -> Tensor
Tensor bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const Tensor & bias) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::bilinear(input1, input2, weight, bias);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bilinear", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(input1, input2, weight, bias);
#endif
}

// aten::binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor
Tensor binary_cross_entropy(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, target, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::binary_cross_entropy(self, target, weight, reduction);
            break;
        default:
            AT_ERROR("binary_cross_entropy not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::binary_cross_entropy", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(self, target, weight, reduction);
#endif
}

// aten::binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
Tensor & binary_cross_entropy_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, target, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::binary_cross_entropy_out_out(out, self, target, weight, reduction);
            break;
        default:
            AT_ERROR("binary_cross_entropy_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::binary_cross_entropy", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(out, self, target, weight, reduction);
#endif
}

// aten::binary_cross_entropy_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor
Tensor binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, target, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::binary_cross_entropy_backward(grad_output, self, target, weight, reduction);
            break;
        default:
            AT_ERROR("binary_cross_entropy_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::binary_cross_entropy_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(grad_output, self, target, weight, reduction);
#endif
}

// aten::binary_cross_entropy_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & binary_cross_entropy_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, target, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::binary_cross_entropy_backward_out_grad_input(grad_input, grad_output, self, target, weight, reduction);
            break;
        default:
            AT_ERROR("binary_cross_entropy_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::binary_cross_entropy_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(grad_input, grad_output, self, target, weight, reduction);
#endif
}

// aten::binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor
Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::binary_cross_entropy_with_logits(self, target, weight, pos_weight, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::binary_cross_entropy_with_logits", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(self, target, weight, pos_weight, reduction);
#endif
}

// aten::binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor
Tensor binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::binary_cross_entropy_with_logits_backward(grad_output, self, target, weight, pos_weight, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::binary_cross_entropy_with_logits_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(grad_output, self, target, weight, pos_weight, reduction);
#endif
}

// aten::bincount(Tensor self, Tensor? weights=None, int minlength=0) -> Tensor
Tensor bincount(const Tensor & self, const Tensor & weights, int64_t minlength) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, weights);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::bincount(self, weights, minlength);
            break;
        default:
            AT_ERROR("bincount not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bincount", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t)>();
    return op.call(self, weights, minlength);
#endif
}

// aten::bitwise_not(Tensor self) -> Tensor
Tensor bitwise_not(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::bitwise_not(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bitwise_not", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::bitwise_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & bitwise_not_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::bitwise_not_out_out(out, self);
            break;
        default:
            AT_ERROR("bitwise_not_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bitwise_not", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::logical_not(Tensor self) -> Tensor
Tensor logical_not(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logical_not(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logical_not", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::logical_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & logical_not_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::logical_not_out_out(out, self);
            break;
        default:
            AT_ERROR("logical_not_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logical_not", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::logical_xor(Tensor self, Tensor other) -> Tensor
Tensor logical_xor(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logical_xor(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logical_xor", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::logical_xor.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & logical_xor_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::logical_xor_out_out(out, self, other);
            break;
        default:
            AT_ERROR("logical_xor_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logical_xor", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::logical_and(Tensor self, Tensor other) -> Tensor
Tensor logical_and(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logical_and(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logical_and", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::logical_and.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & logical_and_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::logical_and_out_out(out, self, other);
            break;
        default:
            AT_ERROR("logical_and_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logical_and", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::logical_or(Tensor self, Tensor other) -> Tensor
Tensor logical_or(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logical_or(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logical_or", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::logical_or.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & logical_or_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::logical_or_out_out(out, self, other);
            break;
        default:
            AT_ERROR("logical_or_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logical_or", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::blackman_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor blackman_window(int64_t window_length, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::blackman_window(window_length, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::blackman_window", "")
        .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(window_length, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::blackman_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor blackman_window(int64_t window_length, bool periodic, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::blackman_window_periodic(window_length, periodic, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::blackman_window", "periodic")
        .typed<Tensor (int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(window_length, periodic, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::bmm(Tensor self, Tensor mat2) -> Tensor
Tensor bmm(const Tensor & self, const Tensor & mat2) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, mat2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::bmm(self, mat2);
            break;
        default:
            AT_ERROR("bmm not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bmm", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, mat2);
#endif
}

// aten::_bmm(Tensor self, Tensor mat2, *, bool deterministic=False) -> Tensor
Tensor _bmm(const Tensor & self, const Tensor & mat2, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, mat2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_bmm not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_bmm", "")
        .typed<Tensor (const Tensor &, const Tensor &, bool)>();
    return op.call(self, mat2, deterministic);
#endif
}

// aten::bmm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)
Tensor & bmm_out(Tensor & out, const Tensor & self, const Tensor & mat2) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, mat2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::bmm_out_out(out, self, mat2);
            break;
        default:
            AT_ERROR("bmm_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bmm", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, mat2);
#endif
}

// aten::_bmm.out(Tensor self, Tensor mat2, *, bool deterministic=False, Tensor(a!) out) -> Tensor(a!)
Tensor & _bmm_out(Tensor & out, const Tensor & self, const Tensor & mat2, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, mat2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_bmm_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_bmm", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, bool)>();
    return op.call(out, self, mat2, deterministic);
#endif
}

// aten::broadcast_tensors(Tensor[] tensors) -> Tensor[]
std::vector<Tensor> broadcast_tensors(TensorList tensors) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::broadcast_tensors(tensors);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::broadcast_tensors", "")
        .typed<std::vector<Tensor> (TensorList)>();
    return op.call(tensors);
#endif
}

// aten::cat(Tensor[] tensors, int dim=0) -> Tensor
Tensor cat(TensorList tensors, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cat(tensors, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cat", "")
        .typed<Tensor (TensorList, int64_t)>();
    return op.call(tensors, dim);
#endif
}

// aten::cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)
Tensor & cat_out(Tensor & out, TensorList tensors, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cat_out_out(out, tensors, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cat", "out")
        .typed<Tensor & (Tensor &, TensorList, int64_t)>();
    return op.call(out, tensors, dim);
#endif
}

// aten::cat.names(Tensor[] tensors, Dimname dim) -> Tensor
Tensor cat(TensorList tensors, Dimname dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cat_names(tensors, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cat", "names")
        .typed<Tensor (TensorList, Dimname)>();
    return op.call(tensors, dim);
#endif
}

// aten::cat.names_out(Tensor[] tensors, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)
Tensor & cat_out(Tensor & out, TensorList tensors, Dimname dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cat_out_names_out(out, tensors, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cat", "names_out")
        .typed<Tensor & (Tensor &, TensorList, Dimname)>();
    return op.call(out, tensors, dim);
#endif
}

// aten::block_diag(Tensor[] tensors) -> Tensor
Tensor block_diag(TensorList tensors) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::block_diag(tensors);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::block_diag", "")
        .typed<Tensor (TensorList)>();
    return op.call(tensors);
#endif
}

// aten::ceil(Tensor self) -> Tensor
Tensor ceil(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::ceil(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ceil", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::ceil_(Tensor(a!) self) -> Tensor(a!)
Tensor & ceil_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::ceil_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ceil_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::ceil.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & ceil_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::ceil_out_out(out, self);
            break;
        default:
            AT_ERROR("ceil_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ceil", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::chain_matmul(Tensor[] matrices) -> Tensor
Tensor chain_matmul(TensorList matrices) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::chain_matmul(matrices);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::chain_matmul", "")
        .typed<Tensor (TensorList)>();
    return op.call(matrices);
#endif
}

// aten::chunk(Tensor(a) self, int chunks, int dim=0) -> Tensor(a)[]
std::vector<Tensor> chunk(const Tensor & self, int64_t chunks, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::chunk(self, chunks, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::chunk", "")
        .typed<std::vector<Tensor> (const Tensor &, int64_t, int64_t)>();
    return op.call(self, chunks, dim);
#endif
}

// aten::clamp(Tensor self, Scalar? min=None, Scalar? max=None) -> Tensor
Tensor clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::clamp(self, min, max);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::clamp(self, min, max);
            break;
        #ifdef USE_VULKAN
        case Backend::Vulkan:
            return VulkanType::clamp(self, min, max);
            break;
        #endif
        default:
            AT_ERROR("clamp not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::clamp", "")
        .typed<Tensor (const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>();
    return op.call(self, min, max);
#endif
}

// aten::clamp_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> Tensor(a!)
Tensor & clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::clamp_(self, min, max);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::clamp_", "")
        .typed<Tensor & (Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>();
    return op.call(self, min, max);
#endif
}

// aten::clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> Tensor(a!)
Tensor & clamp_out(Tensor & out, const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::clamp_out_out(out, self, min, max);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::clamp", "out")
        .typed<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>();
    return op.call(out, self, min, max);
#endif
}

// aten::clamp_max(Tensor self, Scalar max) -> Tensor
Tensor clamp_max(const Tensor & self, Scalar max) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::clamp_max(self, max);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::clamp_max", "")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, max);
#endif
}

// aten::clamp_max_(Tensor(a!) self, Scalar max) -> Tensor(a!)
Tensor & clamp_max_(Tensor & self, Scalar max) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::clamp_max_(self, max);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::clamp_max_", "")
        .typed<Tensor & (Tensor &, Scalar)>();
    return op.call(self, max);
#endif
}

// aten::clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> Tensor(a!)
Tensor & clamp_max_out(Tensor & out, const Tensor & self, Scalar max) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::clamp_max_out_out(out, self, max);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::clamp_max", "out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, max);
#endif
}

// aten::clamp_min(Tensor self, Scalar min) -> Tensor
Tensor clamp_min(const Tensor & self, Scalar min) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::clamp_min(self, min);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::clamp_min", "")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, min);
#endif
}

// aten::clamp_min_(Tensor(a!) self, Scalar min) -> Tensor(a!)
Tensor & clamp_min_(Tensor & self, Scalar min) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::clamp_min_(self, min);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::clamp_min_", "")
        .typed<Tensor & (Tensor &, Scalar)>();
    return op.call(self, min);
#endif
}

// aten::clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> Tensor(a!)
Tensor & clamp_min_out(Tensor & out, const Tensor & self, Scalar min) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::clamp_min_out_out(out, self, min);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::clamp_min", "out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, min);
#endif
}

// aten::cudnn_is_acceptable(Tensor self) -> bool
bool cudnn_is_acceptable(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cudnn_is_acceptable(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_is_acceptable", "")
        .typed<bool (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::constant_pad_nd(Tensor self, int[] pad, Scalar value=0) -> Tensor
Tensor constant_pad_nd(const Tensor & self, IntArrayRef pad, Scalar value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::constant_pad_nd(self, pad, value);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::constant_pad_nd", "")
        .typed<Tensor (const Tensor &, IntArrayRef, Scalar)>();
    return op.call(self, pad, value);
#endif
}

// aten::convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor
Tensor convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::convolution(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::convolution", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t)>();
    return op.call(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);
#endif
}

// aten::convolution_overrideable(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor
Tensor convolution_overrideable(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::convolution_overrideable(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::convolution_overrideable", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t)>();
    return op.call(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);
#endif
}

// aten::convolution_backward_overrideable(Tensor grad_output, Tensor input, Tensor weight, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
std::tuple<Tensor,Tensor,Tensor> convolution_backward_overrideable(const Tensor & grad_output, const Tensor & input, const Tensor & weight, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, std::array<bool,3> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::convolution_backward_overrideable(grad_output, input, weight, stride, padding, dilation, transposed, output_padding, groups, output_mask);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::convolution_backward_overrideable", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, std::array<bool,3>)>();
    return op.call(grad_output, input, weight, stride, padding, dilation, transposed, output_padding, groups, output_mask);
#endif
}

// aten::_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> Tensor
Tensor _convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_convolution(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_convolution", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool)>();
    return op.call(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled);
#endif
}

// aten::_convolution_nogroup(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding) -> Tensor
Tensor _convolution_nogroup(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_convolution_nogroup(input, weight, bias, stride, padding, dilation, transposed, output_padding);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_convolution_nogroup", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef)>();
    return op.call(input, weight, bias, stride, padding, dilation, transposed, output_padding);
#endif
}

// aten::_convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> _convolution_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_convolution_double_backward(ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, output_mask);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_convolution_double_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool, std::array<bool,3>)>();
    return op.call(ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, output_mask);
#endif
}

// aten::conv1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] dilation=1, int groups=1) -> Tensor
Tensor conv1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::conv1d(input, weight, bias, stride, padding, dilation, groups);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::conv1d", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>();
    return op.call(input, weight, bias, stride, padding, dilation, groups);
#endif
}

// aten::conv2d(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, int groups=1) -> Tensor
Tensor conv2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::conv2d(input, weight, bias, stride, padding, dilation, groups);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::conv2d", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>();
    return op.call(input, weight, bias, stride, padding, dilation, groups);
#endif
}

// aten::conv3d(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1, int groups=1) -> Tensor
Tensor conv3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::conv3d(input, weight, bias, stride, padding, dilation, groups);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::conv3d", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>();
    return op.call(input, weight, bias, stride, padding, dilation, groups);
#endif
}

// aten::conv_tbc(Tensor self, Tensor weight, Tensor bias, int pad=0) -> Tensor
Tensor conv_tbc(const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::conv_tbc(self, weight, bias, pad);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::conv_tbc", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(self, weight, bias, pad);
#endif
}

// aten::conv_tbc_backward(Tensor self, Tensor input, Tensor weight, Tensor bias, int pad) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> conv_tbc_backward(const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::conv_tbc_backward(self, input, weight, bias, pad);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::conv_tbc_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(self, input, weight, bias, pad);
#endif
}

// aten::conv_transpose1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] output_padding=0, int groups=1, int[1] dilation=1) -> Tensor
Tensor conv_transpose1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::conv_transpose1d(input, weight, bias, stride, padding, output_padding, groups, dilation);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::conv_transpose1d", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef)>();
    return op.call(input, weight, bias, stride, padding, output_padding, groups, dilation);
#endif
}

// aten::conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int groups=1, int[2] dilation=1) -> Tensor
Tensor conv_transpose2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::conv_transpose2d_input(input, weight, bias, stride, padding, output_padding, groups, dilation);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::conv_transpose2d", "input")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef)>();
    return op.call(input, weight, bias, stride, padding, output_padding, groups, dilation);
#endif
}

// aten::conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int groups=1, int[3] dilation=1) -> Tensor
Tensor conv_transpose3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::conv_transpose3d_input(input, weight, bias, stride, padding, output_padding, groups, dilation);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::conv_transpose3d", "input")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef)>();
    return op.call(input, weight, bias, stride, padding, output_padding, groups, dilation);
#endif
}

// aten::_copy_from(Tensor self, Tensor dst, bool non_blocking=False) -> Tensor
Tensor _copy_from(const Tensor & self, const Tensor & dst, bool non_blocking) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, dst);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_copy_from not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_copy_from", "")
        .typed<Tensor (const Tensor &, const Tensor &, bool)>();
    return op.call(self, dst, non_blocking);
#endif
}

// aten::cos(Tensor self) -> Tensor
Tensor cos(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cos(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cos", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::cos_(Tensor(a!) self) -> Tensor(a!)
Tensor & cos_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cos_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cos_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::cos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & cos_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cos_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cos", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::cosh(Tensor self) -> Tensor
Tensor cosh(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cosh(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cosh", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::cosh_(Tensor(a!) self) -> Tensor(a!)
Tensor & cosh_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cosh_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cosh_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::cosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & cosh_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cosh_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cosh", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::cosine_embedding_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor
Tensor cosine_embedding_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cosine_embedding_loss(input1, input2, target, margin, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cosine_embedding_loss", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, double, int64_t)>();
    return op.call(input1, input2, target, margin, reduction);
#endif
}

// aten::count_nonzero.dim_IntList(Tensor self, int[] dim) -> Tensor
Tensor count_nonzero(const Tensor & self, IntArrayRef dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::count_nonzero_dim_IntList(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::count_nonzero", "dim_IntList")
        .typed<Tensor (const Tensor &, IntArrayRef)>();
    return op.call(self, dim);
#endif
}

// aten::count_nonzero(Tensor self, int? dim=None) -> Tensor
Tensor count_nonzero(const Tensor & self, c10::optional<int64_t> dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::count_nonzero(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::count_nonzero", "")
        .typed<Tensor (const Tensor &, c10::optional<int64_t>)>();
    return op.call(self, dim);
#endif
}

// aten::cudnn_affine_grid_generator(Tensor theta, int N, int C, int H, int W) -> Tensor grid
Tensor cudnn_affine_grid_generator(const Tensor & theta, int64_t N, int64_t C, int64_t H, int64_t W) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(theta);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("cudnn_affine_grid_generator not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_affine_grid_generator", "")
        .typed<Tensor (const Tensor &, int64_t, int64_t, int64_t, int64_t)>();
    return op.call(theta, N, C, H, W);
#endif
}

// aten::cudnn_affine_grid_generator_backward(Tensor grad, int N, int C, int H, int W) -> Tensor grad_theta
Tensor cudnn_affine_grid_generator_backward(const Tensor & grad, int64_t N, int64_t C, int64_t H, int64_t W) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("cudnn_affine_grid_generator_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_affine_grid_generator_backward", "")
        .typed<Tensor (const Tensor &, int64_t, int64_t, int64_t, int64_t)>();
    return op.call(grad, N, C, H, W);
#endif
}

// aten::cudnn_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor,Tensor> cudnn_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, weight, bias, running_mean, running_var);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("cudnn_batch_norm not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_batch_norm", "")
        .typed<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double)>();
    return op.call(input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon);
#endif
}

// aten::cudnn_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon, Tensor reserveSpace) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon, const Tensor & reserveSpace) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, grad_output, weight, running_mean, running_var, save_mean, save_var, reserveSpace);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("cudnn_batch_norm_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_batch_norm_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double, const Tensor &)>();
    return op.call(input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon, reserveSpace);
#endif
}

// aten::cudnn_convolution.deprecated(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor cudnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("cudnn_convolution not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_convolution", "deprecated")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::cudnn_convolution(Tensor self, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor cudnn_convolution(const Tensor & self, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("cudnn_convolution not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_convolution", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(self, weight, padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::cudnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor cudnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("cudnn_convolution_backward_input not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_convolution_backward_input", "")
        .typed<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::cudnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[2] output_mask) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> cudnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,2> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, grad_output, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("cudnn_convolution_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_convolution_backward", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,2>)>();
    return op.call(self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);
#endif
}

// aten::cudnn_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor cudnn_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("cudnn_convolution_backward_weight not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_convolution_backward_weight", "")
        .typed<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::cudnn_convolution_transpose.deprecated(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("cudnn_convolution_transpose not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_convolution_transpose", "deprecated")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::cudnn_convolution_transpose(Tensor self, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("cudnn_convolution_transpose not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_convolution_transpose", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(self, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::cudnn_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[2] output_mask) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> cudnn_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,2> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, grad_output, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("cudnn_convolution_transpose_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_convolution_transpose_backward", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,2>)>();
    return op.call(self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask);
#endif
}

// aten::cudnn_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor cudnn_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("cudnn_convolution_transpose_backward_input not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_convolution_transpose_backward_input", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::cudnn_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor cudnn_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("cudnn_convolution_transpose_backward_weight not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_convolution_transpose_backward_weight", "")
        .typed<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::cudnn_grid_sampler(Tensor self, Tensor grid) -> Tensor output
Tensor cudnn_grid_sampler(const Tensor & self, const Tensor & grid) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, grid);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("cudnn_grid_sampler not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_grid_sampler", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, grid);
#endif
}

// aten::cudnn_grid_sampler_backward(Tensor self, Tensor grid, Tensor grad_output) -> (Tensor grad_self, Tensor grad_grid)
std::tuple<Tensor,Tensor> cudnn_grid_sampler_backward(const Tensor & self, const Tensor & grid, const Tensor & grad_output) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, grid, grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("cudnn_grid_sampler_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cudnn_grid_sampler_backward", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(self, grid, grad_output);
#endif
}

// aten::cummax(Tensor self, int dim) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> cummax(const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cummax(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cummax", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, int64_t)>();
    return op.call(self, dim);
#endif
}

// aten::cummax.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> cummax_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cummax_out_out(values, indices, self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cummax", "out")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t)>();
    return op.call(values, indices, self, dim);
#endif
}

// aten::cummax.dimname(Tensor self, Dimname dim) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> cummax(const Tensor & self, Dimname dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cummax_dimname(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cummax", "dimname")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, Dimname)>();
    return op.call(self, dim);
#endif
}

// aten::cummax.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> cummax_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cummax_out_dimname_out(values, indices, self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cummax", "dimname_out")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname)>();
    return op.call(values, indices, self, dim);
#endif
}

// aten::_cummax_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()
void _cummax_helper(const Tensor & self, Tensor & values, Tensor & indices, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, values, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
         CPUType::_cummax_helper(self, values, indices, dim);
            break;
        default:
            AT_ERROR("_cummax_helper not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cummax_helper", "")
        .typed<void (const Tensor &, Tensor &, Tensor &, int64_t)>();
    return op.call(self, values, indices, dim);
#endif
}

// aten::cummin(Tensor self, int dim) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> cummin(const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cummin(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cummin", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, int64_t)>();
    return op.call(self, dim);
#endif
}

// aten::cummin.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> cummin_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cummin_out_out(values, indices, self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cummin", "out")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t)>();
    return op.call(values, indices, self, dim);
#endif
}

// aten::cummin.dimname(Tensor self, Dimname dim) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> cummin(const Tensor & self, Dimname dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cummin_dimname(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cummin", "dimname")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, Dimname)>();
    return op.call(self, dim);
#endif
}

// aten::cummin.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> cummin_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cummin_out_dimname_out(values, indices, self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cummin", "dimname_out")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname)>();
    return op.call(values, indices, self, dim);
#endif
}

// aten::_cummin_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()
void _cummin_helper(const Tensor & self, Tensor & values, Tensor & indices, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, values, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
         CPUType::_cummin_helper(self, values, indices, dim);
            break;
        default:
            AT_ERROR("_cummin_helper not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cummin_helper", "")
        .typed<void (const Tensor &, Tensor &, Tensor &, int64_t)>();
    return op.call(self, values, indices, dim);
#endif
}

// aten::cumprod(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor
Tensor cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cumprod(self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cumprod", "")
        .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
    return op.call(self, dim, dtype);
#endif
}

// aten::cumprod.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
Tensor & cumprod_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cumprod_out_out(out, self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cumprod", "out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>)>();
    return op.call(out, self, dim, dtype);
#endif
}

// aten::cumprod.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
Tensor cumprod(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cumprod_dimname(self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cumprod", "dimname")
        .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
    return op.call(self, dim, dtype);
#endif
}

// aten::cumprod.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
Tensor & cumprod_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cumprod_out_dimname_out(out, self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cumprod", "dimname_out")
        .typed<Tensor & (Tensor &, const Tensor &, Dimname, c10::optional<ScalarType>)>();
    return op.call(out, self, dim, dtype);
#endif
}

// aten::cumsum(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor
Tensor cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cumsum(self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cumsum", "")
        .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
    return op.call(self, dim, dtype);
#endif
}

// aten::cumsum.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
Tensor & cumsum_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cumsum_out_out(out, self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cumsum", "out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>)>();
    return op.call(out, self, dim, dtype);
#endif
}

// aten::cumsum.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
Tensor cumsum(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cumsum_dimname(self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cumsum", "dimname")
        .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
    return op.call(self, dim, dtype);
#endif
}

// aten::cumsum.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
Tensor & cumsum_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cumsum_out_dimname_out(out, self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cumsum", "dimname_out")
        .typed<Tensor & (Tensor &, const Tensor &, Dimname, c10::optional<ScalarType>)>();
    return op.call(out, self, dim, dtype);
#endif
}

// aten::ctc_loss.IntList(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor
Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::ctc_loss_IntList(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ctc_loss", "IntList")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, int64_t, bool)>();
    return op.call(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
#endif
}

// aten::ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor
Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::ctc_loss_Tensor(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ctc_loss", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool)>();
    return op.call(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
#endif
}

// aten::_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, bool zero_infinity=False) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool zero_infinity) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(log_probs, targets);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_ctc_loss(log_probs, targets, input_lengths, target_lengths, blank, zero_infinity);
            break;
        default:
            AT_ERROR("_ctc_loss not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_ctc_loss", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, bool)>();
    return op.call(log_probs, targets, input_lengths, target_lengths, blank, zero_infinity);
#endif
}

// aten::_ctc_loss_backward(Tensor grad, Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, Tensor neg_log_likelihood, Tensor log_alpha, int blank, bool zero_infinity=False) -> Tensor
Tensor _ctc_loss_backward(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad, log_probs, targets, neg_log_likelihood, log_alpha);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_ctc_loss_backward(grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity);
            break;
        default:
            AT_ERROR("_ctc_loss_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_ctc_loss_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, int64_t, bool)>();
    return op.call(grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity);
#endif
}

// aten::det(Tensor self) -> Tensor
Tensor det(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::det(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::det", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::diag_embed(Tensor self, int offset=0, int dim1=-2, int dim2=-1) -> Tensor
Tensor diag_embed(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::diag_embed(self, offset, dim1, dim2);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::diag_embed", "")
        .typed<Tensor (const Tensor &, int64_t, int64_t, int64_t)>();
    return op.call(self, offset, dim1, dim2);
#endif
}

// aten::diagflat(Tensor self, int offset=0) -> Tensor
Tensor diagflat(const Tensor & self, int64_t offset) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::diagflat(self, offset);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::diagflat", "")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(self, offset);
#endif
}

// aten::diagonal(Tensor(a) self, int offset=0, int dim1=0, int dim2=1) -> Tensor(a)
Tensor diagonal(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::diagonal(self, offset, dim1, dim2);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::diagonal", "")
        .typed<Tensor (const Tensor &, int64_t, int64_t, int64_t)>();
    return op.call(self, offset, dim1, dim2);
#endif
}

// aten::diagonal.Dimname(Tensor(a) self, *, Dimname outdim, Dimname dim1, Dimname dim2, int offset=0) -> Tensor(a)
Tensor diagonal(const Tensor & self, Dimname outdim, Dimname dim1, Dimname dim2, int64_t offset) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::diagonal_Dimname(self, outdim, dim1, dim2, offset);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::diagonal", "Dimname")
        .typed<Tensor (const Tensor &, Dimname, Dimname, Dimname, int64_t)>();
    return op.call(self, outdim, dim1, dim2, offset);
#endif
}

// aten::div.Tensor(Tensor self, Tensor other) -> Tensor
Tensor div(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::div_Tensor(self, other);
            break;
        default:
            AT_ERROR("div not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::div", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & div_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::div_out_out(out, self, other);
            break;
        default:
            AT_ERROR("div_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::div", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::div.Scalar(Tensor self, Scalar other) -> Tensor
Tensor div(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::div_Scalar(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::div", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::dot(Tensor self, Tensor tensor) -> Tensor
Tensor dot(const Tensor & self, const Tensor & tensor) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, tensor);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::dot(self, tensor);
            break;
        default:
            AT_ERROR("dot not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::dot", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, tensor);
#endif
}

// aten::dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> Tensor(a!)
Tensor & dot_out(Tensor & out, const Tensor & self, const Tensor & tensor) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::dot_out_out(out, self, tensor);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::dot", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, tensor);
#endif
}

// aten::einsum(str equation, Tensor[] tensors) -> Tensor
Tensor einsum(std::string equation, TensorList tensors) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::einsum(equation, tensors);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::einsum", "")
        .typed<Tensor (std::string, TensorList)>();
    return op.call(equation, tensors);
#endif
}

// aten::embedding(Tensor weight, Tensor indices, int padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor
Tensor embedding(const Tensor & weight, const Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::embedding(weight, indices, padding_idx, scale_grad_by_freq, sparse);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::embedding", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t, bool, bool)>();
    return op.call(weight, indices, padding_idx, scale_grad_by_freq, sparse);
#endif
}

// aten::embedding_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq, bool sparse) -> Tensor
Tensor embedding_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::embedding_backward(grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::embedding_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t, int64_t, bool, bool)>();
    return op.call(grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse);
#endif
}

// aten::embedding_dense_backward(Tensor grad_output, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor
Tensor embedding_dense_backward(const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::embedding_dense_backward(grad_output, indices, num_weights, padding_idx, scale_grad_by_freq);
            break;
        default:
            AT_ERROR("embedding_dense_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::embedding_dense_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t, int64_t, bool)>();
    return op.call(grad_output, indices, num_weights, padding_idx, scale_grad_by_freq);
#endif
}

// aten::embedding_renorm_(Tensor(a!) self, Tensor indices, float max_norm, float norm_type) -> Tensor(a!)
Tensor & embedding_renorm_(Tensor & self, const Tensor & indices, double max_norm, double norm_type) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::embedding_renorm_(self, indices, max_norm, norm_type);
            break;
        default:
            AT_ERROR("embedding_renorm_ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::embedding_renorm_", "")
        .typed<Tensor & (Tensor &, const Tensor &, double, double)>();
    return op.call(self, indices, max_norm, norm_type);
#endif
}

// aten::embedding_sparse_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor
Tensor embedding_sparse_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::embedding_sparse_backward(grad, indices, num_weights, padding_idx, scale_grad_by_freq);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::embedding_sparse_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t, int64_t, bool)>();
    return op.call(grad, indices, num_weights, padding_idx, scale_grad_by_freq);
#endif
}

// aten::_embedding_bag_forward_only(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag_forward_only(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights, bool include_last_offset) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(weight, indices, offsets, per_sample_weights);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_embedding_bag_forward_only(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
            break;
        default:
            AT_ERROR("_embedding_bag_forward_only not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_embedding_bag_forward_only", "")
        .typed<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const Tensor &, bool)>();
    return op.call(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
#endif
}

// aten::embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor,Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights, bool include_last_offset) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::embedding_bag(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::embedding_bag", "")
        .typed<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const Tensor &, bool)>();
    return op.call(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
#endif
}

// aten::_embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights, bool include_last_offset) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(weight, indices, offsets, per_sample_weights);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_embedding_bag(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
            break;
        default:
            AT_ERROR("_embedding_bag not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_embedding_bag", "")
        .typed<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const Tensor &, bool)>();
    return op.call(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
#endif
}

// aten::_embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights) -> Tensor
Tensor _embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_embedding_bag_backward(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, per_sample_weights);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_embedding_bag_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, bool, const Tensor &)>();
    return op.call(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, per_sample_weights);
#endif
}

// aten::_embedding_bag_sparse_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor
Tensor _embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_embedding_bag_sparse_backward(grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode, per_sample_weights);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_embedding_bag_sparse_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, const Tensor &)>();
    return op.call(grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode, per_sample_weights);
#endif
}

// aten::_embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor
Tensor _embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad, indices, offsets, offset2bag, bag_size, maximum_indices, per_sample_weights);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_embedding_bag_dense_backward(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights);
            break;
        default:
            AT_ERROR("_embedding_bag_dense_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_embedding_bag_dense_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, const Tensor &)>();
    return op.call(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights);
#endif
}

// aten::_embedding_bag_per_sample_weights_backward(Tensor grad, Tensor weight, Tensor indices, Tensor offsets, Tensor offset2bag, int mode) -> Tensor
Tensor _embedding_bag_per_sample_weights_backward(const Tensor & grad, const Tensor & weight, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, int64_t mode) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad, weight, indices, offsets, offset2bag);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_embedding_bag_per_sample_weights_backward(grad, weight, indices, offsets, offset2bag, mode);
            break;
        default:
            AT_ERROR("_embedding_bag_per_sample_weights_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_embedding_bag_per_sample_weights_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(grad, weight, indices, offsets, offset2bag, mode);
#endif
}

// aten::empty_meta(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
Tensor empty_meta(IntArrayRef size, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::empty_meta(size, options, memory_format);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::empty_meta", "")
        .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
    return op.call(size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), c10::impl::process_memory_format(options, memory_format));
#endif
}

// aten::empty.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
Tensor empty(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::empty_names(size, names, options, memory_format);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::empty", "names")
        .typed<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &, c10::optional<MemoryFormat>)>();
    return op.call(size, names, options, memory_format);
#endif
}

// aten::empty.memory_format(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
Tensor empty(IntArrayRef size, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKey _dk = options.computeDispatchKey();
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::empty_memory_format(size, options, memory_format);
            break;
        #ifdef USE_VULKAN
        case Backend::Vulkan:
            return VulkanType::empty_memory_format(size, options, memory_format);
            break;
        #endif
        default:
            AT_ERROR("empty not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::empty", "memory_format")
        .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
    return op.call(size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), c10::impl::process_memory_format(options, memory_format));
#endif
}

// aten::_empty_affine_quantized(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, float scale=1, int zero_point=0, MemoryFormat? memory_format=contiguous_format) -> Tensor
Tensor _empty_affine_quantized(IntArrayRef size, const TensorOptions & options, double scale, int64_t zero_point, c10::optional<MemoryFormat> memory_format) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKey _dk = options.computeDispatchKey();
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_empty_affine_quantized(size, options, scale, zero_point, memory_format);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::_empty_affine_quantized(size, options, scale, zero_point, memory_format);
            break;
        default:
            AT_ERROR("_empty_affine_quantized not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_empty_affine_quantized", "")
        .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, double, int64_t, c10::optional<MemoryFormat>)>();
    return op.call(size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), scale, zero_point, c10::impl::process_memory_format(options, memory_format));
#endif
}

// aten::_empty_per_channel_affine_quantized(int[] size, *, Tensor scales, Tensor zero_points, int axis, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=contiguous_format) -> Tensor
Tensor _empty_per_channel_affine_quantized(IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = DispatchKeySet(options.computeDispatchKey()) | c10::detail::multi_dispatch_key_set(scales, zero_points);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_empty_per_channel_affine_quantized(size, scales, zero_points, axis, options, memory_format);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::_empty_per_channel_affine_quantized(size, scales, zero_points, axis, options, memory_format);
            break;
        default:
            AT_ERROR("_empty_per_channel_affine_quantized not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_empty_per_channel_affine_quantized", "")
        .typed<Tensor (IntArrayRef, const Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
    return op.call(size, scales, zero_points, axis, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), c10::impl::process_memory_format(options, memory_format));
#endif
}

// aten::empty_quantized(int[] size, Tensor qtensor) -> Tensor
Tensor empty_quantized(IntArrayRef size, const Tensor & qtensor) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(qtensor);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::QuantizedCPU:
            return QuantizedCPUType::empty_quantized(size, qtensor);
            break;
        default:
            AT_ERROR("empty_quantized not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::empty_quantized", "")
        .typed<Tensor (IntArrayRef, const Tensor &)>();
    return op.call(size, qtensor);
#endif
}

// aten::empty.out(int[] size, *, MemoryFormat? memory_format=None, Tensor(a!) out) -> Tensor(a!)
Tensor & empty_out(Tensor & out, IntArrayRef size, c10::optional<MemoryFormat> memory_format) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::empty_out_out(out, size, memory_format);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::empty", "out")
        .typed<Tensor & (Tensor &, IntArrayRef, c10::optional<MemoryFormat>)>();
    return op.call(out, size, memory_format);
#endif
}

// aten::empty_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
Tensor empty_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::empty_like(self, options, memory_format);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::empty_like", "")
        .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
    return op.call(self, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), c10::impl::process_memory_format(options, memory_format));
#endif
}

// aten::empty_strided(int[] size, int[] stride, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor empty_strided(IntArrayRef size, IntArrayRef stride, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKey _dk = options.computeDispatchKey();
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::empty_strided(size, stride, options);
            break;
        #ifdef USE_VULKAN
        case Backend::Vulkan:
            return VulkanType::empty_strided(size, stride, options);
            break;
        #endif
        default:
            AT_ERROR("empty_strided not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::empty_strided", "")
        .typed<Tensor (IntArrayRef, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(size, stride, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::erf(Tensor self) -> Tensor
Tensor erf(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::erf(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::erf", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::erf_(Tensor(a!) self) -> Tensor(a!)
Tensor & erf_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::erf_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::erf_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & erf_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::erf_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::erf", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::erfc(Tensor self) -> Tensor
Tensor erfc(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::erfc(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::erfc", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::erfc_(Tensor(a!) self) -> Tensor(a!)
Tensor & erfc_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::erfc_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::erfc_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::erfc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & erfc_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::erfc_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::erfc", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::exp(Tensor self) -> Tensor
Tensor exp(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::exp(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::exp", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::exp_(Tensor(a!) self) -> Tensor(a!)
Tensor & exp_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::exp_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::exp_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::exp.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & exp_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::exp_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::exp", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::expm1(Tensor self) -> Tensor
Tensor expm1(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::expm1(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::expm1", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::expm1_(Tensor(a!) self) -> Tensor(a!)
Tensor & expm1_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::expm1_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::expm1_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::expm1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & expm1_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::expm1_out_out(out, self);
            break;
        default:
            AT_ERROR("expm1_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::expm1", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::eye(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor eye(int64_t n, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::eye(n, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::eye", "")
        .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(n, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::eye.m(int n, int m, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor eye(int64_t n, int64_t m, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::eye_m(n, m, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::eye", "m")
        .typed<Tensor (int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(n, m, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::eye.out(int n, *, Tensor(a!) out) -> Tensor(a!)
Tensor & eye_out(Tensor & out, int64_t n) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::eye_out_out(out, n);
            break;
        default:
            AT_ERROR("eye_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::eye", "out")
        .typed<Tensor & (Tensor &, int64_t)>();
    return op.call(out, n);
#endif
}

// aten::eye.m_out(int n, int m, *, Tensor(a!) out) -> Tensor(a!)
Tensor & eye_out(Tensor & out, int64_t n, int64_t m) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::eye_out_m_out(out, n, m);
            break;
        default:
            AT_ERROR("eye_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::eye", "m_out")
        .typed<Tensor & (Tensor &, int64_t, int64_t)>();
    return op.call(out, n, m);
#endif
}

// aten::flatten.using_ints(Tensor(a) self, int start_dim=0, int end_dim=-1) -> Tensor(a)
Tensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::flatten_using_ints(self, start_dim, end_dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::flatten", "using_ints")
        .typed<Tensor (const Tensor &, int64_t, int64_t)>();
    return op.call(self, start_dim, end_dim);
#endif
}

// aten::flatten.named_out_dim(Tensor(a) self, int start_dim, int end_dim, Dimname out_dim) -> Tensor(a)
Tensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim, Dimname out_dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::flatten_named_out_dim(self, start_dim, end_dim, out_dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::flatten", "named_out_dim")
        .typed<Tensor (const Tensor &, int64_t, int64_t, Dimname)>();
    return op.call(self, start_dim, end_dim, out_dim);
#endif
}

// aten::flatten.using_names(Tensor(a) self, Dimname start_dim, Dimname end_dim, Dimname out_dim) -> Tensor(a)
Tensor flatten(const Tensor & self, Dimname start_dim, Dimname end_dim, Dimname out_dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::flatten_using_names(self, start_dim, end_dim, out_dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::flatten", "using_names")
        .typed<Tensor (const Tensor &, Dimname, Dimname, Dimname)>();
    return op.call(self, start_dim, end_dim, out_dim);
#endif
}

// aten::flatten.DimnameList(Tensor(a) self, Dimname[] dims, Dimname out_dim) -> Tensor(a)
Tensor flatten(const Tensor & self, DimnameList dims, Dimname out_dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::flatten_DimnameList(self, dims, out_dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::flatten", "DimnameList")
        .typed<Tensor (const Tensor &, DimnameList, Dimname)>();
    return op.call(self, dims, out_dim);
#endif
}

// aten::fill_.Scalar(Tensor(a!) self, Scalar value) -> Tensor(a!)
Tensor & fill_(Tensor & self, Scalar value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::fill__Scalar(self, value);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fill_", "Scalar")
        .typed<Tensor & (Tensor &, Scalar)>();
    return op.call(self, value);
#endif
}

// aten::fill_.Tensor(Tensor(a!) self, Tensor value) -> Tensor(a!)
Tensor & fill_(Tensor & self, const Tensor & value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::fill__Tensor(self, value);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fill_", "Tensor")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(self, value);
#endif
}

// aten::floor(Tensor self) -> Tensor
Tensor floor(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::floor(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::floor", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::floor_(Tensor(a!) self) -> Tensor(a!)
Tensor & floor_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::floor_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::floor_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::floor.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & floor_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::floor_out_out(out, self);
            break;
        default:
            AT_ERROR("floor_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::floor", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::floor_divide(Tensor self, Tensor other) -> Tensor
Tensor floor_divide(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::floor_divide(self, other);
            break;
        default:
            AT_ERROR("floor_divide not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::floor_divide", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::floor_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & floor_divide_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::floor_divide_out_out(out, self, other);
            break;
        default:
            AT_ERROR("floor_divide_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::floor_divide", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::floor_divide.Scalar(Tensor self, Scalar other) -> Tensor
Tensor floor_divide(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::floor_divide_Scalar(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::floor_divide", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::frac(Tensor self) -> Tensor
Tensor frac(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::frac(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::frac", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::frac_(Tensor(a!) self) -> Tensor(a!)
Tensor & frac_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::frac_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::frac_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::frac.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & frac_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::frac_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::frac", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::full.names(int[] size, Scalar fill_value, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor full(IntArrayRef size, Scalar fill_value, c10::optional<DimnameList> names, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::full_names(size, fill_value, names, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::full", "names")
        .typed<Tensor (IntArrayRef, Scalar, c10::optional<DimnameList>, const TensorOptions &)>();
    return op.call(size, fill_value, names, options);
#endif
}

// aten::full(int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor full(IntArrayRef size, Scalar fill_value, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::full(size, fill_value, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::full", "")
        .typed<Tensor (IntArrayRef, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(size, fill_value, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::full.out(int[] size, Scalar fill_value, *, Tensor(a!) out) -> Tensor(a!)
Tensor & full_out(Tensor & out, IntArrayRef size, Scalar fill_value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::full_out_out(out, size, fill_value);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::full", "out")
        .typed<Tensor & (Tensor &, IntArrayRef, Scalar)>();
    return op.call(out, size, fill_value);
#endif
}

// aten::full_like(Tensor self, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
Tensor full_like(const Tensor & self, Scalar fill_value, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::full_like(self, fill_value, options, memory_format);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::full_like", "")
        .typed<Tensor (const Tensor &, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
    return op.call(self, fill_value, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), c10::impl::process_memory_format(options, memory_format));
#endif
}

// aten::from_file(str filename, bool? shared=None, int? size=0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor from_file(std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKey _dk = options.computeDispatchKey();
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::from_file(filename, shared, size, options);
            break;
        default:
            AT_ERROR("from_file not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::from_file", "")
        .typed<Tensor (std::string, c10::optional<bool>, c10::optional<int64_t>, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(filename, shared, size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::grid_sampler(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor
Tensor grid_sampler(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::grid_sampler(input, grid, interpolation_mode, padding_mode, align_corners);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::grid_sampler", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t, int64_t, bool)>();
    return op.call(input, grid, interpolation_mode, padding_mode, align_corners);
#endif
}

// aten::grid_sampler_2d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor
Tensor grid_sampler_2d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, grid);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::grid_sampler_2d(input, grid, interpolation_mode, padding_mode, align_corners);
            break;
        default:
            AT_ERROR("grid_sampler_2d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::grid_sampler_2d", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t, int64_t, bool)>();
    return op.call(input, grid, interpolation_mode, padding_mode, align_corners);
#endif
}

// aten::grid_sampler_2d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> grid_sampler_2d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, input, grid);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::grid_sampler_2d_backward(grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
            break;
        default:
            AT_ERROR("grid_sampler_2d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::grid_sampler_2d_backward", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool)>();
    return op.call(grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
#endif
}

// aten::grid_sampler_3d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor
Tensor grid_sampler_3d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, grid);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::grid_sampler_3d(input, grid, interpolation_mode, padding_mode, align_corners);
            break;
        default:
            AT_ERROR("grid_sampler_3d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::grid_sampler_3d", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t, int64_t, bool)>();
    return op.call(input, grid, interpolation_mode, padding_mode, align_corners);
#endif
}

// aten::grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> grid_sampler_3d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, input, grid);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::grid_sampler_3d_backward(grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
            break;
        default:
            AT_ERROR("grid_sampler_3d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::grid_sampler_3d_backward", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool)>();
    return op.call(grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
#endif
}

// aten::hann_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor hann_window(int64_t window_length, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::hann_window(window_length, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hann_window", "")
        .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(window_length, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::hann_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor hann_window(int64_t window_length, bool periodic, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::hann_window_periodic(window_length, periodic, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hann_window", "periodic")
        .typed<Tensor (int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(window_length, periodic, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::hamming_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor hamming_window(int64_t window_length, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::hamming_window(window_length, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hamming_window", "")
        .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(window_length, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::hamming_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor hamming_window(int64_t window_length, bool periodic, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::hamming_window_periodic(window_length, periodic, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hamming_window", "periodic")
        .typed<Tensor (int64_t, bool, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(window_length, periodic, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::hamming_window.periodic_alpha(int window_length, bool periodic, float alpha, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor hamming_window(int64_t window_length, bool periodic, double alpha, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::hamming_window_periodic_alpha(window_length, periodic, alpha, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hamming_window", "periodic_alpha")
        .typed<Tensor (int64_t, bool, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(window_length, periodic, alpha, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::hamming_window.periodic_alpha_beta(int window_length, bool periodic, float alpha, float beta, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor hamming_window(int64_t window_length, bool periodic, double alpha, double beta, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::hamming_window_periodic_alpha_beta(window_length, periodic, alpha, beta, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hamming_window", "periodic_alpha_beta")
        .typed<Tensor (int64_t, bool, double, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(window_length, periodic, alpha, beta, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::hinge_embedding_loss(Tensor self, Tensor target, float margin=1.0, int reduction=Mean) -> Tensor
Tensor hinge_embedding_loss(const Tensor & self, const Tensor & target, double margin, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::hinge_embedding_loss(self, target, margin, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hinge_embedding_loss", "")
        .typed<Tensor (const Tensor &, const Tensor &, double, int64_t)>();
    return op.call(self, target, margin, reduction);
#endif
}

// aten::ger(Tensor self, Tensor vec2) -> Tensor
Tensor ger(const Tensor & self, const Tensor & vec2) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::ger(self, vec2);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ger", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, vec2);
#endif
}

// aten::ger.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> Tensor(a!)
Tensor & ger_out(Tensor & out, const Tensor & self, const Tensor & vec2) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::ger_out_out(out, self, vec2);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ger", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, vec2);
#endif
}

// aten::group_norm(Tensor input, int num_groups, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enabled=True) -> Tensor
Tensor group_norm(const Tensor & input, int64_t num_groups, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enabled) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::group_norm(input, num_groups, weight, bias, eps, cudnn_enabled);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::group_norm", "")
        .typed<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &, double, bool)>();
    return op.call(input, num_groups, weight, bias, eps, cudnn_enabled);
#endif
}

// aten::native_group_norm(Tensor input, Tensor? weight, Tensor? bias, int N, int C, int HxW, int group, float eps) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> native_group_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t N, int64_t C, int64_t HxW, int64_t group, double eps) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::native_group_norm(input, weight, bias, N, C, HxW, group, eps);
            break;
        default:
            AT_ERROR("native_group_norm not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::native_group_norm", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, int64_t, double)>();
    return op.call(input, weight, bias, N, C, HxW, group, eps);
#endif
}

// aten::native_group_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int N, int C, int HxW, int group, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> native_group_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t N, int64_t C, int64_t HxW, int64_t group, std::array<bool,3> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_out, input, mean, rstd, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::native_group_norm_backward(grad_out, input, mean, rstd, weight, N, C, HxW, group, output_mask);
            break;
        default:
            AT_ERROR("native_group_norm_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::native_group_norm_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, int64_t, std::array<bool,3>)>();
    return op.call(grad_out, input, mean, rstd, weight, N, C, HxW, group, output_mask);
#endif
}

// aten::fft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor
Tensor fft(const Tensor & self, int64_t signal_ndim, bool normalized) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::fft(self, signal_ndim, normalized);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fft", "")
        .typed<Tensor (const Tensor &, int64_t, bool)>();
    return op.call(self, signal_ndim, normalized);
#endif
}

// aten::ifft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor
Tensor ifft(const Tensor & self, int64_t signal_ndim, bool normalized) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::ifft(self, signal_ndim, normalized);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ifft", "")
        .typed<Tensor (const Tensor &, int64_t, bool)>();
    return op.call(self, signal_ndim, normalized);
#endif
}

// aten::rfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True) -> Tensor
Tensor rfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rfft(self, signal_ndim, normalized, onesided);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rfft", "")
        .typed<Tensor (const Tensor &, int64_t, bool, bool)>();
    return op.call(self, signal_ndim, normalized, onesided);
#endif
}

// aten::irfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True, int[] signal_sizes=[]) -> Tensor
Tensor irfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided, IntArrayRef signal_sizes) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::irfft(self, signal_ndim, normalized, onesided, signal_sizes);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::irfft", "")
        .typed<Tensor (const Tensor &, int64_t, bool, bool, IntArrayRef)>();
    return op.call(self, signal_ndim, normalized, onesided, signal_sizes);
#endif
}

// aten::_fft_with_size(Tensor self, int signal_ndim, bool complex_input, bool complex_output, bool inverse, int[] checked_signal_sizes, bool normalized, bool onesided, int[] output_sizes) -> Tensor
Tensor _fft_with_size(const Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, IntArrayRef checked_signal_sizes, bool normalized, bool onesided, IntArrayRef output_sizes) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_fft_with_size(self, signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes);
            break;
        default:
            AT_ERROR("_fft_with_size not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_fft_with_size", "")
        .typed<Tensor (const Tensor &, int64_t, bool, bool, bool, IntArrayRef, bool, bool, IntArrayRef)>();
    return op.call(self, signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes);
#endif
}

// aten::_cufft_get_plan_cache_size(int device_index) -> int
int64_t _cufft_get_plan_cache_size(int64_t device_index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_cufft_get_plan_cache_size(device_index);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cufft_get_plan_cache_size", "")
        .typed<int64_t (int64_t)>();
    return op.call(device_index);
#endif
}

// aten::_cufft_get_plan_cache_max_size(int device_index) -> int
int64_t _cufft_get_plan_cache_max_size(int64_t device_index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_cufft_get_plan_cache_max_size(device_index);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cufft_get_plan_cache_max_size", "")
        .typed<int64_t (int64_t)>();
    return op.call(device_index);
#endif
}

// aten::_cufft_set_plan_cache_max_size(int device_index, int max_size) -> ()
void _cufft_set_plan_cache_max_size(int64_t device_index, int64_t max_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
     TypeDefault::_cufft_set_plan_cache_max_size(device_index, max_size);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cufft_set_plan_cache_max_size", "")
        .typed<void (int64_t, int64_t)>();
    return op.call(device_index, max_size);
#endif
}

// aten::_cufft_clear_plan_cache(int device_index) -> ()
void _cufft_clear_plan_cache(int64_t device_index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
     TypeDefault::_cufft_clear_plan_cache(device_index);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cufft_clear_plan_cache", "")
        .typed<void (int64_t)>();
    return op.call(device_index);
#endif
}

// aten::index.Tensor(Tensor self, Tensor?[] indices) -> Tensor
Tensor index(const Tensor & self, TensorList indices) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::index_Tensor(self, indices);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::index", "Tensor")
        .typed<Tensor (const Tensor &, TensorList)>();
    return op.call(self, indices);
#endif
}

// aten::index_copy(Tensor self, int dim, Tensor index, Tensor source) -> Tensor
Tensor index_copy(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::index_copy(self, dim, index, source);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::index_copy", "")
        .typed<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>();
    return op.call(self, dim, index, source);
#endif
}

// aten::index_copy.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor
Tensor index_copy(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::index_copy_dimname(self, dim, index, source);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::index_copy", "dimname")
        .typed<Tensor (const Tensor &, Dimname, const Tensor &, const Tensor &)>();
    return op.call(self, dim, index, source);
#endif
}

// aten::index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor(a!)
Tensor & index_put_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::index_put_(self, indices, values, accumulate);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::index_put_", "")
        .typed<Tensor & (Tensor &, TensorList, const Tensor &, bool)>();
    return op.call(self, indices, values, accumulate);
#endif
}

// aten::index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor
Tensor index_put(const Tensor & self, TensorList indices, const Tensor & values, bool accumulate) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::index_put(self, indices, values, accumulate);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::index_put", "")
        .typed<Tensor (const Tensor &, TensorList, const Tensor &, bool)>();
    return op.call(self, indices, values, accumulate);
#endif
}

// aten::_index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> Tensor(a!)
Tensor & _index_put_impl_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate, bool unsafe) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_index_put_impl_(self, indices, values, accumulate, unsafe);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_index_put_impl_", "")
        .typed<Tensor & (Tensor &, TensorList, const Tensor &, bool, bool)>();
    return op.call(self, indices, values, accumulate, unsafe);
#endif
}

// aten::instance_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool use_input_stats, float momentum, float eps, bool cudnn_enabled) -> Tensor
Tensor instance_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::instance_norm(input, weight, bias, running_mean, running_var, use_input_stats, momentum, eps, cudnn_enabled);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::instance_norm", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double, bool)>();
    return op.call(input, weight, bias, running_mean, running_var, use_input_stats, momentum, eps, cudnn_enabled);
#endif
}

// aten::inverse(Tensor self) -> Tensor
Tensor inverse(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::inverse(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::inverse", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::inverse.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & inverse_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::inverse_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::inverse", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::_inverse_helper(Tensor self) -> Tensor
Tensor _inverse_helper(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_inverse_helper(self);
            break;
        default:
            AT_ERROR("_inverse_helper not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_inverse_helper", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::isclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> Tensor
Tensor isclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::isclose(self, other, rtol, atol, equal_nan);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::isclose", "")
        .typed<Tensor (const Tensor &, const Tensor &, double, double, bool)>();
    return op.call(self, other, rtol, atol, equal_nan);
#endif
}

// aten::isnan(Tensor self) -> Tensor
Tensor isnan(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::isnan(self);
            break;
        default:
            AT_ERROR("isnan not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::isnan", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::is_distributed(Tensor self) -> bool
bool is_distributed(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::is_distributed(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::is_distributed", "")
        .typed<bool (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::is_floating_point(Tensor self) -> bool
bool is_floating_point(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::is_floating_point(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::is_floating_point", "")
        .typed<bool (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::is_complex(Tensor self) -> bool
bool is_complex(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::is_complex(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::is_complex", "")
        .typed<bool (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::is_nonzero(Tensor self) -> bool
bool is_nonzero(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::is_nonzero(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::is_nonzero", "")
        .typed<bool (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::is_same_size(Tensor self, Tensor other) -> bool
bool is_same_size(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::is_same_size(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::is_same_size", "")
        .typed<bool (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::is_signed(Tensor self) -> bool
bool is_signed(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::is_signed(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::is_signed", "")
        .typed<bool (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::kl_div(Tensor self, Tensor target, int reduction=Mean, *, bool log_target=False) -> Tensor
Tensor kl_div(const Tensor & self, const Tensor & target, int64_t reduction, bool log_target) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::kl_div(self, target, reduction, log_target);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::kl_div", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t, bool)>();
    return op.call(self, target, reduction, log_target);
#endif
}

// aten::kl_div_backward(Tensor grad_output, Tensor self, Tensor target, int reduction=Mean, *, bool log_target=False) -> Tensor
Tensor kl_div_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, bool log_target) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, target);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::kl_div_backward(grad_output, self, target, reduction, log_target);
            break;
        default:
            AT_ERROR("kl_div_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::kl_div_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t, bool)>();
    return op.call(grad_output, self, target, reduction, log_target);
#endif
}

// aten::kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, int64_t dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::kthvalue(self, k, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::kthvalue", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, int64_t, bool)>();
    return op.call(self, k, dim, keepdim);
#endif
}

// aten::kthvalue.values(Tensor self, int k, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(values, indices, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::kthvalue_out_values(values, indices, self, k, dim, keepdim);
            break;
        default:
            AT_ERROR("kthvalue_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::kthvalue", "values")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, int64_t, bool)>();
    return op.call(values, indices, self, k, dim, keepdim);
#endif
}

// aten::kthvalue.dimname(Tensor self, int k, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, Dimname dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::kthvalue_dimname(self, k, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::kthvalue", "dimname")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, Dimname, bool)>();
    return op.call(self, k, dim, keepdim);
#endif
}

// aten::kthvalue.dimname_out(Tensor self, int k, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, Dimname dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::kthvalue_out_dimname_out(values, indices, self, k, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::kthvalue", "dimname_out")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, Dimname, bool)>();
    return op.call(values, indices, self, k, dim, keepdim);
#endif
}

// aten::layer_norm(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enable=True) -> Tensor
Tensor layer_norm(const Tensor & input, IntArrayRef normalized_shape, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enable) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::layer_norm(input, normalized_shape, weight, bias, eps, cudnn_enable);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::layer_norm", "")
        .typed<Tensor (const Tensor &, IntArrayRef, const Tensor &, const Tensor &, double, bool)>();
    return op.call(input, normalized_shape, weight, bias, eps, cudnn_enable);
#endif
}

// aten::native_layer_norm(Tensor input, Tensor? weight, Tensor? bias, int M, int N, float eps) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> native_layer_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t M, int64_t N, double eps) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::native_layer_norm(input, weight, bias, M, N, eps);
            break;
        default:
            AT_ERROR("native_layer_norm not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::native_layer_norm", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, double)>();
    return op.call(input, weight, bias, M, N, eps);
#endif
}

// aten::native_layer_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int M, int N, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> native_layer_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_out, input, mean, rstd, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::native_layer_norm_backward(grad_out, input, mean, rstd, weight, M, N, output_mask);
            break;
        default:
            AT_ERROR("native_layer_norm_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::native_layer_norm_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, std::array<bool,3>)>();
    return op.call(grad_out, input, mean, rstd, weight, M, N, output_mask);
#endif
}

// aten::linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor
Tensor linear(const Tensor & input, const Tensor & weight, const Tensor & bias) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::linear(input, weight, bias);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::linear", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(input, weight, bias);
#endif
}

// aten::mkldnn_linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor
Tensor mkldnn_linear(const Tensor & input, const Tensor & weight, const Tensor & bias) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("mkldnn_linear not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mkldnn_linear", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(input, weight, bias);
#endif
}

// aten::fbgemm_linear_int8_weight_fp32_activation(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor
Tensor fbgemm_linear_int8_weight_fp32_activation(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::fbgemm_linear_int8_weight_fp32_activation(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fbgemm_linear_int8_weight_fp32_activation", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &)>();
    return op.call(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
#endif
}

// aten::fbgemm_linear_int8_weight(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor
Tensor fbgemm_linear_int8_weight(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::fbgemm_linear_int8_weight(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fbgemm_linear_int8_weight", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &)>();
    return op.call(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
#endif
}

// aten::fbgemm_linear_quantize_weight(Tensor input) -> (Tensor, Tensor, float, int)
std::tuple<Tensor,Tensor,double,int64_t> fbgemm_linear_quantize_weight(const Tensor & input) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::fbgemm_linear_quantize_weight(input);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fbgemm_linear_quantize_weight", "")
        .typed<std::tuple<Tensor,Tensor,double,int64_t> (const Tensor &)>();
    return op.call(input);
#endif
}

// aten::fbgemm_pack_gemm_matrix_fp16(Tensor input) -> Tensor
Tensor fbgemm_pack_gemm_matrix_fp16(const Tensor & input) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::fbgemm_pack_gemm_matrix_fp16(input);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fbgemm_pack_gemm_matrix_fp16", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(input);
#endif
}

// aten::fbgemm_linear_fp16_weight_fp32_activation(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor
Tensor fbgemm_linear_fp16_weight_fp32_activation(const Tensor & input, const Tensor & packed_weight, const Tensor & bias) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::fbgemm_linear_fp16_weight_fp32_activation(input, packed_weight, bias);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fbgemm_linear_fp16_weight_fp32_activation", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(input, packed_weight, bias);
#endif
}

// aten::fbgemm_linear_fp16_weight(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor
Tensor fbgemm_linear_fp16_weight(const Tensor & input, const Tensor & packed_weight, const Tensor & bias) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::fbgemm_linear_fp16_weight(input, packed_weight, bias);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fbgemm_linear_fp16_weight", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(input, packed_weight, bias);
#endif
}

// aten::fbgemm_pack_quantized_matrix(Tensor input) -> Tensor
Tensor fbgemm_pack_quantized_matrix(const Tensor & input) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::fbgemm_pack_quantized_matrix(input);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fbgemm_pack_quantized_matrix", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(input);
#endif
}

// aten::fbgemm_pack_quantized_matrix.KN(Tensor input, int K, int N) -> Tensor
Tensor fbgemm_pack_quantized_matrix(const Tensor & input, int64_t K, int64_t N) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::fbgemm_pack_quantized_matrix_KN(input, K, N);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fbgemm_pack_quantized_matrix", "KN")
        .typed<Tensor (const Tensor &, int64_t, int64_t)>();
    return op.call(input, K, N);
#endif
}

// aten::linspace(Scalar start, Scalar end, int steps=100, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor linspace(Scalar start, Scalar end, int64_t steps, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::linspace(start, end, steps, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::linspace", "")
        .typed<Tensor (Scalar, Scalar, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(start, end, steps, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::linspace.out(Scalar start, Scalar end, int steps=100, *, Tensor(a!) out) -> Tensor(a!)
Tensor & linspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::linspace_out_out(out, start, end, steps);
            break;
        default:
            AT_ERROR("linspace_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::linspace", "out")
        .typed<Tensor & (Tensor &, Scalar, Scalar, int64_t)>();
    return op.call(out, start, end, steps);
#endif
}

// aten::log(Tensor self) -> Tensor
Tensor log(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::log(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::log_(Tensor(a!) self) -> Tensor(a!)
Tensor & log_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::log_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::log.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & log_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::log_out_out(out, self);
            break;
        default:
            AT_ERROR("log_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::log10(Tensor self) -> Tensor
Tensor log10(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::log10(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log10", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::log10_(Tensor(a!) self) -> Tensor(a!)
Tensor & log10_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::log10_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log10_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::log10.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & log10_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::log10_out_out(out, self);
            break;
        default:
            AT_ERROR("log10_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log10", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::log1p(Tensor self) -> Tensor
Tensor log1p(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::log1p(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log1p", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::log1p_(Tensor(a!) self) -> Tensor(a!)
Tensor & log1p_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::log1p_(self);
            break;
        default:
            AT_ERROR("log1p_ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log1p_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::log1p.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & log1p_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::log1p_out_out(out, self);
            break;
        default:
            AT_ERROR("log1p_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log1p", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::log2(Tensor self) -> Tensor
Tensor log2(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::log2(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log2", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::log2_(Tensor(a!) self) -> Tensor(a!)
Tensor & log2_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::log2_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log2_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::log2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & log2_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::log2_out_out(out, self);
            break;
        default:
            AT_ERROR("log2_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log2", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::logaddexp.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & logaddexp_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logaddexp_out_out(out, self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logaddexp", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::logaddexp(Tensor self, Tensor other) -> Tensor
Tensor logaddexp(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logaddexp(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logaddexp", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::logaddexp2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & logaddexp2_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logaddexp2_out_out(out, self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logaddexp2", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::logaddexp2(Tensor self, Tensor other) -> Tensor
Tensor logaddexp2(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logaddexp2(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logaddexp2", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::logdet(Tensor self) -> Tensor
Tensor logdet(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logdet(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logdet", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::logspace(Scalar start, Scalar end, int steps=100, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor logspace(Scalar start, Scalar end, int64_t steps, double base, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logspace(start, end, steps, base, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logspace", "")
        .typed<Tensor (Scalar, Scalar, int64_t, double, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(start, end, steps, base, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::logspace.out(Scalar start, Scalar end, int steps=100, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)
Tensor & logspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps, double base) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::logspace_out_out(out, start, end, steps, base);
            break;
        default:
            AT_ERROR("logspace_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logspace", "out")
        .typed<Tensor & (Tensor &, Scalar, Scalar, int64_t, double)>();
    return op.call(out, start, end, steps, base);
#endif
}

// aten::log_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor
Tensor log_softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::log_softmax_int(self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log_softmax", "int")
        .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
    return op.call(self, dim, dtype);
#endif
}

// aten::log_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
Tensor log_softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::log_softmax_Dimname(self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log_softmax", "Dimname")
        .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
    return op.call(self, dim, dtype);
#endif
}

// aten::_log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor
Tensor _log_softmax(const Tensor & self, int64_t dim, bool half_to_float) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_log_softmax(self, dim, half_to_float);
            break;
        default:
            AT_ERROR("_log_softmax not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_log_softmax", "")
        .typed<Tensor (const Tensor &, int64_t, bool)>();
    return op.call(self, dim, half_to_float);
#endif
}

// aten::_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor
Tensor _log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_log_softmax_backward_data(grad_output, output, dim, self);
            break;
        default:
            AT_ERROR("_log_softmax_backward_data not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_log_softmax_backward_data", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t, const Tensor &)>();
    return op.call(grad_output, output, dim, self);
#endif
}

// aten::_logcumsumexp(Tensor self, int dim) -> Tensor
Tensor _logcumsumexp(const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_logcumsumexp(self, dim);
            break;
        default:
            AT_ERROR("_logcumsumexp not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_logcumsumexp", "")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(self, dim);
#endif
}

// aten::_logcumsumexp.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)
Tensor & _logcumsumexp_out(Tensor & out, const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_logcumsumexp_out_out(out, self, dim);
            break;
        default:
            AT_ERROR("_logcumsumexp_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_logcumsumexp", "out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t)>();
    return op.call(out, self, dim);
#endif
}

// aten::logcumsumexp(Tensor self, int dim) -> Tensor
Tensor logcumsumexp(const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logcumsumexp(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logcumsumexp", "")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(self, dim);
#endif
}

// aten::logcumsumexp.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)
Tensor & logcumsumexp_out(Tensor & out, const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logcumsumexp_out_out(out, self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logcumsumexp", "out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t)>();
    return op.call(out, self, dim);
#endif
}

// aten::logcumsumexp.dimname(Tensor self, Dimname dim) -> Tensor
Tensor logcumsumexp(const Tensor & self, Dimname dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logcumsumexp_dimname(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logcumsumexp", "dimname")
        .typed<Tensor (const Tensor &, Dimname)>();
    return op.call(self, dim);
#endif
}

// aten::logcumsumexp.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)
Tensor & logcumsumexp_out(Tensor & out, const Tensor & self, Dimname dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logcumsumexp_out_dimname_out(out, self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logcumsumexp", "dimname_out")
        .typed<Tensor & (Tensor &, const Tensor &, Dimname)>();
    return op.call(out, self, dim);
#endif
}

// aten::logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> Tensor
Tensor logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logsumexp(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logsumexp", "")
        .typed<Tensor (const Tensor &, IntArrayRef, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & logsumexp_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logsumexp_out_out(out, self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logsumexp", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool)>();
    return op.call(out, self, dim, keepdim);
#endif
}

// aten::logsumexp.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor
Tensor logsumexp(const Tensor & self, DimnameList dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logsumexp_names(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logsumexp", "names")
        .typed<Tensor (const Tensor &, DimnameList, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::logsumexp.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & logsumexp_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::logsumexp_out_names_out(out, self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::logsumexp", "names_out")
        .typed<Tensor & (Tensor &, const Tensor &, DimnameList, bool)>();
    return op.call(out, self, dim, keepdim);
#endif
}

// aten::margin_ranking_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor
Tensor margin_ranking_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::margin_ranking_loss(input1, input2, target, margin, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::margin_ranking_loss", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, double, int64_t)>();
    return op.call(input1, input2, target, margin, reduction);
#endif
}

// aten::matmul(Tensor self, Tensor other) -> Tensor
Tensor matmul(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::matmul(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::matmul", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & matmul_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::matmul_out_out(out, self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::matmul", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::matrix_rank.tol(Tensor self, float tol, bool symmetric=False) -> Tensor
Tensor matrix_rank(const Tensor & self, double tol, bool symmetric) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::matrix_rank_tol(self, tol, symmetric);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::matrix_rank", "tol")
        .typed<Tensor (const Tensor &, double, bool)>();
    return op.call(self, tol, symmetric);
#endif
}

// aten::matrix_rank(Tensor self, bool symmetric=False) -> Tensor
Tensor matrix_rank(const Tensor & self, bool symmetric) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::matrix_rank(self, symmetric);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::matrix_rank", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, symmetric);
#endif
}

// aten::matrix_power(Tensor self, int n) -> Tensor
Tensor matrix_power(const Tensor & self, int64_t n) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::matrix_power(self, n);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::matrix_power", "")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(self, n);
#endif
}

// aten::max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> max(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::max_dim(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max", "dim")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::max_out_dim_max(max, max_values, self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max", "dim_max")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>();
    return op.call(max, max_values, self, dim, keepdim);
#endif
}

// aten::max_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor
Tensor max_values(const Tensor & self, IntArrayRef dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::max_values(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_values", "")
        .typed<Tensor (const Tensor &, IntArrayRef, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::max.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> max(const Tensor & self, Dimname dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::max_names_dim(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max", "names_dim")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, Dimname, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::max.names_dim_max(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, Dimname dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::max_out_names_dim_max(max, max_values, self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max", "names_dim_max")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname, bool)>();
    return op.call(max, max_values, self, dim, keepdim);
#endif
}

// aten::max_values.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor
Tensor max_values(const Tensor & self, DimnameList dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::max_values_names(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_values", "names")
        .typed<Tensor (const Tensor &, DimnameList, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::max_pool1d_with_indices(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> max_pool1d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::max_pool1d_with_indices(self, kernel_size, stride, padding, dilation, ceil_mode);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_pool1d_with_indices", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>();
    return op.call(self, kernel_size, stride, padding, dilation, ceil_mode);
#endif
}

// aten::max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> Tensor
Tensor max_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::max_pool1d(self, kernel_size, stride, padding, dilation, ceil_mode);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_pool1d", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>();
    return op.call(self, kernel_size, stride, padding, dilation, ceil_mode);
#endif
}

// aten::max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor
Tensor max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::max_pool2d(self, kernel_size, stride, padding, dilation, ceil_mode);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_pool2d", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>();
    return op.call(self, kernel_size, stride, padding, dilation, ceil_mode);
#endif
}

// aten::mkldnn_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor
Tensor mkldnn_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("mkldnn_max_pool2d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mkldnn_max_pool2d", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>();
    return op.call(self, kernel_size, stride, padding, dilation, ceil_mode);
#endif
}

// aten::quantized_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor
Tensor quantized_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::QuantizedCPU:
            return QuantizedCPUType::quantized_max_pool2d(self, kernel_size, stride, padding, dilation, ceil_mode);
            break;
        default:
            AT_ERROR("quantized_max_pool2d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::quantized_max_pool2d", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>();
    return op.call(self, kernel_size, stride, padding, dilation, ceil_mode);
#endif
}

// aten::max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> Tensor
Tensor max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::max_pool3d(self, kernel_size, stride, padding, dilation, ceil_mode);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_pool3d", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>();
    return op.call(self, kernel_size, stride, padding, dilation, ceil_mode);
#endif
}

// aten::mean(Tensor self, *, ScalarType? dtype=None) -> Tensor
Tensor mean(const Tensor & self, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::mean(self, dtype);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::mean(self, dtype);
            break;
        default:
            AT_ERROR("mean not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mean", "")
        .typed<Tensor (const Tensor &, c10::optional<ScalarType>)>();
    return op.call(self, dtype);
#endif
}

// aten::mean.dim(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
Tensor mean(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::mean_dim(self, dim, keepdim, dtype);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::mean_dim(self, dim, keepdim, dtype);
            break;
        #ifdef USE_VULKAN
        case Backend::Vulkan:
            return VulkanType::mean_dim(self, dim, keepdim, dtype);
            break;
        #endif
        default:
            AT_ERROR("mean not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mean", "dim")
        .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>)>();
    return op.call(self, dim, keepdim, dtype);
#endif
}

// aten::mean.out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
Tensor & mean_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::mean_out_out(out, self, dim, keepdim, dtype);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::mean_out_out(out, self, dim, keepdim, dtype);
            break;
        default:
            AT_ERROR("mean_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mean", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>)>();
    return op.call(out, self, dim, keepdim, dtype);
#endif
}

// aten::mean.names_dim(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
Tensor mean(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::mean_names_dim(self, dim, keepdim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mean", "names_dim")
        .typed<Tensor (const Tensor &, DimnameList, bool, c10::optional<ScalarType>)>();
    return op.call(self, dim, keepdim, dtype);
#endif
}

// aten::mean.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
Tensor & mean_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::mean_out_names_out(out, self, dim, keepdim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mean", "names_out")
        .typed<Tensor & (Tensor &, const Tensor &, DimnameList, bool, c10::optional<ScalarType>)>();
    return op.call(out, self, dim, keepdim, dtype);
#endif
}

// aten::median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> median(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::median_dim(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::median", "dim")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::median_out_dim_values(values, indices, self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::median", "dim_values")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>();
    return op.call(values, indices, self, dim, keepdim);
#endif
}

// aten::median.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> median(const Tensor & self, Dimname dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::median_names_dim(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::median", "names_dim")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, Dimname, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::median.names_dim_values(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::median_out_names_dim_values(values, indices, self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::median", "names_dim_values")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname, bool)>();
    return op.call(values, indices, self, dim, keepdim);
#endif
}

// aten::min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> min(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::min_dim(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::min", "dim")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::min_out_dim_min(min, min_indices, self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::min", "dim_min")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>();
    return op.call(min, min_indices, self, dim, keepdim);
#endif
}

// aten::min_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor
Tensor min_values(const Tensor & self, IntArrayRef dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::min_values(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::min_values", "")
        .typed<Tensor (const Tensor &, IntArrayRef, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::min.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> min(const Tensor & self, Dimname dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::min_names_dim(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::min", "names_dim")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, Dimname, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::min.names_dim_min(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, Dimname dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::min_out_names_dim_min(min, min_indices, self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::min", "names_dim_min")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname, bool)>();
    return op.call(min, min_indices, self, dim, keepdim);
#endif
}

// aten::min_values.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor
Tensor min_values(const Tensor & self, DimnameList dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::min_values_names(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::min_values", "names")
        .typed<Tensor (const Tensor &, DimnameList, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::mkldnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> Tensor
Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::mkldnn_convolution(self, weight, bias, padding, stride, dilation, groups);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mkldnn_convolution", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>();
    return op.call(self, weight, bias, padding, stride, dilation, groups);
#endif
}

// aten::mkldnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> Tensor
Tensor mkldnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::mkldnn_convolution_backward_input(self_size, grad_output, weight, padding, stride, dilation, groups, bias_defined);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mkldnn_convolution_backward_input", "")
        .typed<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool)>();
    return op.call(self_size, grad_output, weight, padding, stride, dilation, groups, bias_defined);
#endif
}

// aten::mkldnn_convolution_backward_weights(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> mkldnn_convolution_backward_weights(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::mkldnn_convolution_backward_weights(weight_size, grad_output, self, padding, stride, dilation, groups, bias_defined);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mkldnn_convolution_backward_weights", "")
        .typed<std::tuple<Tensor,Tensor> (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool)>();
    return op.call(weight_size, grad_output, self, padding, stride, dilation, groups, bias_defined);
#endif
}

// aten::mkldnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> mkldnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::mkldnn_convolution_backward(self, grad_output, weight, padding, stride, dilation, groups, output_mask);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mkldnn_convolution_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, std::array<bool,3>)>();
    return op.call(self, grad_output, weight, padding, stride, dilation, groups, output_mask);
#endif
}

// aten::miopen_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, weight, bias, running_mean, running_var);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_batch_norm not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_batch_norm", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double)>();
    return op.call(input, weight, bias, running_mean, running_var, training, exponential_average_factor, epsilon);
#endif
}

// aten::miopen_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, grad_output, weight, running_mean, running_var, save_mean, save_var);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_batch_norm_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_batch_norm_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double)>();
    return op.call(input, grad_output, weight, running_mean, running_var, save_mean, save_var, epsilon);
#endif
}

// aten::miopen_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor miopen_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_convolution not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_convolution", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::miopen_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor miopen_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_convolution_backward_input not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_convolution_backward_input", "")
        .typed<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::miopen_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> miopen_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, grad_output, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_convolution_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_convolution_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>)>();
    return op.call(self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);
#endif
}

// aten::miopen_convolution_backward_bias(Tensor grad_output) -> Tensor
Tensor miopen_convolution_backward_bias(const Tensor & grad_output) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_convolution_backward_bias not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_convolution_backward_bias", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(grad_output);
#endif
}

// aten::miopen_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor miopen_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_convolution_backward_weight not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_convolution_backward_weight", "")
        .typed<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::miopen_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_convolution_transpose not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_convolution_transpose", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(self, weight, bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::miopen_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> miopen_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, grad_output, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_convolution_transpose_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_convolution_transpose_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>)>();
    return op.call(self, grad_output, weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask);
#endif
}

// aten::miopen_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor miopen_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_convolution_transpose_backward_input not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_convolution_transpose_backward_input", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::miopen_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor miopen_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_convolution_transpose_backward_weight not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_convolution_transpose_backward_weight", "")
        .typed<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::miopen_depthwise_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor miopen_depthwise_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_depthwise_convolution not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_depthwise_convolution", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(self, weight, bias, padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::miopen_depthwise_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor miopen_depthwise_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_depthwise_convolution_backward_input not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_depthwise_convolution_backward_input", "")
        .typed<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(self_size, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::miopen_depthwise_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> miopen_depthwise_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, grad_output, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_depthwise_convolution_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_depthwise_convolution_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool, std::array<bool,3>)>();
    return op.call(self, grad_output, weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);
#endif
}

// aten::miopen_depthwise_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor
Tensor miopen_depthwise_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_depthwise_convolution_backward_weight not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_depthwise_convolution_backward_weight", "")
        .typed<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool, bool)>();
    return op.call(weight_size, grad_output, self, padding, stride, dilation, groups, benchmark, deterministic);
#endif
}

// aten::miopen_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> miopen_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, weight, hx, cx, dropout_state);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_rnn not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_rnn", "")
        .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const Tensor &)>();
    return op.call(input, weight, weight_stride0, hx, cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state);
#endif
}

// aten::miopen_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])
std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> miopen_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, weight, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, dropout_state, reserve);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("miopen_rnn_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::miopen_rnn_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> (const Tensor &, TensorList, int64_t, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t, bool, double, bool, bool, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,4>)>();
    return op.call(input, weight, weight_stride0, weight_buf, hx, cx, output, grad_output, grad_hy, grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, dropout_state, reserve, output_mask);
#endif
}

// aten::mm(Tensor self, Tensor mat2) -> Tensor
Tensor mm(const Tensor & self, const Tensor & mat2) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, mat2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::mm(self, mat2);
            break;
        default:
            AT_ERROR("mm not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mm", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, mat2);
#endif
}

// aten::mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)
Tensor & mm_out(Tensor & out, const Tensor & self, const Tensor & mat2) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, mat2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::mm_out_out(out, self, mat2);
            break;
        default:
            AT_ERROR("mm_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mm", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, mat2);
#endif
}

// aten::_sparse_mm(Tensor sparse, Tensor dense) -> Tensor
Tensor _sparse_mm(const Tensor & sparse, const Tensor & dense) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_sparse_mm(sparse, dense);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_mm", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(sparse, dense);
#endif
}

// aten::mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> mode(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::mode(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mode", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::mode_out_values(values, indices, self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mode", "values")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>();
    return op.call(values, indices, self, dim, keepdim);
#endif
}

// aten::mode.dimname(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> mode(const Tensor & self, Dimname dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::mode_dimname(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mode", "dimname")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, Dimname, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::mode.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::mode_out_dimname_out(values, indices, self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mode", "dimname_out")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname, bool)>();
    return op.call(values, indices, self, dim, keepdim);
#endif
}

// aten::mul.Tensor(Tensor self, Tensor other) -> Tensor
Tensor mul(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::mul_Tensor(self, other);
            break;
        default:
            AT_ERROR("mul not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mul", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & mul_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::mul_out_out(out, self, other);
            break;
        default:
            AT_ERROR("mul_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mul", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::mul.Scalar(Tensor self, Scalar other) -> Tensor
Tensor mul(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::mul_Scalar(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mul", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::mv(Tensor self, Tensor vec) -> Tensor
Tensor mv(const Tensor & self, const Tensor & vec) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, vec);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::mv(self, vec);
            break;
        default:
            AT_ERROR("mv not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mv", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, vec);
#endif
}

// aten::mv.out(Tensor self, Tensor vec, *, Tensor(a!) out) -> Tensor(a!)
Tensor & mv_out(Tensor & out, const Tensor & self, const Tensor & vec) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::mv_out_out(out, self, vec);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mv", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, vec);
#endif
}

// aten::mvlgamma(Tensor self, int p) -> Tensor
Tensor mvlgamma(const Tensor & self, int64_t p) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::mvlgamma(self, p);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mvlgamma", "")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(self, p);
#endif
}

// aten::narrow(Tensor(a) self, int dim, int start, int length) -> Tensor(a)
Tensor narrow(const Tensor & self, int64_t dim, int64_t start, int64_t length) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::narrow(self, dim, start, length);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::narrow", "")
        .typed<Tensor (const Tensor &, int64_t, int64_t, int64_t)>();
    return op.call(self, dim, start, length);
#endif
}

// aten::narrow.Tensor(Tensor(a) self, int dim, Tensor start, int length) -> Tensor(a)
Tensor narrow(const Tensor & self, int64_t dim, const Tensor & start, int64_t length) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::narrow_Tensor(self, dim, start, length);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::narrow", "Tensor")
        .typed<Tensor (const Tensor &, int64_t, const Tensor &, int64_t)>();
    return op.call(self, dim, start, length);
#endif
}

// aten::native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> native_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, weight, bias, running_mean, running_var);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::native_batch_norm(input, weight, bias, running_mean, running_var, training, momentum, eps);
            break;
        default:
            AT_ERROR("native_batch_norm not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::native_batch_norm", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double)>();
    return op.call(input, weight, bias, running_mean, running_var, training, momentum, eps);
#endif
}

// aten::native_batch_norm.out(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, *, Tensor(a!) out, Tensor(b!) save_mean, Tensor(c!) save_invstd) -> (Tensor(a!), Tensor(b!), Tensor(c!))
std::tuple<Tensor &,Tensor &,Tensor &> native_batch_norm_out(Tensor & out, Tensor & save_mean, Tensor & save_invstd, const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, save_mean, save_invstd, input, weight, bias, running_mean, running_var);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("native_batch_norm_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::native_batch_norm", "out")
        .typed<std::tuple<Tensor &,Tensor &,Tensor &> (Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double)>();
    return op.call(out, save_mean, save_invstd, input, weight, bias, running_mean, running_var, training, momentum, eps);
#endif
}

// aten::batch_norm_stats(Tensor input, float eps) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> batch_norm_stats(const Tensor & input, double eps) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("batch_norm_stats not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::batch_norm_stats", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, double)>();
    return op.call(input, eps);
#endif
}

// aten::batch_norm_elemt(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps) -> Tensor
Tensor batch_norm_elemt(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & mean, const Tensor & invstd, double eps) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, weight, bias, mean, invstd);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("batch_norm_elemt not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::batch_norm_elemt", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double)>();
    return op.call(input, weight, bias, mean, invstd, eps);
#endif
}

// aten::batch_norm_elemt.out(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps, *, Tensor(a!) out) -> Tensor(a!)
Tensor & batch_norm_elemt_out(Tensor & out, const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & mean, const Tensor & invstd, double eps) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, input, weight, bias, mean, invstd);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("batch_norm_elemt_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::batch_norm_elemt", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double)>();
    return op.call(out, input, weight, bias, mean, invstd, eps);
#endif
}

// aten::batch_norm_gather_stats(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int count) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> batch_norm_gather_stats(const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & running_mean, const Tensor & running_var, double momentum, double eps, int64_t count) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, mean, invstd, running_mean, running_var);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("batch_norm_gather_stats not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::batch_norm_gather_stats", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double, double, int64_t)>();
    return op.call(input, mean, invstd, running_mean, running_var, momentum, eps, count);
#endif
}

// aten::batch_norm_gather_stats_with_counts(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, Tensor counts) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> batch_norm_gather_stats_with_counts(const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & running_mean, const Tensor & running_var, double momentum, double eps, const Tensor & counts) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, mean, invstd, running_mean, running_var, counts);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("batch_norm_gather_stats_with_counts not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::batch_norm_gather_stats_with_counts", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, double, double, const Tensor &)>();
    return op.call(input, mean, invstd, running_mean, running_var, momentum, eps, counts);
#endif
}

// aten::native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_out, input, weight, running_mean, running_var, save_mean, save_invstd);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::native_batch_norm_backward(grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask);
            break;
        default:
            AT_ERROR("native_batch_norm_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::native_batch_norm_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, std::array<bool,3>)>();
    return op.call(grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask);
#endif
}

// aten::batch_norm_backward_reduce(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, bool input_g, bool weight_g, bool bias_g) -> (Tensor, Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor,Tensor> batch_norm_backward_reduce(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & weight, bool input_g, bool weight_g, bool bias_g) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_out, input, mean, invstd, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("batch_norm_backward_reduce not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::batch_norm_backward_reduce", "")
        .typed<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, bool, bool)>();
    return op.call(grad_out, input, mean, invstd, weight, input_g, weight_g, bias_g);
#endif
}

// aten::batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor mean_dy, Tensor mean_dy_xmu) -> Tensor
Tensor batch_norm_backward_elemt(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_out, input, mean, invstd, weight, mean_dy, mean_dy_xmu);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("batch_norm_backward_elemt not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::batch_norm_backward_elemt", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(grad_out, input, mean, invstd, weight, mean_dy, mean_dy_xmu);
#endif
}

// aten::batch_norm_update_stats(Tensor input, Tensor? running_mean, Tensor? running_var, float momentum) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> batch_norm_update_stats(const Tensor & input, const Tensor & running_mean, const Tensor & running_var, double momentum) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input, running_mean, running_var);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::batch_norm_update_stats(input, running_mean, running_var, momentum);
            break;
        default:
            AT_ERROR("batch_norm_update_stats not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::batch_norm_update_stats", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, double)>();
    return op.call(input, running_mean, running_var, momentum);
#endif
}

// aten::is_vulkan_available() -> bool
bool is_vulkan_available() {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::is_vulkan_available();
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::is_vulkan_available", "")
        .typed<bool ()>();
    return op.call();
#endif
}

// aten::_nnpack_available() -> bool
bool _nnpack_available() {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_nnpack_available();
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_nnpack_available", "")
        .typed<bool ()>();
    return op.call();
#endif
}

// aten::_nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding, int[2] stride=1) -> Tensor
Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_nnpack_spatial_convolution(input, weight, bias, padding, stride);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_nnpack_spatial_convolution", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef)>();
    return op.call(input, weight, bias, padding, stride);
#endif
}

// aten::_nnpack_spatial_convolution_backward(Tensor input, Tensor grad_output, Tensor weight, int[2] padding, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> _nnpack_spatial_convolution_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, std::array<bool,3> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_nnpack_spatial_convolution_backward(input, grad_output, weight, padding, output_mask);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_nnpack_spatial_convolution_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, std::array<bool,3>)>();
    return op.call(input, grad_output, weight, padding, output_mask);
#endif
}

// aten::_nnpack_spatial_convolution_backward_input(Tensor input, Tensor grad_output, Tensor weight, int[2] padding) -> Tensor
Tensor _nnpack_spatial_convolution_backward_input(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_nnpack_spatial_convolution_backward_input(input, grad_output, weight, padding);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_nnpack_spatial_convolution_backward_input", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(input, grad_output, weight, padding);
#endif
}

// aten::_nnpack_spatial_convolution_backward_weight(Tensor input, int[] weightsize, Tensor grad_output, int[2] padding) -> Tensor
Tensor _nnpack_spatial_convolution_backward_weight(const Tensor & input, IntArrayRef weightsize, const Tensor & grad_output, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_nnpack_spatial_convolution_backward_weight(input, weightsize, grad_output, padding);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_nnpack_spatial_convolution_backward_weight", "")
        .typed<Tensor (const Tensor &, IntArrayRef, const Tensor &, IntArrayRef)>();
    return op.call(input, weightsize, grad_output, padding);
#endif
}

// aten::ones.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor ones(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::ones_names(size, names, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ones", "names")
        .typed<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &)>();
    return op.call(size, names, options);
#endif
}

// aten::ones(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor ones(IntArrayRef size, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::ones(size, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ones", "")
        .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::ones.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)
Tensor & ones_out(Tensor & out, IntArrayRef size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::ones_out_out(out, size);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ones", "out")
        .typed<Tensor & (Tensor &, IntArrayRef)>();
    return op.call(out, size);
#endif
}

// aten::ones_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
Tensor ones_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::ones_like(self, options, memory_format);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ones_like", "")
        .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
    return op.call(self, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), c10::impl::process_memory_format(options, memory_format));
#endif
}

// aten::pairwise_distance(Tensor x1, Tensor x2, float p=2, float eps=1e-06, bool keepdim=False) -> Tensor
Tensor pairwise_distance(const Tensor & x1, const Tensor & x2, double p, double eps, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::pairwise_distance(x1, x2, p, eps, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::pairwise_distance", "")
        .typed<Tensor (const Tensor &, const Tensor &, double, double, bool)>();
    return op.call(x1, x2, p, eps, keepdim);
#endif
}

// aten::cdist(Tensor x1, Tensor x2, float p=2, int? compute_mode=None) -> Tensor
Tensor cdist(const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cdist(x1, x2, p, compute_mode);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cdist", "")
        .typed<Tensor (const Tensor &, const Tensor &, double, c10::optional<int64_t>)>();
    return op.call(x1, x2, p, compute_mode);
#endif
}

// aten::_euclidean_dist(Tensor x1, Tensor x2) -> Tensor
Tensor _euclidean_dist(const Tensor & x1, const Tensor & x2) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_euclidean_dist(x1, x2);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_euclidean_dist", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(x1, x2);
#endif
}

// aten::_cdist_forward(Tensor x1, Tensor x2, float p, int? compute_mode) -> Tensor
Tensor _cdist_forward(const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_cdist_forward(x1, x2, p, compute_mode);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cdist_forward", "")
        .typed<Tensor (const Tensor &, const Tensor &, double, c10::optional<int64_t>)>();
    return op.call(x1, x2, p, compute_mode);
#endif
}

// aten::_cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> Tensor
Tensor _cdist_backward(const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_cdist_backward(grad, x1, x2, p, cdist);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cdist_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, double, const Tensor &)>();
    return op.call(grad, x1, x2, p, cdist);
#endif
}

// aten::pdist(Tensor self, float p=2) -> Tensor
Tensor pdist(const Tensor & self, double p) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::pdist(self, p);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::pdist", "")
        .typed<Tensor (const Tensor &, double)>();
    return op.call(self, p);
#endif
}

// aten::_pdist_forward(Tensor self, float p=2) -> Tensor
Tensor _pdist_forward(const Tensor & self, double p) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_pdist_forward(self, p);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_pdist_forward", "")
        .typed<Tensor (const Tensor &, double)>();
    return op.call(self, p);
#endif
}

// aten::_pdist_backward(Tensor grad, Tensor self, float p, Tensor pdist) -> Tensor
Tensor _pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_pdist_backward(grad, self, p, pdist);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_pdist_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, double, const Tensor &)>();
    return op.call(grad, self, p, pdist);
#endif
}

// aten::cosine_similarity(Tensor x1, Tensor x2, int dim=1, float eps=1e-08) -> Tensor
Tensor cosine_similarity(const Tensor & x1, const Tensor & x2, int64_t dim, double eps) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cosine_similarity(x1, x2, dim, eps);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cosine_similarity", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t, double)>();
    return op.call(x1, x2, dim, eps);
#endif
}

// aten::pixel_shuffle(Tensor self, int upscale_factor) -> Tensor
Tensor pixel_shuffle(const Tensor & self, int64_t upscale_factor) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::pixel_shuffle(self, upscale_factor);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::pixel_shuffle", "")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(self, upscale_factor);
#endif
}

// aten::channel_shuffle(Tensor self, int groups) -> Tensor
Tensor channel_shuffle(const Tensor & self, int64_t groups) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::channel_shuffle(self, groups);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::channel_shuffle(self, groups);
            break;
        default:
            AT_ERROR("channel_shuffle not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::channel_shuffle", "")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(self, groups);
#endif
}

// aten::pinverse(Tensor self, float rcond=1e-15) -> Tensor
Tensor pinverse(const Tensor & self, double rcond) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::pinverse(self, rcond);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::pinverse", "")
        .typed<Tensor (const Tensor &, double)>();
    return op.call(self, rcond);
#endif
}

// aten::poisson_nll_loss(Tensor input, Tensor target, bool log_input, bool full, float eps, int reduction) -> Tensor
Tensor poisson_nll_loss(const Tensor & input, const Tensor & target, bool log_input, bool full, double eps, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::poisson_nll_loss(input, target, log_input, full, eps, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::poisson_nll_loss", "")
        .typed<Tensor (const Tensor &, const Tensor &, bool, bool, double, int64_t)>();
    return op.call(input, target, log_input, full, eps, reduction);
#endif
}

// aten::rad2deg(Tensor self) -> Tensor
Tensor rad2deg(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rad2deg(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rad2deg", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::rad2deg_(Tensor(a!) self) -> Tensor(a!)
Tensor & rad2deg_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rad2deg_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rad2deg_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::rad2deg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & rad2deg_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rad2deg_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rad2deg", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::deg2rad(Tensor self) -> Tensor
Tensor deg2rad(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::deg2rad(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::deg2rad", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::deg2rad_(Tensor(a!) self) -> Tensor(a!)
Tensor & deg2rad_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::deg2rad_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::deg2rad_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::deg2rad.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & deg2rad_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::deg2rad_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::deg2rad", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::scalar_tensor(Scalar s, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor scalar_tensor(Scalar s, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::scalar_tensor(s, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::scalar_tensor", "")
        .typed<Tensor (Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(s, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::rand.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor rand(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rand_names(size, names, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rand", "names")
        .typed<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &)>();
    return op.call(size, names, options);
#endif
}

// aten::rand.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor rand(IntArrayRef size, c10::optional<Generator> generator, c10::optional<DimnameList> names, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rand_generator_with_names(size, generator, names, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rand", "generator_with_names")
        .typed<Tensor (IntArrayRef, c10::optional<Generator>, c10::optional<DimnameList>, const TensorOptions &)>();
    return op.call(size, generator, names, options);
#endif
}

// aten::rand(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor rand(IntArrayRef size, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rand(size, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rand", "")
        .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::rand.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor rand(IntArrayRef size, c10::optional<Generator> generator, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rand_generator(size, generator, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rand", "generator")
        .typed<Tensor (IntArrayRef, c10::optional<Generator>, const TensorOptions &)>();
    return op.call(size, generator, options);
#endif
}

// aten::rand.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)
Tensor & rand_out(Tensor & out, IntArrayRef size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rand_out_out(out, size);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rand", "out")
        .typed<Tensor & (Tensor &, IntArrayRef)>();
    return op.call(out, size);
#endif
}

// aten::rand.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)
Tensor & rand_out(Tensor & out, IntArrayRef size, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rand_out_generator_out(out, size, generator);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rand", "generator_out")
        .typed<Tensor & (Tensor &, IntArrayRef, c10::optional<Generator>)>();
    return op.call(out, size, generator);
#endif
}

// aten::rand_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
Tensor rand_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rand_like(self, options, memory_format);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rand_like", "")
        .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
    return op.call(self, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), c10::impl::process_memory_format(options, memory_format));
#endif
}

// aten::randint(int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor randint(int64_t high, IntArrayRef size, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randint(high, size, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randint", "")
        .typed<Tensor (int64_t, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(high, size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::randint.generator(int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor randint(int64_t high, IntArrayRef size, c10::optional<Generator> generator, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randint_generator(high, size, generator, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randint", "generator")
        .typed<Tensor (int64_t, IntArrayRef, c10::optional<Generator>, const TensorOptions &)>();
    return op.call(high, size, generator, options);
#endif
}

// aten::randint.low(int low, int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor randint(int64_t low, int64_t high, IntArrayRef size, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randint_low(low, high, size, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randint", "low")
        .typed<Tensor (int64_t, int64_t, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(low, high, size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::randint.low_generator(int low, int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor randint(int64_t low, int64_t high, IntArrayRef size, c10::optional<Generator> generator, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randint_low_generator(low, high, size, generator, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randint", "low_generator")
        .typed<Tensor (int64_t, int64_t, IntArrayRef, c10::optional<Generator>, const TensorOptions &)>();
    return op.call(low, high, size, generator, options);
#endif
}

// aten::randint.out(int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)
Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randint_out_out(out, high, size);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randint", "out")
        .typed<Tensor & (Tensor &, int64_t, IntArrayRef)>();
    return op.call(out, high, size);
#endif
}

// aten::randint.generator_out(int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)
Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randint_out_generator_out(out, high, size, generator);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randint", "generator_out")
        .typed<Tensor & (Tensor &, int64_t, IntArrayRef, c10::optional<Generator>)>();
    return op.call(out, high, size, generator);
#endif
}

// aten::randint.low_out(int low, int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)
Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randint_out_low_out(out, low, high, size);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randint", "low_out")
        .typed<Tensor & (Tensor &, int64_t, int64_t, IntArrayRef)>();
    return op.call(out, low, high, size);
#endif
}

// aten::randint.low_generator_out(int low, int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)
Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randint_out_low_generator_out(out, low, high, size, generator);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randint", "low_generator_out")
        .typed<Tensor & (Tensor &, int64_t, int64_t, IntArrayRef, c10::optional<Generator>)>();
    return op.call(out, low, high, size, generator);
#endif
}

// aten::randint_like(Tensor self, int high, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
Tensor randint_like(const Tensor & self, int64_t high, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randint_like(self, high, options, memory_format);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randint_like", "")
        .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
    return op.call(self, high, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), c10::impl::process_memory_format(options, memory_format));
#endif
}

// aten::randint_like.low_dtype(Tensor self, int low, int high, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
Tensor randint_like(const Tensor & self, int64_t low, int64_t high, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randint_like_low_dtype(self, low, high, options, memory_format);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randint_like", "low_dtype")
        .typed<Tensor (const Tensor &, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
    return op.call(self, low, high, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), c10::impl::process_memory_format(options, memory_format));
#endif
}

// aten::randn(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor randn(IntArrayRef size, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randn(size, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randn", "")
        .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::randn.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor randn(IntArrayRef size, c10::optional<Generator> generator, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randn_generator(size, generator, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randn", "generator")
        .typed<Tensor (IntArrayRef, c10::optional<Generator>, const TensorOptions &)>();
    return op.call(size, generator, options);
#endif
}

// aten::randn.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor randn(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randn_names(size, names, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randn", "names")
        .typed<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &)>();
    return op.call(size, names, options);
#endif
}

// aten::randn.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor randn(IntArrayRef size, c10::optional<Generator> generator, c10::optional<DimnameList> names, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randn_generator_with_names(size, generator, names, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randn", "generator_with_names")
        .typed<Tensor (IntArrayRef, c10::optional<Generator>, c10::optional<DimnameList>, const TensorOptions &)>();
    return op.call(size, generator, names, options);
#endif
}

// aten::randn.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)
Tensor & randn_out(Tensor & out, IntArrayRef size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randn_out_out(out, size);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randn", "out")
        .typed<Tensor & (Tensor &, IntArrayRef)>();
    return op.call(out, size);
#endif
}

// aten::randn.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)
Tensor & randn_out(Tensor & out, IntArrayRef size, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randn_out_generator_out(out, size, generator);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randn", "generator_out")
        .typed<Tensor & (Tensor &, IntArrayRef, c10::optional<Generator>)>();
    return op.call(out, size, generator);
#endif
}

// aten::randn_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
Tensor randn_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randn_like(self, options, memory_format);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randn_like", "")
        .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
    return op.call(self, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), c10::impl::process_memory_format(options, memory_format));
#endif
}

// aten::randperm(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor randperm(int64_t n, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randperm(n, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randperm", "")
        .typed<Tensor (int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(n, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::randperm.generator(int n, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor randperm(int64_t n, c10::optional<Generator> generator, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randperm_generator(n, generator, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randperm", "generator")
        .typed<Tensor (int64_t, c10::optional<Generator>, const TensorOptions &)>();
    return op.call(n, generator, options);
#endif
}

// aten::randperm.out(int n, *, Tensor(a!) out) -> Tensor(a!)
Tensor & randperm_out(Tensor & out, int64_t n) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::randperm_out_out(out, n);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randperm", "out")
        .typed<Tensor & (Tensor &, int64_t)>();
    return op.call(out, n);
#endif
}

// aten::randperm.generator_out(int n, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)
Tensor & randperm_out(Tensor & out, int64_t n, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::randperm_out_generator_out(out, n, generator);
            break;
        default:
            AT_ERROR("randperm_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::randperm", "generator_out")
        .typed<Tensor & (Tensor &, int64_t, c10::optional<Generator>)>();
    return op.call(out, n, generator);
#endif
}

// aten::range.step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor range(Scalar start, Scalar end, Scalar step, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::range_step(start, end, step, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::range", "step")
        .typed<Tensor (Scalar, Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(start, end, step, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::range(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor range(Scalar start, Scalar end, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::range(start, end, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::range", "")
        .typed<Tensor (Scalar, Scalar, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(start, end, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)
Tensor & range_out(Tensor & out, Scalar start, Scalar end, Scalar step) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::range_out_out(out, start, end, step);
            break;
        default:
            AT_ERROR("range_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::range", "out")
        .typed<Tensor & (Tensor &, Scalar, Scalar, Scalar)>();
    return op.call(out, start, end, step);
#endif
}

// aten::reciprocal(Tensor self) -> Tensor
Tensor reciprocal(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::reciprocal(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::reciprocal", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::reciprocal_(Tensor(a!) self) -> Tensor(a!)
Tensor & reciprocal_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::reciprocal_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::reciprocal_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::reciprocal.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & reciprocal_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::reciprocal_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::reciprocal", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::neg(Tensor self) -> Tensor
Tensor neg(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::neg(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::neg", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::neg_(Tensor(a!) self) -> Tensor(a!)
Tensor & neg_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::neg_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::neg_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::neg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & neg_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::neg_out_out(out, self);
            break;
        default:
            AT_ERROR("neg_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::neg", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::repeat_interleave.Tensor(Tensor repeats) -> Tensor
Tensor repeat_interleave(const Tensor & repeats) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(repeats);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::repeat_interleave_Tensor(repeats);
            break;
        default:
            AT_ERROR("repeat_interleave not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::repeat_interleave", "Tensor")
        .typed<Tensor (const Tensor &)>();
    return op.call(repeats);
#endif
}

// aten::repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None) -> Tensor
Tensor repeat_interleave(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::repeat_interleave_self_Tensor(self, repeats, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::repeat_interleave", "self_Tensor")
        .typed<Tensor (const Tensor &, const Tensor &, c10::optional<int64_t>)>();
    return op.call(self, repeats, dim);
#endif
}

// aten::repeat_interleave.self_int(Tensor self, int repeats, int? dim=None) -> Tensor
Tensor repeat_interleave(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::repeat_interleave_self_int(self, repeats, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::repeat_interleave", "self_int")
        .typed<Tensor (const Tensor &, int64_t, c10::optional<int64_t>)>();
    return op.call(self, repeats, dim);
#endif
}

// aten::reshape(Tensor(a) self, int[] shape) -> Tensor(a)
Tensor reshape(const Tensor & self, IntArrayRef shape) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::reshape(self, shape);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::reshape", "")
        .typed<Tensor (const Tensor &, IntArrayRef)>();
    return op.call(self, shape);
#endif
}

// aten::_mkldnn_reshape(Tensor self, int[] shape) -> Tensor
Tensor _mkldnn_reshape(const Tensor & self, IntArrayRef shape) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_mkldnn_reshape not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_mkldnn_reshape", "")
        .typed<Tensor (const Tensor &, IntArrayRef)>();
    return op.call(self, shape);
#endif
}

// aten::round(Tensor self) -> Tensor
Tensor round(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::round(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::round", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::round_(Tensor(a!) self) -> Tensor(a!)
Tensor & round_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::round_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::round_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::round.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & round_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::round_out_out(out, self);
            break;
        default:
            AT_ERROR("round_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::round", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::rrelu(Tensor self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor
Tensor rrelu(const Tensor & self, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rrelu(self, lower, upper, training, generator);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rrelu", "")
        .typed<Tensor (const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>)>();
    return op.call(self, lower, upper, training, generator);
#endif
}

// aten::rrelu_(Tensor(a!) self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)
Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rrelu_(self, lower, upper, training, generator);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rrelu_", "")
        .typed<Tensor & (Tensor &, Scalar, Scalar, bool, c10::optional<Generator>)>();
    return op.call(self, lower, upper, training, generator);
#endif
}

// aten::relu(Tensor self) -> Tensor
Tensor relu(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::relu(self);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::relu(self);
            break;
        default:
            AT_ERROR("relu not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::relu", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::relu_(Tensor(a!) self) -> Tensor(a!)
Tensor & relu_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::relu_(self);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::relu_(self);
            break;
        default:
            AT_ERROR("relu_ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::relu_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::prelu(Tensor self, Tensor weight) -> Tensor
Tensor prelu(const Tensor & self, const Tensor & weight) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::prelu(self, weight);
            break;
        default:
            AT_ERROR("prelu not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::prelu", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, weight);
#endif
}

// aten::prelu_backward(Tensor grad_output, Tensor self, Tensor weight) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> prelu_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::prelu_backward(grad_output, self, weight);
            break;
        default:
            AT_ERROR("prelu_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::prelu_backward", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(grad_output, self, weight);
#endif
}

// aten::gelu(Tensor self) -> Tensor
Tensor gelu(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::gelu(self);
            break;
        default:
            AT_ERROR("gelu not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::gelu", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::gelu_backward(Tensor grad, Tensor self) -> Tensor
Tensor gelu_backward(const Tensor & grad, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::gelu_backward(grad, self);
            break;
        default:
            AT_ERROR("gelu_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::gelu_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(grad, self);
#endif
}

// aten::hardshrink(Tensor self, Scalar lambd=0.5) -> Tensor
Tensor hardshrink(const Tensor & self, Scalar lambd) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::hardshrink(self, lambd);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hardshrink", "")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, lambd);
#endif
}

// aten::hardshrink_backward(Tensor grad_out, Tensor self, Scalar lambd) -> Tensor
Tensor hardshrink_backward(const Tensor & grad_out, const Tensor & self, Scalar lambd) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::hardshrink_backward(grad_out, self, lambd);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hardshrink_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, Scalar)>();
    return op.call(grad_out, self, lambd);
#endif
}

// aten::rsqrt(Tensor self) -> Tensor
Tensor rsqrt(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rsqrt(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rsqrt", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::rsqrt_(Tensor(a!) self) -> Tensor(a!)
Tensor & rsqrt_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rsqrt_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rsqrt_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::rsqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & rsqrt_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::rsqrt_out_out(out, self);
            break;
        default:
            AT_ERROR("rsqrt_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rsqrt", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::select.Dimname(Tensor(a) self, Dimname dim, int index) -> Tensor(a)
Tensor select(const Tensor & self, Dimname dim, int64_t index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::select_Dimname(self, dim, index);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::select", "Dimname")
        .typed<Tensor (const Tensor &, Dimname, int64_t)>();
    return op.call(self, dim, index);
#endif
}

// aten::select.int(Tensor(a) self, int dim, int index) -> Tensor(a)
Tensor select(const Tensor & self, int64_t dim, int64_t index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::select_int(self, dim, index);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::select", "int")
        .typed<Tensor (const Tensor &, int64_t, int64_t)>();
    return op.call(self, dim, index);
#endif
}

// aten::selu(Tensor self) -> Tensor
Tensor selu(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::selu(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::selu", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::selu_(Tensor(a!) self) -> Tensor(a!)
Tensor & selu_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::selu_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::selu_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::celu(Tensor self, Scalar alpha=1.0) -> Tensor
Tensor celu(const Tensor & self, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::celu(self, alpha);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::celu", "")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, alpha);
#endif
}

// aten::celu_(Tensor(a!) self, Scalar alpha=1.0) -> Tensor(a!)
Tensor & celu_(Tensor & self, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::celu_(self, alpha);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::celu_", "")
        .typed<Tensor & (Tensor &, Scalar)>();
    return op.call(self, alpha);
#endif
}

// aten::sigmoid(Tensor self) -> Tensor
Tensor sigmoid(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::sigmoid(self);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::sigmoid(self);
            break;
        default:
            AT_ERROR("sigmoid not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sigmoid", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::sigmoid_(Tensor(a!) self) -> Tensor(a!)
Tensor & sigmoid_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::sigmoid_(self);
            break;
        default:
            AT_ERROR("sigmoid_ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sigmoid_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & sigmoid_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sigmoid_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sigmoid", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::sin(Tensor self) -> Tensor
Tensor sin(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sin(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sin", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::sin_(Tensor(a!) self) -> Tensor(a!)
Tensor & sin_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sin_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sin_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::sin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & sin_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::sin_out_out(out, self);
            break;
        default:
            AT_ERROR("sin_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sin", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::sinh(Tensor self) -> Tensor
Tensor sinh(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sinh(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sinh", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::sinh_(Tensor(a!) self) -> Tensor(a!)
Tensor & sinh_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sinh_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sinh_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::sinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & sinh_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sinh_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sinh", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::detach(Tensor(a) self) -> Tensor(a)
Tensor detach(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::detach(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::detach", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::detach_(Tensor(a!) self) -> Tensor(a!)
Tensor & detach_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::detach_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::detach_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::size.int(Tensor self, int dim) -> int
int64_t size(const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::size_int(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::size", "int")
        .typed<int64_t (const Tensor &, int64_t)>();
    return op.call(self, dim);
#endif
}

// aten::size.Dimname(Tensor self, Dimname dim) -> int
int64_t size(const Tensor & self, Dimname dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::size_Dimname(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::size", "Dimname")
        .typed<int64_t (const Tensor &, Dimname)>();
    return op.call(self, dim);
#endif
}

// aten::slice.Tensor(Tensor(a) self, int dim=0, int start=0, int end=9223372036854775807, int step=1) -> Tensor(a)
Tensor slice(const Tensor & self, int64_t dim, int64_t start, int64_t end, int64_t step) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::slice_Tensor(self, dim, start, end, step);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slice", "Tensor")
        .typed<Tensor (const Tensor &, int64_t, int64_t, int64_t, int64_t)>();
    return op.call(self, dim, start, end, step);
#endif
}

// aten::slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)
std::tuple<Tensor,Tensor> slogdet(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::slogdet(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slogdet", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::smm(Tensor self, Tensor mat2) -> Tensor
Tensor smm(const Tensor & self, const Tensor & mat2) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::smm(self, mat2);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::smm", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, mat2);
#endif
}

// aten::softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor
Tensor softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::softmax_int(self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::softmax", "int")
        .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
    return op.call(self, dim, dtype);
#endif
}

// aten::softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
Tensor softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::softmax_Dimname(self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::softmax", "Dimname")
        .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
    return op.call(self, dim, dtype);
#endif
}

// aten::_softmax(Tensor self, int dim, bool half_to_float) -> Tensor
Tensor _softmax(const Tensor & self, int64_t dim, bool half_to_float) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_softmax(self, dim, half_to_float);
            break;
        default:
            AT_ERROR("_softmax not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_softmax", "")
        .typed<Tensor (const Tensor &, int64_t, bool)>();
    return op.call(self, dim, half_to_float);
#endif
}

// aten::_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor
Tensor _softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_softmax_backward_data(grad_output, output, dim, self);
            break;
        default:
            AT_ERROR("_softmax_backward_data not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_softmax_backward_data", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t, const Tensor &)>();
    return op.call(grad_output, output, dim, self);
#endif
}

// aten::split.Tensor(Tensor(a) self, int split_size, int dim=0) -> Tensor(a)[]
std::vector<Tensor> split(const Tensor & self, int64_t split_size, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::split_Tensor(self, split_size, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::split", "Tensor")
        .typed<std::vector<Tensor> (const Tensor &, int64_t, int64_t)>();
    return op.call(self, split_size, dim);
#endif
}

// aten::split_with_sizes(Tensor self, int[] split_sizes, int dim=0) -> Tensor[]
std::vector<Tensor> split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::split_with_sizes(self, split_sizes, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::split_with_sizes", "")
        .typed<std::vector<Tensor> (const Tensor &, IntArrayRef, int64_t)>();
    return op.call(self, split_sizes, dim);
#endif
}

// aten::squeeze(Tensor(a) self) -> Tensor(a)
Tensor squeeze(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::squeeze(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::squeeze", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::squeeze.dim(Tensor(a) self, int dim) -> Tensor(a)
Tensor squeeze(const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::squeeze_dim(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::squeeze", "dim")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(self, dim);
#endif
}

// aten::squeeze.dimname(Tensor(a) self, Dimname dim) -> Tensor(a)
Tensor squeeze(const Tensor & self, Dimname dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::squeeze_dimname(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::squeeze", "dimname")
        .typed<Tensor (const Tensor &, Dimname)>();
    return op.call(self, dim);
#endif
}

// aten::sspaddmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
Tensor sspaddmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sspaddmm(self, mat1, mat2, beta, alpha);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sspaddmm", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(self, mat1, mat2, beta, alpha);
#endif
}

// aten::sspaddmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
Tensor & sspaddmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, mat1, mat2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::sspaddmm_out_out(out, self, mat1, mat2, beta, alpha);
            break;
        default:
            AT_ERROR("sspaddmm_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sspaddmm", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(out, self, mat1, mat2, beta, alpha);
#endif
}

// aten::stack(Tensor[] tensors, int dim=0) -> Tensor
Tensor stack(TensorList tensors, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::stack(tensors, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::stack", "")
        .typed<Tensor (TensorList, int64_t)>();
    return op.call(tensors, dim);
#endif
}

// aten::stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)
Tensor & stack_out(Tensor & out, TensorList tensors, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::stack_out_out(out, tensors, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::stack", "out")
        .typed<Tensor & (Tensor &, TensorList, int64_t)>();
    return op.call(out, tensors, dim);
#endif
}

// aten::stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool onesided=True) -> Tensor
Tensor stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const Tensor & window, bool normalized, bool onesided) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::stft(self, n_fft, hop_length, win_length, window, normalized, onesided);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::stft", "")
        .typed<Tensor (const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, const Tensor &, bool, bool)>();
    return op.call(self, n_fft, hop_length, win_length, window, normalized, onesided);
#endif
}

// aten::istft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool center=True, bool normalized=False, bool onesided=True, int? length=None) -> Tensor
Tensor istft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const Tensor & window, bool center, bool normalized, bool onesided, c10::optional<int64_t> length) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::istft(self, n_fft, hop_length, win_length, window, center, normalized, onesided, length);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::istft", "")
        .typed<Tensor (const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, const Tensor &, bool, bool, bool, c10::optional<int64_t>)>();
    return op.call(self, n_fft, hop_length, win_length, window, center, normalized, onesided, length);
#endif
}

// aten::stride.int(Tensor self, int dim) -> int
int64_t stride(const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::stride_int(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::stride", "int")
        .typed<int64_t (const Tensor &, int64_t)>();
    return op.call(self, dim);
#endif
}

// aten::stride.Dimname(Tensor self, Dimname dim) -> int
int64_t stride(const Tensor & self, Dimname dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::stride_Dimname(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::stride", "Dimname")
        .typed<int64_t (const Tensor &, Dimname)>();
    return op.call(self, dim);
#endif
}

// aten::sum(Tensor self, *, ScalarType? dtype=None) -> Tensor
Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sum(self, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sum", "")
        .typed<Tensor (const Tensor &, c10::optional<ScalarType>)>();
    return op.call(self, dtype);
#endif
}

// aten::sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
Tensor sum(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sum_dim_IntList(self, dim, keepdim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sum", "dim_IntList")
        .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>)>();
    return op.call(self, dim, keepdim, dtype);
#endif
}

// aten::sum.dim_DimnameList(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
Tensor sum(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sum_dim_DimnameList(self, dim, keepdim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sum", "dim_DimnameList")
        .typed<Tensor (const Tensor &, DimnameList, bool, c10::optional<ScalarType>)>();
    return op.call(self, dim, keepdim, dtype);
#endif
}

// aten::sum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
Tensor & sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sum_out_IntList_out(out, self, dim, keepdim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sum", "IntList_out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>)>();
    return op.call(out, self, dim, keepdim, dtype);
#endif
}

// aten::sum.DimnameList_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
Tensor & sum_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sum_out_DimnameList_out(out, self, dim, keepdim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sum", "DimnameList_out")
        .typed<Tensor & (Tensor &, const Tensor &, DimnameList, bool, c10::optional<ScalarType>)>();
    return op.call(out, self, dim, keepdim, dtype);
#endif
}

// aten::sqrt(Tensor self) -> Tensor
Tensor sqrt(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sqrt(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sqrt", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::sqrt_(Tensor(a!) self) -> Tensor(a!)
Tensor & sqrt_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sqrt_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sqrt_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::sqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & sqrt_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sqrt_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sqrt", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::square(Tensor self) -> Tensor
Tensor square(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::square(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::square", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::square_(Tensor(a!) self) -> Tensor(a!)
Tensor & square_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::square_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::square_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::std(Tensor self, bool unbiased=True) -> Tensor
Tensor std(const Tensor & self, bool unbiased) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::std(self, unbiased);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::std", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, unbiased);
#endif
}

// aten::std.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor
Tensor std(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::std_dim(self, dim, unbiased, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::std", "dim")
        .typed<Tensor (const Tensor &, IntArrayRef, bool, bool)>();
    return op.call(self, dim, unbiased, keepdim);
#endif
}

// aten::std_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> std_mean(const Tensor & self, bool unbiased) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::std_mean(self, unbiased);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::std_mean", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, bool)>();
    return op.call(self, unbiased);
#endif
}

// aten::std_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> std_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::std_mean_dim(self, dim, unbiased, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::std_mean", "dim")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, bool, bool)>();
    return op.call(self, dim, unbiased, keepdim);
#endif
}

// aten::std_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> std_mean(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::std_mean_names_dim(self, dim, unbiased, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::std_mean", "names_dim")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, DimnameList, bool, bool)>();
    return op.call(self, dim, unbiased, keepdim);
#endif
}

// aten::std.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & std_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::std_out_out(out, self, dim, unbiased, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::std", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, bool)>();
    return op.call(out, self, dim, unbiased, keepdim);
#endif
}

// aten::std.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor
Tensor std(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::std_names_dim(self, dim, unbiased, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::std", "names_dim")
        .typed<Tensor (const Tensor &, DimnameList, bool, bool)>();
    return op.call(self, dim, unbiased, keepdim);
#endif
}

// aten::std.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & std_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::std_out_names_out(out, self, dim, unbiased, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::std", "names_out")
        .typed<Tensor & (Tensor &, const Tensor &, DimnameList, bool, bool)>();
    return op.call(out, self, dim, unbiased, keepdim);
#endif
}

// aten::prod(Tensor self, *, ScalarType? dtype=None) -> Tensor
Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::prod(self, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::prod", "")
        .typed<Tensor (const Tensor &, c10::optional<ScalarType>)>();
    return op.call(self, dtype);
#endif
}

// aten::prod.dim_int(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
Tensor prod(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::prod_dim_int(self, dim, keepdim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::prod", "dim_int")
        .typed<Tensor (const Tensor &, int64_t, bool, c10::optional<ScalarType>)>();
    return op.call(self, dim, keepdim, dtype);
#endif
}

// aten::prod.int_out(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
Tensor & prod_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::prod_out_int_out(out, self, dim, keepdim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::prod", "int_out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t, bool, c10::optional<ScalarType>)>();
    return op.call(out, self, dim, keepdim, dtype);
#endif
}

// aten::prod.dim_Dimname(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
Tensor prod(const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::prod_dim_Dimname(self, dim, keepdim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::prod", "dim_Dimname")
        .typed<Tensor (const Tensor &, Dimname, bool, c10::optional<ScalarType>)>();
    return op.call(self, dim, keepdim, dtype);
#endif
}

// aten::prod.Dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
Tensor & prod_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::prod_out_Dimname_out(out, self, dim, keepdim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::prod", "Dimname_out")
        .typed<Tensor & (Tensor &, const Tensor &, Dimname, bool, c10::optional<ScalarType>)>();
    return op.call(out, self, dim, keepdim, dtype);
#endif
}

// aten::t(Tensor(a) self) -> Tensor(a)
Tensor t(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::t(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::t", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::tan(Tensor self) -> Tensor
Tensor tan(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::tan(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::tan", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::tan_(Tensor(a!) self) -> Tensor(a!)
Tensor & tan_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::tan_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::tan_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::tan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & tan_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::tan_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::tan", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::tanh(Tensor self) -> Tensor
Tensor tanh(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::tanh(self);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::tanh(self);
            break;
        default:
            AT_ERROR("tanh not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::tanh", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::tanh_(Tensor(a!) self) -> Tensor(a!)
Tensor & tanh_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::tanh_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::tanh_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::tanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & tanh_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::tanh_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::tanh", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::tensordot(Tensor self, Tensor other, int[] dims_self, int[] dims_other) -> Tensor
Tensor tensordot(const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::tensordot(self, other, dims_self, dims_other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::tensordot", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef)>();
    return op.call(self, other, dims_self, dims_other);
#endif
}

// aten::threshold(Tensor self, Scalar threshold, Scalar value) -> Tensor
Tensor threshold(const Tensor & self, Scalar threshold, Scalar value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::threshold(self, threshold, value);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::threshold(self, threshold, value);
            break;
        default:
            AT_ERROR("threshold not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::threshold", "")
        .typed<Tensor (const Tensor &, Scalar, Scalar)>();
    return op.call(self, threshold, value);
#endif
}

// aten::threshold_(Tensor(a!) self, Scalar threshold, Scalar value) -> Tensor(a!)
Tensor & threshold_(Tensor & self, Scalar threshold, Scalar value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::threshold_(self, threshold, value);
            break;
        default:
            AT_ERROR("threshold_ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::threshold_", "")
        .typed<Tensor & (Tensor &, Scalar, Scalar)>();
    return op.call(self, threshold, value);
#endif
}

// aten::threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> Tensor(a!)
Tensor & threshold_out(Tensor & out, const Tensor & self, Scalar threshold, Scalar value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::threshold_out_out(out, self, threshold, value);
            break;
        default:
            AT_ERROR("threshold_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::threshold", "out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(out, self, threshold, value);
#endif
}

// aten::threshold_backward(Tensor grad_output, Tensor self, Scalar threshold) -> Tensor
Tensor threshold_backward(const Tensor & grad_output, const Tensor & self, Scalar threshold) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::threshold_backward(grad_output, self, threshold);
            break;
        default:
            AT_ERROR("threshold_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::threshold_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, Scalar)>();
    return op.call(grad_output, self, threshold);
#endif
}

// aten::transpose.int(Tensor(a) self, int dim0, int dim1) -> Tensor(a)
Tensor transpose(const Tensor & self, int64_t dim0, int64_t dim1) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::transpose_int(self, dim0, dim1);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::transpose", "int")
        .typed<Tensor (const Tensor &, int64_t, int64_t)>();
    return op.call(self, dim0, dim1);
#endif
}

// aten::transpose.Dimname(Tensor(a) self, Dimname dim0, Dimname dim1) -> Tensor(a)
Tensor transpose(const Tensor & self, Dimname dim0, Dimname dim1) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::transpose_Dimname(self, dim0, dim1);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::transpose", "Dimname")
        .typed<Tensor (const Tensor &, Dimname, Dimname)>();
    return op.call(self, dim0, dim1);
#endif
}

// aten::_mkldnn_transpose(Tensor self, int dim0, int dim1) -> Tensor
Tensor _mkldnn_transpose(const Tensor & self, int64_t dim0, int64_t dim1) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_mkldnn_transpose not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_mkldnn_transpose", "")
        .typed<Tensor (const Tensor &, int64_t, int64_t)>();
    return op.call(self, dim0, dim1);
#endif
}

// aten::_mkldnn_transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)
Tensor & _mkldnn_transpose_(Tensor & self, int64_t dim0, int64_t dim1) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_mkldnn_transpose_ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_mkldnn_transpose_", "")
        .typed<Tensor & (Tensor &, int64_t, int64_t)>();
    return op.call(self, dim0, dim1);
#endif
}

// aten::one_hot(Tensor self, int num_classes=-1) -> Tensor
Tensor one_hot(const Tensor & self, int64_t num_classes) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::one_hot(self, num_classes);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::one_hot", "")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(self, num_classes);
#endif
}

// aten::flip(Tensor self, int[] dims) -> Tensor
Tensor flip(const Tensor & self, IntArrayRef dims) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::flip(self, dims);
            break;
        default:
            AT_ERROR("flip not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::flip", "")
        .typed<Tensor (const Tensor &, IntArrayRef)>();
    return op.call(self, dims);
#endif
}

// aten::fliplr(Tensor self) -> Tensor
Tensor fliplr(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::fliplr(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fliplr", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::flipud(Tensor self) -> Tensor
Tensor flipud(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::flipud(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::flipud", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::roll(Tensor self, int[1] shifts, int[1] dims=[]) -> Tensor
Tensor roll(const Tensor & self, IntArrayRef shifts, IntArrayRef dims) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::roll(self, shifts, dims);
            break;
        default:
            AT_ERROR("roll not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::roll", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef)>();
    return op.call(self, shifts, dims);
#endif
}

// aten::rot90(Tensor self, int k=1, int[] dims=[0,1]) -> Tensor
Tensor rot90(const Tensor & self, int64_t k, IntArrayRef dims) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rot90(self, k, dims);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rot90", "")
        .typed<Tensor (const Tensor &, int64_t, IntArrayRef)>();
    return op.call(self, k, dims);
#endif
}

// aten::trapz.x(Tensor y, Tensor x, *, int dim=-1) -> Tensor
Tensor trapz(const Tensor & y, const Tensor & x, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::trapz_x(y, x, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::trapz", "x")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t)>();
    return op.call(y, x, dim);
#endif
}

// aten::trapz.dx(Tensor y, *, float dx=1, int dim=-1) -> Tensor
Tensor trapz(const Tensor & y, double dx, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::trapz_dx(y, dx, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::trapz", "dx")
        .typed<Tensor (const Tensor &, double, int64_t)>();
    return op.call(y, dx, dim);
#endif
}

// aten::_trilinear(Tensor i1, Tensor i2, Tensor i3, int[] expand1, int[] expand2, int[] expand3, int[] sumdim, int unroll_dim=1) -> Tensor
Tensor _trilinear(const Tensor & i1, const Tensor & i2, const Tensor & i3, IntArrayRef expand1, IntArrayRef expand2, IntArrayRef expand3, IntArrayRef sumdim, int64_t unroll_dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_trilinear(i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_trilinear", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>();
    return op.call(i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim);
#endif
}

// aten::triplet_margin_loss(Tensor anchor, Tensor positive, Tensor negative, float margin=1.0, float p=2, float eps=1e-06, bool swap=False, int reduction=Mean) -> Tensor
Tensor triplet_margin_loss(const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::triplet_margin_loss(anchor, positive, negative, margin, p, eps, swap, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::triplet_margin_loss", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, double, double, double, bool, int64_t)>();
    return op.call(anchor, positive, negative, margin, p, eps, swap, reduction);
#endif
}

// aten::true_divide.Tensor(Tensor self, Tensor other) -> Tensor
Tensor true_divide(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::true_divide_Tensor(self, other);
            break;
        default:
            AT_ERROR("true_divide not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::true_divide", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::true_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & true_divide_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::true_divide_out_out(out, self, other);
            break;
        default:
            AT_ERROR("true_divide_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::true_divide", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::true_divide.Scalar(Tensor self, Scalar other) -> Tensor
Tensor true_divide(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::true_divide_Scalar(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::true_divide", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::trunc(Tensor self) -> Tensor
Tensor trunc(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::trunc(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::trunc", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::trunc_(Tensor(a!) self) -> Tensor(a!)
Tensor & trunc_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::trunc_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::trunc_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::trunc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & trunc_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::trunc_out_out(out, self);
            break;
        default:
            AT_ERROR("trunc_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::trunc", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::_has_compatible_shallow_copy_type(Tensor self, Tensor from) -> bool
bool _has_compatible_shallow_copy_type(const Tensor & self, const Tensor & from) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_has_compatible_shallow_copy_type(self, from);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_has_compatible_shallow_copy_type", "")
        .typed<bool (const Tensor &, const Tensor &)>();
    return op.call(self, from);
#endif
}

// aten::_unique(Tensor self, bool sorted=True, bool return_inverse=False) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _unique(const Tensor & self, bool sorted, bool return_inverse) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_unique(self, sorted, return_inverse);
            break;
        default:
            AT_ERROR("_unique not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_unique", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, bool, bool)>();
    return op.call(self, sorted, return_inverse);
#endif
}

// aten::unique_dim(Tensor self, int dim, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> unique_dim(const Tensor & self, int64_t dim, bool sorted, bool return_inverse, bool return_counts) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::unique_dim(self, dim, sorted, return_inverse, return_counts);
            break;
        default:
            AT_ERROR("unique_dim not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::unique_dim", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, int64_t, bool, bool, bool)>();
    return op.call(self, dim, sorted, return_inverse, return_counts);
#endif
}

// aten::unique_consecutive(Tensor self, bool return_inverse=False, bool return_counts=False, int? dim=None) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> unique_consecutive(const Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::unique_consecutive(self, return_inverse, return_counts, dim);
            break;
        default:
            AT_ERROR("unique_consecutive not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::unique_consecutive", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, bool, bool, c10::optional<int64_t>)>();
    return op.call(self, return_inverse, return_counts, dim);
#endif
}

// aten::unique_dim_consecutive(Tensor self, int dim, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> unique_dim_consecutive(const Tensor & self, int64_t dim, bool return_inverse, bool return_counts) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::unique_dim_consecutive(self, dim, return_inverse, return_counts);
            break;
        default:
            AT_ERROR("unique_dim_consecutive not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::unique_dim_consecutive", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, int64_t, bool, bool)>();
    return op.call(self, dim, return_inverse, return_counts);
#endif
}

// aten::_unique2(Tensor self, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> _unique2(const Tensor & self, bool sorted, bool return_inverse, bool return_counts) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_unique2(self, sorted, return_inverse, return_counts);
            break;
        default:
            AT_ERROR("_unique2 not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_unique2", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, bool, bool, bool)>();
    return op.call(self, sorted, return_inverse, return_counts);
#endif
}

// aten::_unsafe_view(Tensor self, int[] size) -> Tensor
Tensor _unsafe_view(const Tensor & self, IntArrayRef size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_unsafe_view(self, size);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_unsafe_view", "")
        .typed<Tensor (const Tensor &, IntArrayRef)>();
    return op.call(self, size);
#endif
}

// aten::unsqueeze(Tensor(a) self, int dim) -> Tensor(a)
Tensor unsqueeze(const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::unsqueeze(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::unsqueeze", "")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(self, dim);
#endif
}

// aten::vander(Tensor x, int? N=None, bool increasing=False) -> Tensor
Tensor vander(const Tensor & x, c10::optional<int64_t> N, bool increasing) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::vander(x, N, increasing);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::vander", "")
        .typed<Tensor (const Tensor &, c10::optional<int64_t>, bool)>();
    return op.call(x, N, increasing);
#endif
}

// aten::var(Tensor self, bool unbiased=True) -> Tensor
Tensor var(const Tensor & self, bool unbiased) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::var(self, unbiased);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::var", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, unbiased);
#endif
}

// aten::var.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor
Tensor var(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::var_dim(self, dim, unbiased, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::var", "dim")
        .typed<Tensor (const Tensor &, IntArrayRef, bool, bool)>();
    return op.call(self, dim, unbiased, keepdim);
#endif
}

// aten::var.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & var_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::var_out_out(out, self, dim, unbiased, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::var", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, bool)>();
    return op.call(out, self, dim, unbiased, keepdim);
#endif
}

// aten::var.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor
Tensor var(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::var_names_dim(self, dim, unbiased, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::var", "names_dim")
        .typed<Tensor (const Tensor &, DimnameList, bool, bool)>();
    return op.call(self, dim, unbiased, keepdim);
#endif
}

// aten::var.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & var_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::var_out_names_out(out, self, dim, unbiased, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::var", "names_out")
        .typed<Tensor & (Tensor &, const Tensor &, DimnameList, bool, bool)>();
    return op.call(out, self, dim, unbiased, keepdim);
#endif
}

// aten::var_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> var_mean(const Tensor & self, bool unbiased) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::var_mean(self, unbiased);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::var_mean", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, bool)>();
    return op.call(self, unbiased);
#endif
}

// aten::var_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> var_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::var_mean_dim(self, dim, unbiased, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::var_mean", "dim")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, bool, bool)>();
    return op.call(self, dim, unbiased, keepdim);
#endif
}

// aten::var_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> var_mean(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::var_mean_names_dim(self, dim, unbiased, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::var_mean", "names_dim")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, DimnameList, bool, bool)>();
    return op.call(self, dim, unbiased, keepdim);
#endif
}

// aten::where.self(Tensor condition, Tensor self, Tensor other) -> Tensor
Tensor where(const Tensor & condition, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::where_self(condition, self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::where", "self")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(condition, self, other);
#endif
}

// aten::where(Tensor condition) -> Tensor[]
std::vector<Tensor> where(const Tensor & condition) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::where(condition);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::where", "")
        .typed<std::vector<Tensor> (const Tensor &)>();
    return op.call(condition);
#endif
}

// aten::_s_where(Tensor condition, Tensor self, Tensor other) -> Tensor
Tensor _s_where(const Tensor & condition, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_s_where(condition, self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_s_where", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(condition, self, other);
#endif
}

// aten::norm_except_dim(Tensor v, int pow=2, int dim=0) -> Tensor
Tensor norm_except_dim(const Tensor & v, int64_t pow, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::norm_except_dim(v, pow, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::norm_except_dim", "")
        .typed<Tensor (const Tensor &, int64_t, int64_t)>();
    return op.call(v, pow, dim);
#endif
}

// aten::_weight_norm(Tensor v, Tensor g, int dim=0) -> Tensor
Tensor _weight_norm(const Tensor & v, const Tensor & g, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_weight_norm(v, g, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_weight_norm", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t)>();
    return op.call(v, g, dim);
#endif
}

// aten::_weight_norm_cuda_interface(Tensor v, Tensor g, int dim=0) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _weight_norm_cuda_interface(const Tensor & v, const Tensor & g, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(v, g);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_weight_norm_cuda_interface not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_weight_norm_cuda_interface", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, int64_t)>();
    return op.call(v, g, dim);
#endif
}

// aten::_weight_norm_cuda_interface_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _weight_norm_cuda_interface_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_w, saved_v, saved_g, saved_norms);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_weight_norm_cuda_interface_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_weight_norm_cuda_interface_backward", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(grad_w, saved_v, saved_g, saved_norms, dim);
#endif
}

// aten::_weight_norm_differentiable_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _weight_norm_differentiable_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_weight_norm_differentiable_backward(grad_w, saved_v, saved_g, saved_norms, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_weight_norm_differentiable_backward", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(grad_w, saved_v, saved_g, saved_norms, dim);
#endif
}

// aten::zeros.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor zeros(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::zeros_names(size, names, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::zeros", "names")
        .typed<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &)>();
    return op.call(size, names, options);
#endif
}

// aten::zeros(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor zeros(IntArrayRef size, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::zeros(size, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::zeros", "")
        .typed<Tensor (IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::zeros.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)
Tensor & zeros_out(Tensor & out, IntArrayRef size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::zeros_out_out(out, size);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::zeros", "out")
        .typed<Tensor & (Tensor &, IntArrayRef)>();
    return op.call(out, size);
#endif
}

// aten::zeros_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
Tensor zeros_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::zeros_like(self, options, memory_format);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::zeros_like", "")
        .typed<Tensor (const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>, c10::optional<MemoryFormat>)>();
    return op.call(self, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), c10::impl::process_memory_format(options, memory_format));
#endif
}

// aten::_standard_gamma_grad(Tensor self, Tensor output) -> Tensor
Tensor _standard_gamma_grad(const Tensor & self, const Tensor & output) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_standard_gamma_grad(self, output);
            break;
        default:
            AT_ERROR("_standard_gamma_grad not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_standard_gamma_grad", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, output);
#endif
}

// aten::_standard_gamma(Tensor self, Generator? generator=None) -> Tensor
Tensor _standard_gamma(const Tensor & self, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_standard_gamma(self, generator);
            break;
        default:
            AT_ERROR("_standard_gamma not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_standard_gamma", "")
        .typed<Tensor (const Tensor &, c10::optional<Generator>)>();
    return op.call(self, generator);
#endif
}

// aten::_dirichlet_grad(Tensor x, Tensor alpha, Tensor total) -> Tensor
Tensor _dirichlet_grad(const Tensor & x, const Tensor & alpha, const Tensor & total) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(x, alpha, total);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_dirichlet_grad(x, alpha, total);
            break;
        default:
            AT_ERROR("_dirichlet_grad not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_dirichlet_grad", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(x, alpha, total);
#endif
}

// aten::_sample_dirichlet(Tensor self, Generator? generator=None) -> Tensor
Tensor _sample_dirichlet(const Tensor & self, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_sample_dirichlet(self, generator);
            break;
        default:
            AT_ERROR("_sample_dirichlet not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sample_dirichlet", "")
        .typed<Tensor (const Tensor &, c10::optional<Generator>)>();
    return op.call(self, generator);
#endif
}

// aten::poisson(Tensor self, Generator? generator=None) -> Tensor
Tensor poisson(const Tensor & self, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::poisson(self, generator);
            break;
        default:
            AT_ERROR("poisson not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::poisson", "")
        .typed<Tensor (const Tensor &, c10::optional<Generator>)>();
    return op.call(self, generator);
#endif
}

// aten::binomial(Tensor count, Tensor prob, Generator? generator=None) -> Tensor
Tensor binomial(const Tensor & count, const Tensor & prob, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(count, prob);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::binomial(count, prob, generator);
            break;
        default:
            AT_ERROR("binomial not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::binomial", "")
        .typed<Tensor (const Tensor &, const Tensor &, c10::optional<Generator>)>();
    return op.call(count, prob, generator);
#endif
}

// aten::native_norm(Tensor self, Scalar p=2) -> Tensor
Tensor native_norm(const Tensor & self, Scalar p) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("native_norm not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::native_norm", "")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, p);
#endif
}

// aten::_sparse_sum(Tensor self) -> Tensor
Tensor _sparse_sum(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_sparse_sum(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_sum", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::_sparse_sum.dtype(Tensor self, *, ScalarType dtype) -> Tensor
Tensor _sparse_sum(const Tensor & self, ScalarType dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_sparse_sum_dtype(self, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_sum", "dtype")
        .typed<Tensor (const Tensor &, ScalarType)>();
    return op.call(self, dtype);
#endif
}

// aten::_sparse_sum.dim(Tensor self, int[1] dim) -> Tensor
Tensor _sparse_sum(const Tensor & self, IntArrayRef dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_sparse_sum_dim(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_sum", "dim")
        .typed<Tensor (const Tensor &, IntArrayRef)>();
    return op.call(self, dim);
#endif
}

// aten::_sparse_sum.dim_dtype(Tensor self, int[1] dim, *, ScalarType dtype) -> Tensor
Tensor _sparse_sum(const Tensor & self, IntArrayRef dim, ScalarType dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_sparse_sum_dim_dtype(self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_sum", "dim_dtype")
        .typed<Tensor (const Tensor &, IntArrayRef, ScalarType)>();
    return op.call(self, dim, dtype);
#endif
}

// aten::_sparse_sum_backward(Tensor grad, Tensor self, int[] dim) -> Tensor
Tensor _sparse_sum_backward(const Tensor & grad, const Tensor & self, IntArrayRef dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_sparse_sum_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_sum_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(grad, self, dim);
#endif
}

// aten::_sparse_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor
Tensor _sparse_softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_sparse_softmax_int(self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_softmax", "int")
        .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
    return op.call(self, dim, dtype);
#endif
}

// aten::_sparse_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
Tensor _sparse_softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_sparse_softmax_Dimname(self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_softmax", "Dimname")
        .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
    return op.call(self, dim, dtype);
#endif
}

// aten::_sparse_softmax(Tensor self, int dim, bool half_to_float) -> Tensor
Tensor _sparse_softmax(const Tensor & self, int64_t dim, bool half_to_float) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_sparse_softmax not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_softmax", "")
        .typed<Tensor (const Tensor &, int64_t, bool)>();
    return op.call(self, dim, half_to_float);
#endif
}

// aten::_sparse_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor
Tensor _sparse_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_sparse_softmax_backward_data not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_softmax_backward_data", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t, const Tensor &)>();
    return op.call(grad_output, output, dim, self);
#endif
}

// aten::_sparse_log_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor
Tensor _sparse_log_softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_sparse_log_softmax_int(self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_log_softmax", "int")
        .typed<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>)>();
    return op.call(self, dim, dtype);
#endif
}

// aten::_sparse_log_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
Tensor _sparse_log_softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_sparse_log_softmax_Dimname(self, dim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_log_softmax", "Dimname")
        .typed<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>)>();
    return op.call(self, dim, dtype);
#endif
}

// aten::_sparse_log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor
Tensor _sparse_log_softmax(const Tensor & self, int64_t dim, bool half_to_float) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_sparse_log_softmax not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_log_softmax", "")
        .typed<Tensor (const Tensor &, int64_t, bool)>();
    return op.call(self, dim, half_to_float);
#endif
}

// aten::_sparse_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor
Tensor _sparse_log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_sparse_log_softmax_backward_data not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_log_softmax_backward_data", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t, const Tensor &)>();
    return op.call(grad_output, output, dim, self);
#endif
}

// aten::norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, ScalarType dtype) -> Tensor
Tensor norm(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::norm_ScalarOpt_dtype(self, p, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::norm", "ScalarOpt_dtype")
        .typed<Tensor (const Tensor &, c10::optional<Scalar>, ScalarType)>();
    return op.call(self, p, dtype);
#endif
}

// aten::norm.Scalar(Tensor self, Scalar p=2) -> Tensor
Tensor norm(const Tensor & self, Scalar p) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::norm_Scalar(self, p);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::norm", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, p);
#endif
}

// aten::norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor
Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::norm_ScalarOpt_dim_dtype(self, p, dim, keepdim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::norm", "ScalarOpt_dim_dtype")
        .typed<Tensor (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType)>();
    return op.call(self, p, dim, keepdim, dtype);
#endif
}

// aten::norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> Tensor
Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::norm_ScalarOpt_dim(self, p, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::norm", "ScalarOpt_dim")
        .typed<Tensor (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool)>();
    return op.call(self, p, dim, keepdim);
#endif
}

// aten::norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)
Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::norm_out_dtype_out(out, self, p, dim, keepdim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::norm", "dtype_out")
        .typed<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType)>();
    return op.call(out, self, p, dim, keepdim, dtype);
#endif
}

// aten::norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::norm_out_out(out, self, p, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::norm", "out")
        .typed<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool)>();
    return op.call(out, self, p, dim, keepdim);
#endif
}

// aten::norm.names_ScalarOpt_dim_dtype(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor
Tensor norm(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::norm_names_ScalarOpt_dim_dtype(self, p, dim, keepdim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::norm", "names_ScalarOpt_dim_dtype")
        .typed<Tensor (const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType)>();
    return op.call(self, p, dim, keepdim, dtype);
#endif
}

// aten::norm.names_ScalarOpt_dim(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False) -> Tensor
Tensor norm(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::norm_names_ScalarOpt_dim(self, p, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::norm", "names_ScalarOpt_dim")
        .typed<Tensor (const Tensor &, c10::optional<Scalar>, DimnameList, bool)>();
    return op.call(self, p, dim, keepdim);
#endif
}

// aten::norm.names_dtype_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)
Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::norm_out_names_dtype_out(out, self, p, dim, keepdim, dtype);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::norm", "names_dtype_out")
        .typed<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType)>();
    return op.call(out, self, p, dim, keepdim, dtype);
#endif
}

// aten::norm.names_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::norm_out_names_out(out, self, p, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::norm", "names_out")
        .typed<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, DimnameList, bool)>();
    return op.call(out, self, p, dim, keepdim);
#endif
}

// aten::frobenius_norm(Tensor self) -> Tensor
Tensor frobenius_norm(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::frobenius_norm(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::frobenius_norm", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::frobenius_norm.dim(Tensor self, int[1] dim, bool keepdim=False) -> Tensor
Tensor frobenius_norm(const Tensor & self, IntArrayRef dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::frobenius_norm_dim(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::frobenius_norm", "dim")
        .typed<Tensor (const Tensor &, IntArrayRef, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::frobenius_norm.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & frobenius_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::frobenius_norm_out_out(out, self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::frobenius_norm", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool)>();
    return op.call(out, self, dim, keepdim);
#endif
}

// aten::nuclear_norm(Tensor self, bool keepdim=False) -> Tensor
Tensor nuclear_norm(const Tensor & self, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::nuclear_norm(self, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nuclear_norm", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, keepdim);
#endif
}

// aten::nuclear_norm.out(Tensor self, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::nuclear_norm_out_out(out, self, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nuclear_norm", "out")
        .typed<Tensor & (Tensor &, const Tensor &, bool)>();
    return op.call(out, self, keepdim);
#endif
}

// aten::nuclear_norm.dim(Tensor self, int[2] dim, bool keepdim=False) -> Tensor
Tensor nuclear_norm(const Tensor & self, IntArrayRef dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::nuclear_norm_dim(self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nuclear_norm", "dim")
        .typed<Tensor (const Tensor &, IntArrayRef, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::nuclear_norm.dim_out(Tensor self, int[2] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::nuclear_norm_out_dim_out(out, self, dim, keepdim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nuclear_norm", "dim_out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool)>();
    return op.call(out, self, dim, keepdim);
#endif
}

// aten::clone(Tensor self, *, MemoryFormat? memory_format=None) -> Tensor
Tensor clone(const Tensor & self, c10::optional<MemoryFormat> memory_format) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::clone(self, memory_format);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::clone(self, memory_format);
            break;
        default:
            AT_ERROR("clone not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::clone", "")
        .typed<Tensor (const Tensor &, c10::optional<MemoryFormat>)>();
    return op.call(self, memory_format);
#endif
}

// aten::resize_as_(Tensor(a!) self, Tensor the_template, *, MemoryFormat? memory_format=None) -> Tensor(a!)
Tensor & resize_as_(Tensor & self, const Tensor & the_template, c10::optional<MemoryFormat> memory_format) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::resize_as_(self, the_template, memory_format);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::resize_as_", "")
        .typed<Tensor & (Tensor &, const Tensor &, c10::optional<MemoryFormat>)>();
    return op.call(self, the_template, memory_format);
#endif
}

// aten::pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)
Tensor & pow_out(Tensor & out, const Tensor & self, Scalar exponent) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::pow_out_Tensor_Scalar_out(out, self, exponent);
            break;
        default:
            AT_ERROR("pow_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::pow", "Tensor_Scalar_out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, exponent);
#endif
}

// aten::pow.Tensor_Scalar(Tensor self, Scalar exponent) -> Tensor
Tensor pow(const Tensor & self, Scalar exponent) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::pow_Tensor_Scalar(self, exponent);
            break;
        default:
            AT_ERROR("pow not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::pow", "Tensor_Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, exponent);
#endif
}

// aten::zero_(Tensor(a!) self) -> Tensor(a!)
Tensor & zero_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::zero_(self);
            break;
        default:
            AT_ERROR("zero_ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::zero_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
Tensor & sub_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::sub_out_out(out, self, other, alpha);
            break;
        default:
            AT_ERROR("sub_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sub", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, other, alpha);
#endif
}

// aten::sub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
Tensor sub(const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::sub_Tensor(self, other, alpha);
            break;
        default:
            AT_ERROR("sub not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sub", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &, Scalar)>();
    return op.call(self, other, alpha);
#endif
}

// aten::sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor
Tensor sub(const Tensor & self, Scalar other, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sub_Scalar(self, other, alpha);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sub", "Scalar")
        .typed<Tensor (const Tensor &, Scalar, Scalar)>();
    return op.call(self, other, alpha);
#endif
}

// aten::rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
Tensor rsub(const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rsub_Tensor(self, other, alpha);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rsub", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &, Scalar)>();
    return op.call(self, other, alpha);
#endif
}

// aten::rsub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor
Tensor rsub(const Tensor & self, Scalar other, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rsub_Scalar(self, other, alpha);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rsub", "Scalar")
        .typed<Tensor (const Tensor &, Scalar, Scalar)>();
    return op.call(self, other, alpha);
#endif
}

// aten::_sparse_addmm(Tensor self, Tensor sparse, Tensor dense, *, Scalar beta=1, Scalar alpha=1) -> Tensor
Tensor _sparse_addmm(const Tensor & self, const Tensor & sparse, const Tensor & dense, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_sparse_addmm(self, sparse, dense, beta, alpha);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_addmm", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(self, sparse, dense, beta, alpha);
#endif
}

// aten::addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
Tensor & addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, mat1, mat2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::addmm_out_out(out, self, mat1, mat2, beta, alpha);
            break;
        default:
            AT_ERROR("addmm_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::addmm", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(out, self, mat1, mat2, beta, alpha);
#endif
}

// aten::addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
Tensor addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, mat1, mat2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::addmm(self, mat1, mat2, beta, alpha);
            break;
        #ifdef USE_VULKAN
        case Backend::Vulkan:
            return VulkanType::addmm(self, mat1, mat2, beta, alpha);
            break;
        #endif
        default:
            AT_ERROR("addmm not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::addmm", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(self, mat1, mat2, beta, alpha);
#endif
}

// aten::sparse_coo_tensor.size(int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor
Tensor sparse_coo_tensor(IntArrayRef size, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sparse_coo_tensor_size(size, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sparse_coo_tensor", "size")
        .typed<Tensor (IntArrayRef, const TensorOptions &)>();
    return op.call(size, options);
#endif
}

// aten::sparse_coo_tensor.indices(Tensor indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sparse_coo_tensor_indices(indices, values, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sparse_coo_tensor", "indices")
        .typed<Tensor (const Tensor &, const Tensor &, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(indices, values, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::sparse_coo_tensor.indices_size(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sparse_coo_tensor_indices_size(indices, values, size, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sparse_coo_tensor", "indices_size")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(indices, values, size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::_sparse_coo_tensor_unsafe(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor _sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_sparse_coo_tensor_unsafe(indices, values, size, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_coo_tensor_unsafe", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(indices, values, size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::_validate_sparse_coo_tensor_args(Tensor indices, Tensor values, int[] size) -> ()
void _validate_sparse_coo_tensor_args(const Tensor & indices, const Tensor & values, IntArrayRef size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
     TypeDefault::_validate_sparse_coo_tensor_args(indices, values, size);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_validate_sparse_coo_tensor_args", "")
        .typed<void (const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(indices, values, size);
#endif
}

// aten::_sparse_coo_tensor_with_dims(int sparse_dim, int dense_dim, int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor
Tensor _sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKey _dk = options.computeDispatchKey();
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_sparse_coo_tensor_with_dims not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_coo_tensor_with_dims", "")
        .typed<Tensor (int64_t, int64_t, IntArrayRef, const TensorOptions &)>();
    return op.call(sparse_dim, dense_dim, size, options);
#endif
}

// aten::_sparse_coo_tensor_with_dims_and_tensors(int sparse_dim, int dense_dim, int[] size, Tensor indices, Tensor values, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor
Tensor _sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = DispatchKeySet(options.computeDispatchKey()) | c10::detail::multi_dispatch_key_set(indices, values);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_sparse_coo_tensor_with_dims_and_tensors not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_sparse_coo_tensor_with_dims_and_tensors", "")
        .typed<Tensor (int64_t, int64_t, IntArrayRef, const Tensor &, const Tensor &, const TensorOptions &)>();
    return op.call(sparse_dim, dense_dim, size, indices, values, options);
#endif
}

// aten::to_dense_backward(Tensor grad, Tensor input) -> Tensor
Tensor to_dense_backward(const Tensor & grad, const Tensor & input) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::to_dense_backward(grad, input);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::to_dense_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(grad, input);
#endif
}

// aten::hspmm.out(Tensor mat1, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)
Tensor & hspmm_out(Tensor & out, const Tensor & mat1, const Tensor & mat2) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, mat1, mat2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("hspmm_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hspmm", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, mat1, mat2);
#endif
}

// aten::hspmm(Tensor mat1, Tensor mat2) -> Tensor
Tensor hspmm(const Tensor & mat1, const Tensor & mat2) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(mat1, mat2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("hspmm not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hspmm", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(mat1, mat2);
#endif
}

// aten::copy_sparse_to_sparse_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)
Tensor & copy_sparse_to_sparse_(Tensor & self, const Tensor & src, bool non_blocking) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, src);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("copy_sparse_to_sparse_ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::copy_sparse_to_sparse_", "")
        .typed<Tensor & (Tensor &, const Tensor &, bool)>();
    return op.call(self, src, non_blocking);
#endif
}

// aten::unbind.int(Tensor(a) self, int dim=0) -> Tensor(a)[]
std::vector<Tensor> unbind(const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::unbind_int(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::unbind", "int")
        .typed<std::vector<Tensor> (const Tensor &, int64_t)>();
    return op.call(self, dim);
#endif
}

// aten::unbind.Dimname(Tensor(a) self, Dimname dim) -> Tensor(a)[]
std::vector<Tensor> unbind(const Tensor & self, Dimname dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::unbind_Dimname(self, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::unbind", "Dimname")
        .typed<std::vector<Tensor> (const Tensor &, Dimname)>();
    return op.call(self, dim);
#endif
}

// aten::mkldnn_reorder_conv2d_weight(Tensor self, int[2] padding=0, int[2] stride=1, int[2] dilation=1, int groups=1) -> Tensor
Tensor mkldnn_reorder_conv2d_weight(const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("mkldnn_reorder_conv2d_weight not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mkldnn_reorder_conv2d_weight", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t)>();
    return op.call(self, padding, stride, dilation, groups);
#endif
}

// aten::to_mkldnn_backward(Tensor grad, Tensor input) -> Tensor
Tensor to_mkldnn_backward(const Tensor & grad, const Tensor & input) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::to_mkldnn_backward(grad, input);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::to_mkldnn_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(grad, input);
#endif
}

// aten::quantize_per_tensor(Tensor self, float scale, int zero_point, ScalarType dtype) -> Tensor
Tensor quantize_per_tensor(const Tensor & self, double scale, int64_t zero_point, ScalarType dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::quantize_per_tensor(self, scale, zero_point, dtype);
            break;
        default:
            AT_ERROR("quantize_per_tensor not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::quantize_per_tensor", "")
        .typed<Tensor (const Tensor &, double, int64_t, ScalarType)>();
    return op.call(self, scale, zero_point, dtype);
#endif
}

// aten::quantize_per_tensor.tensors(Tensor[] tensors, Tensor scales, Tensor zero_points, ScalarType dtype) -> Tensor[]
std::vector<Tensor> quantize_per_tensor(TensorList tensors, const Tensor & scales, const Tensor & zero_points, ScalarType dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(tensors, scales, zero_points);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::quantize_per_tensor_tensors(tensors, scales, zero_points, dtype);
            break;
        default:
            AT_ERROR("quantize_per_tensor not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::quantize_per_tensor", "tensors")
        .typed<std::vector<Tensor> (TensorList, const Tensor &, const Tensor &, ScalarType)>();
    return op.call(tensors, scales, zero_points, dtype);
#endif
}

// aten::quantize_per_channel(Tensor self, Tensor scales, Tensor zero_points, int axis, ScalarType dtype) -> Tensor
Tensor quantize_per_channel(const Tensor & self, const Tensor & scales, const Tensor & zero_points, int64_t axis, ScalarType dtype) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, scales, zero_points);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::quantize_per_channel(self, scales, zero_points, axis, dtype);
            break;
        default:
            AT_ERROR("quantize_per_channel not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::quantize_per_channel", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t, ScalarType)>();
    return op.call(self, scales, zero_points, axis, dtype);
#endif
}

// aten::dequantize.self(Tensor self) -> Tensor
Tensor dequantize(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::QuantizedCPU:
            return QuantizedCPUType::dequantize_self(self);
            break;
        default:
            AT_ERROR("dequantize not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::dequantize", "self")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::dequantize.tensors(Tensor[] tensors) -> Tensor[]
std::vector<Tensor> dequantize(TensorList tensors) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(tensors);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::QuantizedCPU:
            return QuantizedCPUType::dequantize_tensors(tensors);
            break;
        default:
            AT_ERROR("dequantize not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::dequantize", "tensors")
        .typed<std::vector<Tensor> (TensorList)>();
    return op.call(tensors);
#endif
}

// aten::q_scale(Tensor self) -> float
double q_scale(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::QuantizedCPU:
            return QuantizedCPUType::q_scale(self);
            break;
        default:
            AT_ERROR("q_scale not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::q_scale", "")
        .typed<double (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::q_zero_point(Tensor self) -> int
int64_t q_zero_point(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::QuantizedCPU:
            return QuantizedCPUType::q_zero_point(self);
            break;
        default:
            AT_ERROR("q_zero_point not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::q_zero_point", "")
        .typed<int64_t (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::q_per_channel_scales(Tensor self) -> Tensor
Tensor q_per_channel_scales(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::QuantizedCPU:
            return QuantizedCPUType::q_per_channel_scales(self);
            break;
        default:
            AT_ERROR("q_per_channel_scales not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::q_per_channel_scales", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::q_per_channel_zero_points(Tensor self) -> Tensor
Tensor q_per_channel_zero_points(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::QuantizedCPU:
            return QuantizedCPUType::q_per_channel_zero_points(self);
            break;
        default:
            AT_ERROR("q_per_channel_zero_points not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::q_per_channel_zero_points", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::q_per_channel_axis(Tensor self) -> int
int64_t q_per_channel_axis(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::QuantizedCPU:
            return QuantizedCPUType::q_per_channel_axis(self);
            break;
        default:
            AT_ERROR("q_per_channel_axis not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::q_per_channel_axis", "")
        .typed<int64_t (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::int_repr(Tensor self) -> Tensor
Tensor int_repr(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::QuantizedCPU:
            return QuantizedCPUType::int_repr(self);
            break;
        default:
            AT_ERROR("int_repr not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::int_repr", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::_make_per_tensor_quantized_tensor(Tensor self, float scale, int zero_point) -> Tensor
Tensor _make_per_tensor_quantized_tensor(const Tensor & self, double scale, int64_t zero_point) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_make_per_tensor_quantized_tensor(self, scale, zero_point);
            break;
        default:
            AT_ERROR("_make_per_tensor_quantized_tensor not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_make_per_tensor_quantized_tensor", "")
        .typed<Tensor (const Tensor &, double, int64_t)>();
    return op.call(self, scale, zero_point);
#endif
}

// aten::_make_per_channel_quantized_tensor(Tensor self, Tensor scale, Tensor zero_point, int axis) -> Tensor
Tensor _make_per_channel_quantized_tensor(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, scale, zero_point);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_make_per_channel_quantized_tensor(self, scale, zero_point, axis);
            break;
        default:
            AT_ERROR("_make_per_channel_quantized_tensor not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_make_per_channel_quantized_tensor", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(self, scale, zero_point, axis);
#endif
}

// aten::fake_quantize_per_tensor_affine(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> Tensor
Tensor fake_quantize_per_tensor_affine(const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::fake_quantize_per_tensor_affine(self, scale, zero_point, quant_min, quant_max);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fake_quantize_per_tensor_affine", "")
        .typed<Tensor (const Tensor &, double, int64_t, int64_t, int64_t)>();
    return op.call(self, scale, zero_point, quant_min, quant_max);
#endif
}

// aten::fake_quantize_per_tensor_affine_backward(Tensor grad, Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> Tensor
Tensor fake_quantize_per_tensor_affine_backward(const Tensor & grad, const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::fake_quantize_per_tensor_affine_backward(grad, self, scale, zero_point, quant_min, quant_max);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fake_quantize_per_tensor_affine_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, double, int64_t, int64_t, int64_t)>();
    return op.call(grad, self, scale, zero_point, quant_min, quant_max);
#endif
}

// aten::fake_quantize_per_channel_affine(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> Tensor
Tensor fake_quantize_per_channel_affine(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::fake_quantize_per_channel_affine(self, scale, zero_point, axis, quant_min, quant_max);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fake_quantize_per_channel_affine", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t)>();
    return op.call(self, scale, zero_point, axis, quant_min, quant_max);
#endif
}

// aten::fake_quantize_per_channel_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> Tensor
Tensor fake_quantize_per_channel_affine_backward(const Tensor & grad, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::fake_quantize_per_channel_affine_backward(grad, self, scale, zero_point, axis, quant_min, quant_max);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fake_quantize_per_channel_affine_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, int64_t)>();
    return op.call(grad, self, scale, zero_point, axis, quant_min, quant_max);
#endif
}

// aten::_choose_qparams_per_tensor(Tensor self, bool reduce_range=False) -> (float, int)
std::tuple<double,int64_t> _choose_qparams_per_tensor(const Tensor & self, bool reduce_range) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_choose_qparams_per_tensor(self, reduce_range);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_choose_qparams_per_tensor", "")
        .typed<std::tuple<double,int64_t> (const Tensor &, bool)>();
    return op.call(self, reduce_range);
#endif
}

// aten::meshgrid(Tensor[] tensors) -> Tensor[]
std::vector<Tensor> meshgrid(TensorList tensors) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::meshgrid(tensors);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::meshgrid", "")
        .typed<std::vector<Tensor> (TensorList)>();
    return op.call(tensors);
#endif
}

// aten::cartesian_prod(Tensor[] tensors) -> Tensor
Tensor cartesian_prod(TensorList tensors) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cartesian_prod(tensors);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cartesian_prod", "")
        .typed<Tensor (TensorList)>();
    return op.call(tensors);
#endif
}

// aten::combinations(Tensor self, int r=2, bool with_replacement=False) -> Tensor
Tensor combinations(const Tensor & self, int64_t r, bool with_replacement) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::combinations(self, r, with_replacement);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::combinations", "")
        .typed<Tensor (const Tensor &, int64_t, bool)>();
    return op.call(self, r, with_replacement);
#endif
}

// aten::result_type.Tensor(Tensor tensor, Tensor other) -> ScalarType
ScalarType result_type(const Tensor & tensor, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::result_type_Tensor(tensor, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::result_type", "Tensor")
        .typed<ScalarType (const Tensor &, const Tensor &)>();
    return op.call(tensor, other);
#endif
}

// aten::result_type.Scalar(Tensor tensor, Scalar other) -> ScalarType
ScalarType result_type(const Tensor & tensor, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::result_type_Scalar(tensor, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::result_type", "Scalar")
        .typed<ScalarType (const Tensor &, Scalar)>();
    return op.call(tensor, other);
#endif
}

// aten::result_type.Scalar_Tensor(Scalar scalar, Tensor tensor) -> ScalarType
ScalarType result_type(Scalar scalar, const Tensor & tensor) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::result_type_Scalar_Tensor(scalar, tensor);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::result_type", "Scalar_Tensor")
        .typed<ScalarType (Scalar, const Tensor &)>();
    return op.call(scalar, tensor);
#endif
}

// aten::result_type.Scalar_Scalar(Scalar scalar1, Scalar scalar2) -> ScalarType
ScalarType result_type(Scalar scalar1, Scalar scalar2) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::result_type_Scalar_Scalar(scalar1, scalar2);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::result_type", "Scalar_Scalar")
        .typed<ScalarType (Scalar, Scalar)>();
    return op.call(scalar1, scalar2);
#endif
}

// aten::can_cast(ScalarType from, ScalarType to) -> bool
bool can_cast(ScalarType from, ScalarType to) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::can_cast(from, to);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::can_cast", "")
        .typed<bool (ScalarType, ScalarType)>();
    return op.call(from, to);
#endif
}

// aten::promote_types(ScalarType type1, ScalarType type2) -> ScalarType
ScalarType promote_types(ScalarType type1, ScalarType type2) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::promote_types(type1, type2);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::promote_types", "")
        .typed<ScalarType (ScalarType, ScalarType)>();
    return op.call(type1, type2);
#endif
}

// aten::_local_scalar_dense(Tensor self) -> Scalar
Scalar _local_scalar_dense(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_local_scalar_dense(self);
            break;
        default:
            AT_ERROR("_local_scalar_dense not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_local_scalar_dense", "")
        .typed<Scalar (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::_thnn_fused_lstm_cell(Tensor input_gates, Tensor hidden_gates, Tensor cx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> _thnn_fused_lstm_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const Tensor & input_bias, const Tensor & hidden_bias) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input_gates, hidden_gates, cx, input_bias, hidden_bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_thnn_fused_lstm_cell not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_thnn_fused_lstm_cell", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(input_gates, hidden_gates, cx, input_bias, hidden_bias);
#endif
}

// aten::_thnn_fused_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor cx, Tensor cy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_hy, grad_cy, cx, cy, workspace);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_thnn_fused_lstm_cell_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_thnn_fused_lstm_cell_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool)>();
    return op.call(grad_hy, grad_cy, cx, cy, workspace, has_bias);
#endif
}

// aten::_thnn_differentiable_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor input_gates, Tensor hidden_gates, Tensor? input_bias, Tensor? hidden_bias, Tensor cx, Tensor cy) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & input_bias, const Tensor & hidden_bias, const Tensor & cx, const Tensor & cy) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_thnn_differentiable_lstm_cell_backward(grad_hy, grad_cy, input_gates, hidden_gates, input_bias, hidden_bias, cx, cy);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_thnn_differentiable_lstm_cell_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(grad_hy, grad_cy, input_gates, hidden_gates, input_bias, hidden_bias, cx, cy);
#endif
}

// aten::_thnn_fused_gru_cell(Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _thnn_fused_gru_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(input_gates, hidden_gates, hx, input_bias, hidden_bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_thnn_fused_gru_cell not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_thnn_fused_gru_cell", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(input_gates, hidden_gates, hx, input_bias, hidden_bias);
#endif
}

// aten::_thnn_fused_gru_cell_backward(Tensor grad_hy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_gru_cell_backward(const Tensor & grad_hy, const Tensor & workspace, bool has_bias) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_hy, workspace);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_thnn_fused_gru_cell_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_thnn_fused_gru_cell_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, bool)>();
    return op.call(grad_hy, workspace, has_bias);
#endif
}

// aten::_thnn_differentiable_gru_cell_backward(Tensor grad_hy, Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias, Tensor? hidden_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_gru_cell_backward(const Tensor & grad_hy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_thnn_differentiable_gru_cell_backward(grad_hy, input_gates, hidden_gates, hx, input_bias, hidden_bias);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_thnn_differentiable_gru_cell_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(grad_hy, input_gates, hidden_gates, hx, input_bias, hidden_bias);
#endif
}

// aten::lstm.input(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::lstm_input(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lstm", "input")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool, bool)>();
    return op.call(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
#endif
}

// aten::lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::lstm_data(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lstm", "data")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool)>();
    return op.call(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
#endif
}

// aten::gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::gru_input(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::gru", "input")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool)>();
    return op.call(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
#endif
}

// aten::gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::gru_data(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::gru", "data")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool)>();
    return op.call(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
#endif
}

// aten::rnn_tanh.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rnn_tanh_input(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rnn_tanh", "input")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool)>();
    return op.call(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
#endif
}

// aten::rnn_tanh.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rnn_tanh_data(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rnn_tanh", "data")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool)>();
    return op.call(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
#endif
}

// aten::rnn_relu.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> rnn_relu(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rnn_relu_input(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rnn_relu", "input")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool)>();
    return op.call(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
#endif
}

// aten::rnn_relu.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> rnn_relu(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rnn_relu_data(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rnn_relu", "data")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool)>();
    return op.call(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
#endif
}

// aten::lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::lstm_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lstm_cell", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, TensorList, const Tensor &, const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(input, hx, w_ih, w_hh, b_ih, b_hh);
#endif
}

// aten::gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor
Tensor gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::gru_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::gru_cell", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(input, hx, w_ih, w_hh, b_ih, b_hh);
#endif
}

// aten::rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor
Tensor rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rnn_tanh_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rnn_tanh_cell", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(input, hx, w_ih, w_hh, b_ih, b_hh);
#endif
}

// aten::rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor
Tensor rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rnn_relu_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rnn_relu_cell", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(input, hx, w_ih, w_hh, b_ih, b_hh);
#endif
}

// aten::quantized_lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> quantized_lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::quantized_lstm_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::quantized_lstm_cell", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, TensorList, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar)>();
    return op.call(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
#endif
}

// aten::quantized_gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor
Tensor quantized_gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::quantized_gru_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::quantized_gru_cell", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar)>();
    return op.call(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
#endif
}

// aten::quantized_rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor
Tensor quantized_rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::quantized_rnn_relu_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::quantized_rnn_relu_cell", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar)>();
    return op.call(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
#endif
}

// aten::quantized_rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor
Tensor quantized_rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::quantized_rnn_tanh_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::quantized_rnn_tanh_cell", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar)>();
    return op.call(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
#endif
}

// aten::_pack_padded_sequence(Tensor input, Tensor lengths, bool batch_first) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _pack_padded_sequence(const Tensor & input, const Tensor & lengths, bool batch_first) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_pack_padded_sequence(input, lengths, batch_first);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_pack_padded_sequence", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, bool)>();
    return op.call(input, lengths, batch_first);
#endif
}

// aten::_pack_padded_sequence_backward(Tensor grad, int[] input_size, Tensor batch_sizes, bool batch_first) -> Tensor
Tensor _pack_padded_sequence_backward(const Tensor & grad, IntArrayRef input_size, const Tensor & batch_sizes, bool batch_first) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_pack_padded_sequence_backward(grad, input_size, batch_sizes, batch_first);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_pack_padded_sequence_backward", "")
        .typed<Tensor (const Tensor &, IntArrayRef, const Tensor &, bool)>();
    return op.call(grad, input_size, batch_sizes, batch_first);
#endif
}

// aten::_pad_packed_sequence(Tensor data, Tensor batch_sizes, bool batch_first, Scalar padding_value, int total_length) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _pad_packed_sequence(const Tensor & data, const Tensor & batch_sizes, bool batch_first, Scalar padding_value, int64_t total_length) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_pad_packed_sequence(data, batch_sizes, batch_first, padding_value, total_length);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_pad_packed_sequence", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, bool, Scalar, int64_t)>();
    return op.call(data, batch_sizes, batch_first, padding_value, total_length);
#endif
}

// aten::masked_fill.Scalar(Tensor self, Tensor mask, Scalar value) -> Tensor
Tensor masked_fill(const Tensor & self, const Tensor & mask, Scalar value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::masked_fill_Scalar(self, mask, value);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::masked_fill", "Scalar")
        .typed<Tensor (const Tensor &, const Tensor &, Scalar)>();
    return op.call(self, mask, value);
#endif
}

// aten::masked_fill.Tensor(Tensor self, Tensor mask, Tensor value) -> Tensor
Tensor masked_fill(const Tensor & self, const Tensor & mask, const Tensor & value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::masked_fill_Tensor(self, mask, value);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::masked_fill", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(self, mask, value);
#endif
}

// aten::masked_scatter(Tensor self, Tensor mask, Tensor source) -> Tensor
Tensor masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::masked_scatter(self, mask, source);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::masked_scatter", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(self, mask, source);
#endif
}

// aten::index_add(Tensor self, int dim, Tensor index, Tensor source) -> Tensor
Tensor index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::index_add(self, dim, index, source);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::index_add", "")
        .typed<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>();
    return op.call(self, dim, index, source);
#endif
}

// aten::index_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor
Tensor index_add(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::index_add_dimname(self, dim, index, source);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::index_add", "dimname")
        .typed<Tensor (const Tensor &, Dimname, const Tensor &, const Tensor &)>();
    return op.call(self, dim, index, source);
#endif
}

// aten::index_fill.int_Scalar(Tensor self, int dim, Tensor index, Scalar value) -> Tensor
Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::index_fill_int_Scalar(self, dim, index, value);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::index_fill", "int_Scalar")
        .typed<Tensor (const Tensor &, int64_t, const Tensor &, Scalar)>();
    return op.call(self, dim, index, value);
#endif
}

// aten::index_fill.int_Tensor(Tensor self, int dim, Tensor index, Tensor value) -> Tensor
Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::index_fill_int_Tensor(self, dim, index, value);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::index_fill", "int_Tensor")
        .typed<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>();
    return op.call(self, dim, index, value);
#endif
}

// aten::index_fill.Dimname_Scalar(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor
Tensor index_fill(const Tensor & self, Dimname dim, const Tensor & index, Scalar value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::index_fill_Dimname_Scalar(self, dim, index, value);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::index_fill", "Dimname_Scalar")
        .typed<Tensor (const Tensor &, Dimname, const Tensor &, Scalar)>();
    return op.call(self, dim, index, value);
#endif
}

// aten::index_fill.Dimname_Tensor(Tensor self, Dimname dim, Tensor index, Tensor value) -> Tensor
Tensor index_fill(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::index_fill_Dimname_Tensor(self, dim, index, value);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::index_fill", "Dimname_Tensor")
        .typed<Tensor (const Tensor &, Dimname, const Tensor &, const Tensor &)>();
    return op.call(self, dim, index, value);
#endif
}

// aten::scatter.src(Tensor self, int dim, Tensor index, Tensor src) -> Tensor
Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::scatter_src(self, dim, index, src);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::scatter", "src")
        .typed<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>();
    return op.call(self, dim, index, src);
#endif
}

// aten::scatter.value(Tensor self, int dim, Tensor index, Scalar value) -> Tensor
Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::scatter_value(self, dim, index, value);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::scatter", "value")
        .typed<Tensor (const Tensor &, int64_t, const Tensor &, Scalar)>();
    return op.call(self, dim, index, value);
#endif
}

// aten::scatter.dimname_src(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor
Tensor scatter(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::scatter_dimname_src(self, dim, index, src);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::scatter", "dimname_src")
        .typed<Tensor (const Tensor &, Dimname, const Tensor &, const Tensor &)>();
    return op.call(self, dim, index, src);
#endif
}

// aten::scatter.dimname_value(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor
Tensor scatter(const Tensor & self, Dimname dim, const Tensor & index, Scalar value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::scatter_dimname_value(self, dim, index, value);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::scatter", "dimname_value")
        .typed<Tensor (const Tensor &, Dimname, const Tensor &, Scalar)>();
    return op.call(self, dim, index, value);
#endif
}

// aten::scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> Tensor
Tensor scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::scatter_add(self, dim, index, src);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::scatter_add", "")
        .typed<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>();
    return op.call(self, dim, index, src);
#endif
}

// aten::scatter_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor
Tensor scatter_add(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::scatter_add_dimname(self, dim, index, src);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::scatter_add", "dimname")
        .typed<Tensor (const Tensor &, Dimname, const Tensor &, const Tensor &)>();
    return op.call(self, dim, index, src);
#endif
}

// aten::bitwise_and.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & bitwise_and_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::bitwise_and_out_Tensor_out(out, self, other);
            break;
        default:
            AT_ERROR("bitwise_and_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bitwise_and", "Tensor_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::bitwise_and.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & bitwise_and_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::bitwise_and_out_Scalar_out(out, self, other);
            break;
        default:
            AT_ERROR("bitwise_and_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bitwise_and", "Scalar_out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, other);
#endif
}

// aten::bitwise_and.Scalar(Tensor self, Scalar other) -> Tensor
Tensor bitwise_and(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::bitwise_and_Scalar(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bitwise_and", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::bitwise_and.Tensor(Tensor self, Tensor other) -> Tensor
Tensor bitwise_and(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::bitwise_and_Tensor(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bitwise_and", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::__and__.Scalar(Tensor self, Scalar other) -> Tensor
Tensor __and__(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::__and___Scalar(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::__and__", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::__and__.Tensor(Tensor self, Tensor other) -> Tensor
Tensor __and__(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::__and___Tensor(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::__and__", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::bitwise_or.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & bitwise_or_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::bitwise_or_out_Tensor_out(out, self, other);
            break;
        default:
            AT_ERROR("bitwise_or_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bitwise_or", "Tensor_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::bitwise_or.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & bitwise_or_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::bitwise_or_out_Scalar_out(out, self, other);
            break;
        default:
            AT_ERROR("bitwise_or_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bitwise_or", "Scalar_out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, other);
#endif
}

// aten::bitwise_or.Scalar(Tensor self, Scalar other) -> Tensor
Tensor bitwise_or(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::bitwise_or_Scalar(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bitwise_or", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::bitwise_or.Tensor(Tensor self, Tensor other) -> Tensor
Tensor bitwise_or(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::bitwise_or_Tensor(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bitwise_or", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::__or__.Scalar(Tensor self, Scalar other) -> Tensor
Tensor __or__(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::__or___Scalar(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::__or__", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::__or__.Tensor(Tensor self, Tensor other) -> Tensor
Tensor __or__(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::__or___Tensor(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::__or__", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::bitwise_xor.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & bitwise_xor_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::bitwise_xor_out_Tensor_out(out, self, other);
            break;
        default:
            AT_ERROR("bitwise_xor_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bitwise_xor", "Tensor_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::bitwise_xor.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & bitwise_xor_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::bitwise_xor_out_Scalar_out(out, self, other);
            break;
        default:
            AT_ERROR("bitwise_xor_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bitwise_xor", "Scalar_out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, other);
#endif
}

// aten::bitwise_xor.Scalar(Tensor self, Scalar other) -> Tensor
Tensor bitwise_xor(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::bitwise_xor_Scalar(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bitwise_xor", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::bitwise_xor.Tensor(Tensor self, Tensor other) -> Tensor
Tensor bitwise_xor(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::bitwise_xor_Tensor(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bitwise_xor", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::__xor__.Scalar(Tensor self, Scalar other) -> Tensor
Tensor __xor__(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::__xor___Scalar(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::__xor__", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::__xor__.Tensor(Tensor self, Tensor other) -> Tensor
Tensor __xor__(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::__xor___Tensor(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::__xor__", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::__lshift__.Scalar(Tensor self, Scalar other) -> Tensor
Tensor __lshift__(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::__lshift___Scalar(self, other);
            break;
        default:
            AT_ERROR("__lshift__ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::__lshift__", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::__lshift__.Tensor(Tensor self, Tensor other) -> Tensor
Tensor __lshift__(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::__lshift___Tensor(self, other);
            break;
        default:
            AT_ERROR("__lshift__ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::__lshift__", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::__rshift__.Scalar(Tensor self, Scalar other) -> Tensor
Tensor __rshift__(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::__rshift___Scalar(self, other);
            break;
        default:
            AT_ERROR("__rshift__ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::__rshift__", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::__rshift__.Tensor(Tensor self, Tensor other) -> Tensor
Tensor __rshift__(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::__rshift___Tensor(self, other);
            break;
        default:
            AT_ERROR("__rshift__ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::__rshift__", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::addbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
Tensor & addbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, batch1, batch2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::addbmm_out_out(out, self, batch1, batch2, beta, alpha);
            break;
        default:
            AT_ERROR("addbmm_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::addbmm", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(out, self, batch1, batch2, beta, alpha);
#endif
}

// aten::addbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
Tensor addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, batch1, batch2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::addbmm(self, batch1, batch2, beta, alpha);
            break;
        default:
            AT_ERROR("addbmm not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::addbmm", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(self, batch1, batch2, beta, alpha);
#endif
}

// aten::diag.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)
Tensor & diag_out(Tensor & out, const Tensor & self, int64_t diagonal) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::diag_out_out(out, self, diagonal);
            break;
        default:
            AT_ERROR("diag_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::diag", "out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t)>();
    return op.call(out, self, diagonal);
#endif
}

// aten::diag(Tensor self, int diagonal=0) -> Tensor
Tensor diag(const Tensor & self, int64_t diagonal) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::diag(self, diagonal);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::diag", "")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(self, diagonal);
#endif
}

// aten::cross.out(Tensor self, Tensor other, int? dim=None, *, Tensor(a!) out) -> Tensor(a!)
Tensor & cross_out(Tensor & out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cross_out_out(out, self, other, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cross", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, c10::optional<int64_t>)>();
    return op.call(out, self, other, dim);
#endif
}

// aten::cross(Tensor self, Tensor other, int? dim=None) -> Tensor
Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cross(self, other, dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cross", "")
        .typed<Tensor (const Tensor &, const Tensor &, c10::optional<int64_t>)>();
    return op.call(self, other, dim);
#endif
}

// aten::triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)
Tensor & triu_out(Tensor & out, const Tensor & self, int64_t diagonal) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::triu_out_out(out, self, diagonal);
            break;
        default:
            AT_ERROR("triu_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::triu", "out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t)>();
    return op.call(out, self, diagonal);
#endif
}

// aten::triu(Tensor self, int diagonal=0) -> Tensor
Tensor triu(const Tensor & self, int64_t diagonal) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::triu(self, diagonal);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::triu", "")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(self, diagonal);
#endif
}

// aten::tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)
Tensor & tril_out(Tensor & out, const Tensor & self, int64_t diagonal) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::tril_out_out(out, self, diagonal);
            break;
        default:
            AT_ERROR("tril_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::tril", "out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t)>();
    return op.call(out, self, diagonal);
#endif
}

// aten::tril(Tensor self, int diagonal=0) -> Tensor
Tensor tril(const Tensor & self, int64_t diagonal) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::tril(self, diagonal);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::tril", "")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(self, diagonal);
#endif
}

// aten::tril_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor tril_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKey _dk = options.computeDispatchKey();
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::tril_indices(row, col, offset, options);
            break;
        default:
            AT_ERROR("tril_indices not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::tril_indices", "")
        .typed<Tensor (int64_t, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(row, col, offset, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::triu_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor triu_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKey _dk = options.computeDispatchKey();
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::triu_indices(row, col, offset, options);
            break;
        default:
            AT_ERROR("triu_indices not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::triu_indices", "")
        .typed<Tensor (int64_t, int64_t, int64_t, c10::optional<ScalarType>, c10::optional<Layout>, c10::optional<Device>, c10::optional<bool>)>();
    return op.call(row, col, offset, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
#endif
}

// aten::trace(Tensor self) -> Tensor
Tensor trace(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::trace(self);
            break;
        default:
            AT_ERROR("trace not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::trace", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & ne_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::ne_out_Scalar_out(out, self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::ne_out_Scalar_out(out, self, other);
            break;
        default:
            AT_ERROR("ne_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ne", "Scalar_out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, other);
#endif
}

// aten::ne.Scalar(Tensor self, Scalar other) -> Tensor
Tensor ne(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::ne_Scalar(self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::ne_Scalar(self, other);
            break;
        default:
            AT_ERROR("ne not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ne", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & ne_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::ne_out_Tensor_out(out, self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::ne_out_Tensor_out(out, self, other);
            break;
        default:
            AT_ERROR("ne_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ne", "Tensor_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::ne.Tensor(Tensor self, Tensor other) -> Tensor
Tensor ne(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::ne_Tensor(self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::ne_Tensor(self, other);
            break;
        default:
            AT_ERROR("ne not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ne", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & eq_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::eq_out_Scalar_out(out, self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::eq_out_Scalar_out(out, self, other);
            break;
        default:
            AT_ERROR("eq_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::eq", "Scalar_out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, other);
#endif
}

// aten::eq.Scalar(Tensor self, Scalar other) -> Tensor
Tensor eq(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::eq_Scalar(self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::eq_Scalar(self, other);
            break;
        default:
            AT_ERROR("eq not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::eq", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & eq_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::eq_out_Tensor_out(out, self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::eq_out_Tensor_out(out, self, other);
            break;
        default:
            AT_ERROR("eq_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::eq", "Tensor_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::eq.Tensor(Tensor self, Tensor other) -> Tensor
Tensor eq(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::eq_Tensor(self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::eq_Tensor(self, other);
            break;
        default:
            AT_ERROR("eq not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::eq", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & ge_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::ge_out_Scalar_out(out, self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::ge_out_Scalar_out(out, self, other);
            break;
        default:
            AT_ERROR("ge_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ge", "Scalar_out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, other);
#endif
}

// aten::ge.Scalar(Tensor self, Scalar other) -> Tensor
Tensor ge(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::ge_Scalar(self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::ge_Scalar(self, other);
            break;
        default:
            AT_ERROR("ge not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ge", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & ge_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::ge_out_Tensor_out(out, self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::ge_out_Tensor_out(out, self, other);
            break;
        default:
            AT_ERROR("ge_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ge", "Tensor_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::ge.Tensor(Tensor self, Tensor other) -> Tensor
Tensor ge(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::ge_Tensor(self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::ge_Tensor(self, other);
            break;
        default:
            AT_ERROR("ge not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ge", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & le_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::le_out_Scalar_out(out, self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::le_out_Scalar_out(out, self, other);
            break;
        default:
            AT_ERROR("le_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::le", "Scalar_out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, other);
#endif
}

// aten::le.Scalar(Tensor self, Scalar other) -> Tensor
Tensor le(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::le_Scalar(self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::le_Scalar(self, other);
            break;
        default:
            AT_ERROR("le not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::le", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & le_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::le_out_Tensor_out(out, self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::le_out_Tensor_out(out, self, other);
            break;
        default:
            AT_ERROR("le_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::le", "Tensor_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::le.Tensor(Tensor self, Tensor other) -> Tensor
Tensor le(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::le_Tensor(self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::le_Tensor(self, other);
            break;
        default:
            AT_ERROR("le not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::le", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & gt_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::gt_out_Scalar_out(out, self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::gt_out_Scalar_out(out, self, other);
            break;
        default:
            AT_ERROR("gt_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::gt", "Scalar_out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, other);
#endif
}

// aten::gt.Scalar(Tensor self, Scalar other) -> Tensor
Tensor gt(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::gt_Scalar(self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::gt_Scalar(self, other);
            break;
        default:
            AT_ERROR("gt not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::gt", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & gt_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::gt_out_Tensor_out(out, self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::gt_out_Tensor_out(out, self, other);
            break;
        default:
            AT_ERROR("gt_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::gt", "Tensor_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::gt.Tensor(Tensor self, Tensor other) -> Tensor
Tensor gt(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::gt_Tensor(self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::gt_Tensor(self, other);
            break;
        default:
            AT_ERROR("gt not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::gt", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & lt_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::lt_out_Scalar_out(out, self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::lt_out_Scalar_out(out, self, other);
            break;
        default:
            AT_ERROR("lt_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lt", "Scalar_out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, other);
#endif
}

// aten::lt.Scalar(Tensor self, Scalar other) -> Tensor
Tensor lt(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::lt_Scalar(self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::lt_Scalar(self, other);
            break;
        default:
            AT_ERROR("lt not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lt", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & lt_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::lt_out_Tensor_out(out, self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::lt_out_Tensor_out(out, self, other);
            break;
        default:
            AT_ERROR("lt_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lt", "Tensor_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::lt.Tensor(Tensor self, Tensor other) -> Tensor
Tensor lt(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::lt_Tensor(self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::lt_Tensor(self, other);
            break;
        default:
            AT_ERROR("lt not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lt", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> Tensor(a!)
Tensor & take_out(Tensor & out, const Tensor & self, const Tensor & index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, index);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::take_out_out(out, self, index);
            break;
        default:
            AT_ERROR("take_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::take", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, index);
#endif
}

// aten::take(Tensor self, Tensor index) -> Tensor
Tensor take(const Tensor & self, const Tensor & index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, index);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::take(self, index);
            break;
        default:
            AT_ERROR("take not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::take", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, index);
#endif
}

// aten::index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)
Tensor & index_select_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, index);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::index_select_out_out(out, self, dim, index);
            break;
        default:
            AT_ERROR("index_select_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::index_select", "out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t, const Tensor &)>();
    return op.call(out, self, dim, index);
#endif
}

// aten::index_select(Tensor self, int dim, Tensor index) -> Tensor
Tensor index_select(const Tensor & self, int64_t dim, const Tensor & index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, index);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::index_select(self, dim, index);
            break;
        default:
            AT_ERROR("index_select not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::index_select", "")
        .typed<Tensor (const Tensor &, int64_t, const Tensor &)>();
    return op.call(self, dim, index);
#endif
}

// aten::index_select.dimname_out(Tensor self, Dimname dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)
Tensor & index_select_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::index_select_out_dimname_out(out, self, dim, index);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::index_select", "dimname_out")
        .typed<Tensor & (Tensor &, const Tensor &, Dimname, const Tensor &)>();
    return op.call(out, self, dim, index);
#endif
}

// aten::index_select.dimname(Tensor self, Dimname dim, Tensor index) -> Tensor
Tensor index_select(const Tensor & self, Dimname dim, const Tensor & index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::index_select_dimname(self, dim, index);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::index_select", "dimname")
        .typed<Tensor (const Tensor &, Dimname, const Tensor &)>();
    return op.call(self, dim, index);
#endif
}

// aten::masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> Tensor(a!)
Tensor & masked_select_out(Tensor & out, const Tensor & self, const Tensor & mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, mask);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::masked_select_out_out(out, self, mask);
            break;
        default:
            AT_ERROR("masked_select_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::masked_select", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, mask);
#endif
}

// aten::masked_select(Tensor self, Tensor mask) -> Tensor
Tensor masked_select(const Tensor & self, const Tensor & mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, mask);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::masked_select(self, mask);
            break;
        default:
            AT_ERROR("masked_select not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::masked_select", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, mask);
#endif
}

// aten::nonzero.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & nonzero_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::nonzero_out_out(out, self);
            break;
        default:
            AT_ERROR("nonzero_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nonzero", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::nonzero(Tensor self) -> Tensor
Tensor nonzero(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::nonzero(self);
            break;
        default:
            AT_ERROR("nonzero not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nonzero", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::nonzero_numpy(Tensor self) -> Tensor[]
std::vector<Tensor> nonzero_numpy(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::nonzero_numpy(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nonzero_numpy", "")
        .typed<std::vector<Tensor> (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)
Tensor & gather_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, index);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::gather_out_out(out, self, dim, index, sparse_grad);
            break;
        default:
            AT_ERROR("gather_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::gather", "out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t, const Tensor &, bool)>();
    return op.call(out, self, dim, index, sparse_grad);
#endif
}

// aten::gather(Tensor self, int dim, Tensor index, *, bool sparse_grad=False) -> Tensor
Tensor gather(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, index);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::gather(self, dim, index, sparse_grad);
            break;
        default:
            AT_ERROR("gather not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::gather", "")
        .typed<Tensor (const Tensor &, int64_t, const Tensor &, bool)>();
    return op.call(self, dim, index, sparse_grad);
#endif
}

// aten::gather.dimname_out(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)
Tensor & gather_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::gather_out_dimname_out(out, self, dim, index, sparse_grad);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::gather", "dimname_out")
        .typed<Tensor & (Tensor &, const Tensor &, Dimname, const Tensor &, bool)>();
    return op.call(out, self, dim, index, sparse_grad);
#endif
}

// aten::gather.dimname(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False) -> Tensor
Tensor gather(const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::gather_dimname(self, dim, index, sparse_grad);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::gather", "dimname")
        .typed<Tensor (const Tensor &, Dimname, const Tensor &, bool)>();
    return op.call(self, dim, index, sparse_grad);
#endif
}

// aten::_gather_sparse_backward(Tensor self, int dim, Tensor index, Tensor grad) -> Tensor
Tensor _gather_sparse_backward(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & grad) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_gather_sparse_backward(self, dim, index, grad);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_gather_sparse_backward", "")
        .typed<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>();
    return op.call(self, dim, index, grad);
#endif
}

// aten::addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)
Tensor & addcmul_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::addcmul_out_out(out, self, tensor1, tensor2, value);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::addcmul", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, tensor1, tensor2, value);
#endif
}

// aten::addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor
Tensor addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::addcmul(self, tensor1, tensor2, value);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::addcmul", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar)>();
    return op.call(self, tensor1, tensor2, value);
#endif
}

// aten::addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)
Tensor & addcdiv_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::addcdiv_out_out(out, self, tensor1, tensor2, value);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::addcdiv", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, tensor1, tensor2, value);
#endif
}

// aten::addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor
Tensor addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::addcdiv(self, tensor1, tensor2, value);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::addcdiv", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar)>();
    return op.call(self, tensor1, tensor2, value);
#endif
}

// aten::lstsq.X(Tensor self, Tensor A, *, Tensor(a!) X, Tensor(b!) qr) -> (Tensor(a!) solution, Tensor(b!) QR)
std::tuple<Tensor &,Tensor &> lstsq_out(Tensor & X, Tensor & qr, const Tensor & self, const Tensor & A) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(X, qr, self, A);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::lstsq_out_X(X, qr, self, A);
            break;
        default:
            AT_ERROR("lstsq_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lstsq", "X")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &)>();
    return op.call(X, qr, self, A);
#endif
}

// aten::lstsq(Tensor self, Tensor A) -> (Tensor solution, Tensor QR)
std::tuple<Tensor,Tensor> lstsq(const Tensor & self, const Tensor & A) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, A);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::lstsq(self, A);
            break;
        default:
            AT_ERROR("lstsq not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lstsq", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &)>();
    return op.call(self, A);
#endif
}

// aten::triangular_solve.X(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False, *, Tensor(a!) X, Tensor(b!) M) -> (Tensor(a!) solution, Tensor(b!) cloned_coefficient)
std::tuple<Tensor &,Tensor &> triangular_solve_out(Tensor & X, Tensor & M, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::triangular_solve_out_X(X, M, self, A, upper, transpose, unitriangular);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::triangular_solve", "X")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &, bool, bool, bool)>();
    return op.call(X, M, self, A, upper, transpose, unitriangular);
#endif
}

// aten::triangular_solve(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False) -> (Tensor solution, Tensor cloned_coefficient)
std::tuple<Tensor,Tensor> triangular_solve(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::triangular_solve(self, A, upper, transpose, unitriangular);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::triangular_solve", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, bool, bool, bool)>();
    return op.call(self, A, upper, transpose, unitriangular);
#endif
}

// aten::_triangular_solve_helper(Tensor self, Tensor A, bool upper, bool transpose, bool unitriangular) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _triangular_solve_helper(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, A);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_triangular_solve_helper(self, A, upper, transpose, unitriangular);
            break;
        default:
            AT_ERROR("_triangular_solve_helper not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_triangular_solve_helper", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, bool, bool, bool)>();
    return op.call(self, A, upper, transpose, unitriangular);
#endif
}

// aten::symeig.e(Tensor self, bool eigenvectors=False, bool upper=True, *, Tensor(a!) e, Tensor(b!) V) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)
std::tuple<Tensor &,Tensor &> symeig_out(Tensor & e, Tensor & V, const Tensor & self, bool eigenvectors, bool upper) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::symeig_out_e(e, V, self, eigenvectors, upper);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::symeig", "e")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, bool, bool)>();
    return op.call(e, V, self, eigenvectors, upper);
#endif
}

// aten::symeig(Tensor self, bool eigenvectors=False, bool upper=True) -> (Tensor eigenvalues, Tensor eigenvectors)
std::tuple<Tensor,Tensor> symeig(const Tensor & self, bool eigenvectors, bool upper) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::symeig(self, eigenvectors, upper);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::symeig", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, bool, bool)>();
    return op.call(self, eigenvectors, upper);
#endif
}

// aten::_symeig_helper(Tensor self, bool eigenvectors, bool upper) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _symeig_helper(const Tensor & self, bool eigenvectors, bool upper) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_symeig_helper(self, eigenvectors, upper);
            break;
        default:
            AT_ERROR("_symeig_helper not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_symeig_helper", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, bool, bool)>();
    return op.call(self, eigenvectors, upper);
#endif
}

// aten::eig.e(Tensor self, bool eigenvectors=False, *, Tensor(a!) e, Tensor(b!) v) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)
std::tuple<Tensor &,Tensor &> eig_out(Tensor & e, Tensor & v, const Tensor & self, bool eigenvectors) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(e, v, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::eig_out_e(e, v, self, eigenvectors);
            break;
        default:
            AT_ERROR("eig_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::eig", "e")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, bool)>();
    return op.call(e, v, self, eigenvectors);
#endif
}

// aten::eig(Tensor self, bool eigenvectors=False) -> (Tensor eigenvalues, Tensor eigenvectors)
std::tuple<Tensor,Tensor> eig(const Tensor & self, bool eigenvectors) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::eig(self, eigenvectors);
            break;
        default:
            AT_ERROR("eig not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::eig", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, bool)>();
    return op.call(self, eigenvectors);
#endif
}

// aten::svd.U(Tensor self, bool some=True, bool compute_uv=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) V) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) V)
std::tuple<Tensor &,Tensor &,Tensor &> svd_out(Tensor & U, Tensor & S, Tensor & V, const Tensor & self, bool some, bool compute_uv) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::svd_out_U(U, S, V, self, some, compute_uv);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::svd", "U")
        .typed<std::tuple<Tensor &,Tensor &,Tensor &> (Tensor &, Tensor &, Tensor &, const Tensor &, bool, bool)>();
    return op.call(U, S, V, self, some, compute_uv);
#endif
}

// aten::svd(Tensor self, bool some=True, bool compute_uv=True) -> (Tensor U, Tensor S, Tensor V)
std::tuple<Tensor,Tensor,Tensor> svd(const Tensor & self, bool some, bool compute_uv) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::svd(self, some, compute_uv);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::svd", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, bool, bool)>();
    return op.call(self, some, compute_uv);
#endif
}

// aten::_svd_helper(Tensor self, bool some, bool compute_uv) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> _svd_helper(const Tensor & self, bool some, bool compute_uv) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_svd_helper(self, some, compute_uv);
            break;
        default:
            AT_ERROR("_svd_helper not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_svd_helper", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, bool, bool)>();
    return op.call(self, some, compute_uv);
#endif
}

// aten::cholesky.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & cholesky_out(Tensor & out, const Tensor & self, bool upper) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cholesky_out_out(out, self, upper);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cholesky", "out")
        .typed<Tensor & (Tensor &, const Tensor &, bool)>();
    return op.call(out, self, upper);
#endif
}

// aten::cholesky(Tensor self, bool upper=False) -> Tensor
Tensor cholesky(const Tensor & self, bool upper) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cholesky(self, upper);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cholesky", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, upper);
#endif
}

// aten::_cholesky_helper(Tensor self, bool upper) -> Tensor
Tensor _cholesky_helper(const Tensor & self, bool upper) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_cholesky_helper(self, upper);
            break;
        default:
            AT_ERROR("_cholesky_helper not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cholesky_helper", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, upper);
#endif
}

// aten::cholesky_solve.out(Tensor self, Tensor input2, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & cholesky_solve_out(Tensor & out, const Tensor & self, const Tensor & input2, bool upper) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cholesky_solve_out_out(out, self, input2, upper);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cholesky_solve", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, bool)>();
    return op.call(out, self, input2, upper);
#endif
}

// aten::cholesky_solve(Tensor self, Tensor input2, bool upper=False) -> Tensor
Tensor cholesky_solve(const Tensor & self, const Tensor & input2, bool upper) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::cholesky_solve(self, input2, upper);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cholesky_solve", "")
        .typed<Tensor (const Tensor &, const Tensor &, bool)>();
    return op.call(self, input2, upper);
#endif
}

// aten::_cholesky_solve_helper(Tensor self, Tensor A, bool upper) -> Tensor
Tensor _cholesky_solve_helper(const Tensor & self, const Tensor & A, bool upper) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, A);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_cholesky_solve_helper(self, A, upper);
            break;
        default:
            AT_ERROR("_cholesky_solve_helper not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cholesky_solve_helper", "")
        .typed<Tensor (const Tensor &, const Tensor &, bool)>();
    return op.call(self, A, upper);
#endif
}

// aten::solve(Tensor self, Tensor A) -> (Tensor solution, Tensor LU)
std::tuple<Tensor,Tensor> solve(const Tensor & self, const Tensor & A) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::solve(self, A);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::solve", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &)>();
    return op.call(self, A);
#endif
}

// aten::solve.solution(Tensor self, Tensor A, *, Tensor(a!) solution, Tensor(b!) lu) -> (Tensor(a!) solution, Tensor(b!) LU)
std::tuple<Tensor &,Tensor &> solve_out(Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::solve_out_solution(solution, lu, self, A);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::solve", "solution")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &)>();
    return op.call(solution, lu, self, A);
#endif
}

// aten::_solve_helper(Tensor self, Tensor A) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _solve_helper(const Tensor & self, const Tensor & A) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, A);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_solve_helper(self, A);
            break;
        default:
            AT_ERROR("_solve_helper not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_solve_helper", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &)>();
    return op.call(self, A);
#endif
}

// aten::cholesky_inverse.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & cholesky_inverse_out(Tensor & out, const Tensor & self, bool upper) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::cholesky_inverse_out_out(out, self, upper);
            break;
        default:
            AT_ERROR("cholesky_inverse_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cholesky_inverse", "out")
        .typed<Tensor & (Tensor &, const Tensor &, bool)>();
    return op.call(out, self, upper);
#endif
}

// aten::cholesky_inverse(Tensor self, bool upper=False) -> Tensor
Tensor cholesky_inverse(const Tensor & self, bool upper) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::cholesky_inverse(self, upper);
            break;
        default:
            AT_ERROR("cholesky_inverse not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::cholesky_inverse", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, upper);
#endif
}

// aten::qr.Q(Tensor self, bool some=True, *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)
std::tuple<Tensor &,Tensor &> qr_out(Tensor & Q, Tensor & R, const Tensor & self, bool some) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::qr_out_Q(Q, R, self, some);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::qr", "Q")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, bool)>();
    return op.call(Q, R, self, some);
#endif
}

// aten::qr(Tensor self, bool some=True) -> (Tensor Q, Tensor R)
std::tuple<Tensor,Tensor> qr(const Tensor & self, bool some) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::qr(self, some);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::qr", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, bool)>();
    return op.call(self, some);
#endif
}

// aten::_qr_helper(Tensor self, bool some) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _qr_helper(const Tensor & self, bool some) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_qr_helper(self, some);
            break;
        default:
            AT_ERROR("_qr_helper not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_qr_helper", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, bool)>();
    return op.call(self, some);
#endif
}

// aten::geqrf.a(Tensor self, *, Tensor(a!) a, Tensor(b!) tau) -> (Tensor(a!) a, Tensor(b!) tau)
std::tuple<Tensor &,Tensor &> geqrf_out(Tensor & a, Tensor & tau, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(a, tau, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::geqrf_out_a(a, tau, self);
            break;
        default:
            AT_ERROR("geqrf_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::geqrf", "a")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &)>();
    return op.call(a, tau, self);
#endif
}

// aten::geqrf(Tensor self) -> (Tensor a, Tensor tau)
std::tuple<Tensor,Tensor> geqrf(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::geqrf(self);
            break;
        default:
            AT_ERROR("geqrf not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::geqrf", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::orgqr.out(Tensor self, Tensor input2, *, Tensor(a!) out) -> Tensor(a!)
Tensor & orgqr_out(Tensor & out, const Tensor & self, const Tensor & input2) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, input2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::orgqr_out_out(out, self, input2);
            break;
        default:
            AT_ERROR("orgqr_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::orgqr", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, input2);
#endif
}

// aten::orgqr(Tensor self, Tensor input2) -> Tensor
Tensor orgqr(const Tensor & self, const Tensor & input2) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, input2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::orgqr(self, input2);
            break;
        default:
            AT_ERROR("orgqr not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::orgqr", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, input2);
#endif
}

// aten::ormqr.out(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False, *, Tensor(a!) out) -> Tensor(a!)
Tensor & ormqr_out(Tensor & out, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, input2, input3);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::ormqr_out_out(out, self, input2, input3, left, transpose);
            break;
        default:
            AT_ERROR("ormqr_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ormqr", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, bool)>();
    return op.call(out, self, input2, input3, left, transpose);
#endif
}

// aten::ormqr(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False) -> Tensor
Tensor ormqr(const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, input2, input3);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::ormqr(self, input2, input3, left, transpose);
            break;
        default:
            AT_ERROR("ormqr not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::ormqr", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, bool, bool)>();
    return op.call(self, input2, input3, left, transpose);
#endif
}

// aten::_lu_with_info(Tensor self, bool pivot=True, bool check_errors=True) -> (Tensor, Tensor, Tensor)
std::tuple<Tensor,Tensor,Tensor> _lu_with_info(const Tensor & self, bool pivot, bool check_errors) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_lu_with_info(self, pivot, check_errors);
            break;
        default:
            AT_ERROR("_lu_with_info not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_lu_with_info", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, bool, bool)>();
    return op.call(self, pivot, check_errors);
#endif
}

// aten::lu_solve.out(Tensor self, Tensor LU_data, Tensor LU_pivots, *, Tensor(a!) out) -> Tensor(a!)
Tensor & lu_solve_out(Tensor & out, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::lu_solve_out_out(out, self, LU_data, LU_pivots);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lu_solve", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, LU_data, LU_pivots);
#endif
}

// aten::lu_solve(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor
Tensor lu_solve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::lu_solve(self, LU_data, LU_pivots);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lu_solve", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(self, LU_data, LU_pivots);
#endif
}

// aten::_lu_solve_helper(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor
Tensor _lu_solve_helper(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, LU_data, LU_pivots);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_lu_solve_helper(self, LU_data, LU_pivots);
            break;
        default:
            AT_ERROR("_lu_solve_helper not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_lu_solve_helper", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(self, LU_data, LU_pivots);
#endif
}

// aten::multinomial.out(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
Tensor & multinomial_out(Tensor & out, const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::multinomial_out_out(out, self, num_samples, replacement, generator);
            break;
        default:
            AT_ERROR("multinomial_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::multinomial", "out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t, bool, c10::optional<Generator>)>();
    return op.call(out, self, num_samples, replacement, generator);
#endif
}

// aten::multinomial(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None) -> Tensor
Tensor multinomial(const Tensor & self, int64_t num_samples, bool replacement, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::multinomial(self, num_samples, replacement, generator);
            break;
        default:
            AT_ERROR("multinomial not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::multinomial", "")
        .typed<Tensor (const Tensor &, int64_t, bool, c10::optional<Generator>)>();
    return op.call(self, num_samples, replacement, generator);
#endif
}

// aten::_multinomial_alias_setup(Tensor probs) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _multinomial_alias_setup(const Tensor & probs) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(probs);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_multinomial_alias_setup(probs);
            break;
        default:
            AT_ERROR("_multinomial_alias_setup not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_multinomial_alias_setup", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &)>();
    return op.call(probs);
#endif
}

// aten::_multinomial_alias_draw(Tensor J, Tensor q, int num_samples, *, Generator? generator=None) -> Tensor
Tensor _multinomial_alias_draw(const Tensor & J, const Tensor & q, int64_t num_samples, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(J, q);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_multinomial_alias_draw(J, q, num_samples, generator);
            break;
        default:
            AT_ERROR("_multinomial_alias_draw not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_multinomial_alias_draw", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t, c10::optional<Generator>)>();
    return op.call(J, q, num_samples, generator);
#endif
}

// aten::lgamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & lgamma_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::lgamma_out_out(out, self);
            break;
        default:
            AT_ERROR("lgamma_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lgamma", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::lgamma(Tensor self) -> Tensor
Tensor lgamma(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::lgamma(self);
            break;
        default:
            AT_ERROR("lgamma not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lgamma", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::digamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & digamma_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::digamma_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::digamma", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::digamma(Tensor self) -> Tensor
Tensor digamma(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::digamma(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::digamma", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & polygamma_out(Tensor & out, int64_t n, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::polygamma_out_out(out, n, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::polygamma", "out")
        .typed<Tensor & (Tensor &, int64_t, const Tensor &)>();
    return op.call(out, n, self);
#endif
}

// aten::polygamma(int n, Tensor self) -> Tensor
Tensor polygamma(int64_t n, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::polygamma(n, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::polygamma", "")
        .typed<Tensor (int64_t, const Tensor &)>();
    return op.call(n, self);
#endif
}

// aten::erfinv(Tensor self) -> Tensor
Tensor erfinv(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::erfinv(self);
            break;
        default:
            AT_ERROR("erfinv not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::erfinv", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::erfinv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & erfinv_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::erfinv_out_out(out, self);
            break;
        default:
            AT_ERROR("erfinv_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::erfinv", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::sign(Tensor self) -> Tensor
Tensor sign(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sign(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sign", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::sign.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & sign_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::sign_out_out(out, self);
            break;
        default:
            AT_ERROR("sign_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sign", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::dist(Tensor self, Tensor other, Scalar p=2) -> Tensor
Tensor dist(const Tensor & self, const Tensor & other, Scalar p) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::dist(self, other, p);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::dist", "")
        .typed<Tensor (const Tensor &, const Tensor &, Scalar)>();
    return op.call(self, other, p);
#endif
}

// aten::atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & atan2_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::atan2_out_out(out, self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::atan2", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::atan2(Tensor self, Tensor other) -> Tensor
Tensor atan2(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::atan2(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::atan2", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::lerp.Scalar_out(Tensor self, Tensor end, Scalar weight, *, Tensor(a!) out) -> Tensor(a!)
Tensor & lerp_out(Tensor & out, const Tensor & self, const Tensor & end, Scalar weight) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, end);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::lerp_out_Scalar_out(out, self, end, weight);
            break;
        default:
            AT_ERROR("lerp_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lerp", "Scalar_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, end, weight);
#endif
}

// aten::lerp.Tensor_out(Tensor self, Tensor end, Tensor weight, *, Tensor(a!) out) -> Tensor(a!)
Tensor & lerp_out(Tensor & out, const Tensor & self, const Tensor & end, const Tensor & weight) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, end, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::lerp_out_Tensor_out(out, self, end, weight);
            break;
        default:
            AT_ERROR("lerp_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lerp", "Tensor_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, end, weight);
#endif
}

// aten::lerp.Scalar(Tensor self, Tensor end, Scalar weight) -> Tensor
Tensor lerp(const Tensor & self, const Tensor & end, Scalar weight) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, end);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::lerp_Scalar(self, end, weight);
            break;
        default:
            AT_ERROR("lerp not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lerp", "Scalar")
        .typed<Tensor (const Tensor &, const Tensor &, Scalar)>();
    return op.call(self, end, weight);
#endif
}

// aten::lerp.Tensor(Tensor self, Tensor end, Tensor weight) -> Tensor
Tensor lerp(const Tensor & self, const Tensor & end, const Tensor & weight) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, end, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::lerp_Tensor(self, end, weight);
            break;
        default:
            AT_ERROR("lerp not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::lerp", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(self, end, weight);
#endif
}

// aten::histc.out(Tensor self, int bins=100, Scalar min=0, Scalar max=0, *, Tensor(a!) out) -> Tensor(a!)
Tensor & histc_out(Tensor & out, const Tensor & self, int64_t bins, Scalar min, Scalar max) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::histc_out_out(out, self, bins, min, max);
            break;
        default:
            AT_ERROR("histc_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::histc", "out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t, Scalar, Scalar)>();
    return op.call(out, self, bins, min, max);
#endif
}

// aten::histc(Tensor self, int bins=100, Scalar min=0, Scalar max=0) -> Tensor
Tensor histc(const Tensor & self, int64_t bins, Scalar min, Scalar max) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::histc(self, bins, min, max);
            break;
        default:
            AT_ERROR("histc not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::histc", "")
        .typed<Tensor (const Tensor &, int64_t, Scalar, Scalar)>();
    return op.call(self, bins, min, max);
#endif
}

// aten::fmod.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & fmod_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::fmod_out_Scalar_out(out, self, other);
            break;
        default:
            AT_ERROR("fmod_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fmod", "Scalar_out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, other);
#endif
}

// aten::fmod.Scalar(Tensor self, Scalar other) -> Tensor
Tensor fmod(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::fmod_Scalar(self, other);
            break;
        default:
            AT_ERROR("fmod not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fmod", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & fmod_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::fmod_out_Tensor_out(out, self, other);
            break;
        default:
            AT_ERROR("fmod_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fmod", "Tensor_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::fmod.Tensor(Tensor self, Tensor other) -> Tensor
Tensor fmod(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::fmod_Tensor(self, other);
            break;
        default:
            AT_ERROR("fmod not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fmod", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::remainder.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & remainder_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::remainder_out_Scalar_out(out, self, other);
            break;
        default:
            AT_ERROR("remainder_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::remainder", "Scalar_out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, other);
#endif
}

// aten::remainder.Scalar(Tensor self, Scalar other) -> Tensor
Tensor remainder(const Tensor & self, Scalar other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::remainder_Scalar(self, other);
            break;
        default:
            AT_ERROR("remainder not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::remainder", "Scalar")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, other);
#endif
}

// aten::remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & remainder_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::remainder_out_Tensor_out(out, self, other);
            break;
        default:
            AT_ERROR("remainder_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::remainder", "Tensor_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::remainder.Tensor(Tensor self, Tensor other) -> Tensor
Tensor remainder(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::remainder_Tensor(self, other);
            break;
        default:
            AT_ERROR("remainder not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::remainder", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & min_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::min_out_out(out, self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::min", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::min.other(Tensor self, Tensor other) -> Tensor
Tensor min(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::min_other(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::min", "other")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::min(Tensor self) -> Tensor
Tensor min(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::min(self);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::min(self);
            break;
        default:
            AT_ERROR("min not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::min", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
Tensor & max_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::max_out_out(out, self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, other);
#endif
}

// aten::max.other(Tensor self, Tensor other) -> Tensor
Tensor max(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::max_other(self, other);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max", "other")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::max(Tensor self) -> Tensor
Tensor max(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max(self);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::max(self);
            break;
        default:
            AT_ERROR("max not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::median(Tensor self) -> Tensor
Tensor median(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::median(self);
            break;
        default:
            AT_ERROR("median not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::median", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::sort.values(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> sort_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool descending) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(values, indices, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::sort_out_values(values, indices, self, dim, descending);
            break;
        default:
            AT_ERROR("sort_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sort", "values")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>();
    return op.call(values, indices, self, dim, descending);
#endif
}

// aten::sort(Tensor self, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> sort(const Tensor & self, int64_t dim, bool descending) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::sort(self, dim, descending);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::sort(self, dim, descending);
            break;
        default:
            AT_ERROR("sort not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sort", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>();
    return op.call(self, dim, descending);
#endif
}

// aten::sort.dimname_values(Tensor self, Dimname dim, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> sort_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool descending) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sort_out_dimname_values(values, indices, self, dim, descending);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sort", "dimname_values")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname, bool)>();
    return op.call(values, indices, self, dim, descending);
#endif
}

// aten::sort.dimname(Tensor self, Dimname dim, bool descending=False) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> sort(const Tensor & self, Dimname dim, bool descending) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sort_dimname(self, dim, descending);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sort", "dimname")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, Dimname, bool)>();
    return op.call(self, dim, descending);
#endif
}

// aten::argsort(Tensor self, int dim=-1, bool descending=False) -> Tensor
Tensor argsort(const Tensor & self, int64_t dim, bool descending) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::argsort(self, dim, descending);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::argsort", "")
        .typed<Tensor (const Tensor &, int64_t, bool)>();
    return op.call(self, dim, descending);
#endif
}

// aten::argsort.dimname(Tensor self, Dimname dim, bool descending=False) -> Tensor
Tensor argsort(const Tensor & self, Dimname dim, bool descending) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::argsort_dimname(self, dim, descending);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::argsort", "dimname")
        .typed<Tensor (const Tensor &, Dimname, bool)>();
    return op.call(self, dim, descending);
#endif
}

// aten::topk.values(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) ->(Tensor(a!) values, Tensor(b!) indices)
std::tuple<Tensor &,Tensor &> topk_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(values, indices, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::topk_out_values(values, indices, self, k, dim, largest, sorted);
            break;
        default:
            AT_ERROR("topk_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::topk", "values")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, int64_t, bool, bool)>();
    return op.call(values, indices, self, k, dim, largest, sorted);
#endif
}

// aten::topk(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices)
std::tuple<Tensor,Tensor> topk(const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::topk(self, k, dim, largest, sorted);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::topk(self, k, dim, largest, sorted);
            break;
        default:
            AT_ERROR("topk not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::topk", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, int64_t, bool, bool)>();
    return op.call(self, k, dim, largest, sorted);
#endif
}

// aten::all(Tensor self) -> Tensor
Tensor all(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::all(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::all", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::any(Tensor self) -> Tensor
Tensor any(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::any(self);
            break;
        default:
            AT_ERROR("any not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::any", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::renorm.out(Tensor self, Scalar p, int dim, Scalar maxnorm, *, Tensor(a!) out) -> Tensor(a!)
Tensor & renorm_out(Tensor & out, const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::renorm_out_out(out, self, p, dim, maxnorm);
            break;
        default:
            AT_ERROR("renorm_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::renorm", "out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar, int64_t, Scalar)>();
    return op.call(out, self, p, dim, maxnorm);
#endif
}

// aten::renorm(Tensor self, Scalar p, int dim, Scalar maxnorm) -> Tensor
Tensor renorm(const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::renorm(self, p, dim, maxnorm);
            break;
        default:
            AT_ERROR("renorm not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::renorm", "")
        .typed<Tensor (const Tensor &, Scalar, int64_t, Scalar)>();
    return op.call(self, p, dim, maxnorm);
#endif
}

// aten::unfold_backward(Tensor grad_in, int[] input_sizes, int dim, int size, int step) -> Tensor
Tensor unfold_backward(const Tensor & grad_in, IntArrayRef input_sizes, int64_t dim, int64_t size, int64_t step) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_in);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::unfold_backward(grad_in, input_sizes, dim, size, step);
            break;
        default:
            AT_ERROR("unfold_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::unfold_backward", "")
        .typed<Tensor (const Tensor &, IntArrayRef, int64_t, int64_t, int64_t)>();
    return op.call(grad_in, input_sizes, dim, size, step);
#endif
}

// aten::equal(Tensor self, Tensor other) -> bool
bool equal(const Tensor & self, const Tensor & other) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, other);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::equal(self, other);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::equal(self, other);
            break;
        default:
            AT_ERROR("equal not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::equal", "")
        .typed<bool (const Tensor &, const Tensor &)>();
    return op.call(self, other);
#endif
}

// aten::pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)
Tensor & pow_out(Tensor & out, const Tensor & self, const Tensor & exponent) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, exponent);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::pow_out_Tensor_Tensor_out(out, self, exponent);
            break;
        default:
            AT_ERROR("pow_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::pow", "Tensor_Tensor_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(out, self, exponent);
#endif
}

// aten::pow.Tensor_Tensor(Tensor self, Tensor exponent) -> Tensor
Tensor pow(const Tensor & self, const Tensor & exponent) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, exponent);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::pow_Tensor_Tensor(self, exponent);
            break;
        default:
            AT_ERROR("pow not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::pow", "Tensor_Tensor")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(self, exponent);
#endif
}

// aten::pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)
Tensor & pow_out(Tensor & out, Scalar self, const Tensor & exponent) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, exponent);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::pow_out_Scalar_out(out, self, exponent);
            break;
        default:
            AT_ERROR("pow_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::pow", "Scalar_out")
        .typed<Tensor & (Tensor &, Scalar, const Tensor &)>();
    return op.call(out, self, exponent);
#endif
}

// aten::pow.Scalar(Scalar self, Tensor exponent) -> Tensor
Tensor pow(Scalar self, const Tensor & exponent) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(exponent);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::pow_Scalar(self, exponent);
            break;
        default:
            AT_ERROR("pow not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::pow", "Scalar")
        .typed<Tensor (Scalar, const Tensor &)>();
    return op.call(self, exponent);
#endif
}

// aten::normal.Tensor_float_out(Tensor mean, float std=1, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
Tensor & normal_out(Tensor & out, const Tensor & mean, double std, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::normal_out_Tensor_float_out(out, mean, std, generator);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::normal", "Tensor_float_out")
        .typed<Tensor & (Tensor &, const Tensor &, double, c10::optional<Generator>)>();
    return op.call(out, mean, std, generator);
#endif
}

// aten::normal.Tensor_float(Tensor mean, float std=1, *, Generator? generator=None) -> Tensor
Tensor normal(const Tensor & mean, double std, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::normal_Tensor_float(mean, std, generator);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::normal", "Tensor_float")
        .typed<Tensor (const Tensor &, double, c10::optional<Generator>)>();
    return op.call(mean, std, generator);
#endif
}

// aten::normal.float_Tensor_out(float mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
Tensor & normal_out(Tensor & out, double mean, const Tensor & std, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::normal_out_float_Tensor_out(out, mean, std, generator);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::normal", "float_Tensor_out")
        .typed<Tensor & (Tensor &, double, const Tensor &, c10::optional<Generator>)>();
    return op.call(out, mean, std, generator);
#endif
}

// aten::normal.float_Tensor(float mean, Tensor std, *, Generator? generator=None) -> Tensor
Tensor normal(double mean, const Tensor & std, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::normal_float_Tensor(mean, std, generator);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::normal", "float_Tensor")
        .typed<Tensor (double, const Tensor &, c10::optional<Generator>)>();
    return op.call(mean, std, generator);
#endif
}

// aten::normal.Tensor_Tensor_out(Tensor mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
Tensor & normal_out(Tensor & out, const Tensor & mean, const Tensor & std, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::normal_out_Tensor_Tensor_out(out, mean, std, generator);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::normal", "Tensor_Tensor_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, c10::optional<Generator>)>();
    return op.call(out, mean, std, generator);
#endif
}

// aten::normal.Tensor_Tensor(Tensor mean, Tensor std, *, Generator? generator=None) -> Tensor
Tensor normal(const Tensor & mean, const Tensor & std, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::normal_Tensor_Tensor(mean, std, generator);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::normal", "Tensor_Tensor")
        .typed<Tensor (const Tensor &, const Tensor &, c10::optional<Generator>)>();
    return op.call(mean, std, generator);
#endif
}

// aten::normal.float_float(float mean, float std, int[] size, *, Generator? generator=None, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
Tensor normal(double mean, double std, IntArrayRef size, c10::optional<Generator> generator, const TensorOptions & options) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::normal_float_float(mean, std, size, generator, options);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::normal", "float_float")
        .typed<Tensor (double, double, IntArrayRef, c10::optional<Generator>, const TensorOptions &)>();
    return op.call(mean, std, size, generator, options);
#endif
}

// aten::normal.float_float_out(float mean, float std, int[] size, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
Tensor & normal_out(Tensor & out, double mean, double std, IntArrayRef size, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::normal_out_float_float_out(out, mean, std, size, generator);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::normal", "float_float_out")
        .typed<Tensor & (Tensor &, double, double, IntArrayRef, c10::optional<Generator>)>();
    return op.call(out, mean, std, size, generator);
#endif
}

// aten::alias(Tensor(a) self) -> Tensor(a)
Tensor alias(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::alias(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::alias", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::_addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
Tensor _addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, vec1, vec2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_addr(self, vec1, vec2, beta, alpha);
            break;
        default:
            AT_ERROR("_addr not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_addr", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(self, vec1, vec2, beta, alpha);
#endif
}

// aten::_addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
Tensor & _addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, vec1, vec2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_addr_(self, vec1, vec2, beta, alpha);
            break;
        default:
            AT_ERROR("_addr_ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_addr_", "")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(self, vec1, vec2, beta, alpha);
#endif
}

// aten::_addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
Tensor & _addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, vec1, vec2);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_addr_out_out(out, self, vec1, vec2, beta, alpha);
            break;
        default:
            AT_ERROR("_addr_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_addr", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(out, self, vec1, vec2, beta, alpha);
#endif
}

// aten::_index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)
Tensor & _index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, index, source);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_index_copy_(self, dim, index, source);
            break;
        default:
            AT_ERROR("_index_copy_ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_index_copy_", "")
        .typed<Tensor & (Tensor &, int64_t, const Tensor &, const Tensor &)>();
    return op.call(self, dim, index, source);
#endif
}

// aten::_cumsum(Tensor self, int dim) -> Tensor
Tensor _cumsum(const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_cumsum(self, dim);
            break;
        default:
            AT_ERROR("_cumsum not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cumsum", "")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(self, dim);
#endif
}

// aten::_cumsum.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)
Tensor & _cumsum_out(Tensor & out, const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_cumsum_out_out(out, self, dim);
            break;
        default:
            AT_ERROR("_cumsum_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cumsum", "out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t)>();
    return op.call(out, self, dim);
#endif
}

// aten::_cumprod(Tensor self, int dim) -> Tensor
Tensor _cumprod(const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_cumprod(self, dim);
            break;
        default:
            AT_ERROR("_cumprod not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cumprod", "")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(self, dim);
#endif
}

// aten::_cumprod.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)
Tensor & _cumprod_out(Tensor & out, const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_cumprod_out_out(out, self, dim);
            break;
        default:
            AT_ERROR("_cumprod_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cumprod", "out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t)>();
    return op.call(out, self, dim);
#endif
}

// aten::_var(Tensor self, bool unbiased=True) -> Tensor
Tensor _var(const Tensor & self, bool unbiased) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_var(self, unbiased);
            break;
        default:
            AT_ERROR("_var not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_var", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, unbiased);
#endif
}

// aten::_std(Tensor self, bool unbiased=True) -> Tensor
Tensor _std(const Tensor & self, bool unbiased) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_std(self, unbiased);
            break;
        default:
            AT_ERROR("_std not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_std", "")
        .typed<Tensor (const Tensor &, bool)>();
    return op.call(self, unbiased);
#endif
}

// aten::_amp_non_finite_check_and_unscale_(Tensor(a!) self, Tensor(b!) found_inf, Tensor inv_scale) -> ()
void _amp_non_finite_check_and_unscale_(Tensor & self, Tensor & found_inf, const Tensor & inv_scale) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, found_inf, inv_scale);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_amp_non_finite_check_and_unscale_ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_amp_non_finite_check_and_unscale_", "")
        .typed<void (Tensor &, Tensor &, const Tensor &)>();
    return op.call(self, found_inf, inv_scale);
#endif
}

// aten::_amp_update_scale(Tensor(a!) growth_tracker, Tensor current_scale, Tensor found_inf, float scale_growth_factor, float scale_backoff_factor, int growth_interval) -> Tensor
Tensor _amp_update_scale(Tensor & growth_tracker, const Tensor & current_scale, const Tensor & found_inf, double scale_growth_factor, double scale_backoff_factor, int64_t growth_interval) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(growth_tracker, current_scale, found_inf);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("_amp_update_scale not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_amp_update_scale", "")
        .typed<Tensor (Tensor &, const Tensor &, const Tensor &, double, double, int64_t)>();
    return op.call(growth_tracker, current_scale, found_inf, scale_growth_factor, scale_backoff_factor, growth_interval);
#endif
}

// aten::_cat(Tensor[] tensors, int dim=0) -> Tensor
Tensor _cat(TensorList tensors, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(tensors);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_cat(tensors, dim);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::_cat(tensors, dim);
            break;
        default:
            AT_ERROR("_cat not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cat", "")
        .typed<Tensor (TensorList, int64_t)>();
    return op.call(tensors, dim);
#endif
}

// aten::_cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)
Tensor & _cat_out(Tensor & out, TensorList tensors, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, tensors);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_cat_out_out(out, tensors, dim);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::_cat_out_out(out, tensors, dim);
            break;
        default:
            AT_ERROR("_cat_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_cat", "out")
        .typed<Tensor & (Tensor &, TensorList, int64_t)>();
    return op.call(out, tensors, dim);
#endif
}

// aten::_mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> _mode(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_mode(self, dim, keepdim);
            break;
        default:
            AT_ERROR("_mode not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_mode", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>();
    return op.call(self, dim, keepdim);
#endif
}

// aten::_mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
std::tuple<Tensor &,Tensor &> _mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(values, indices, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_mode_out_values(values, indices, self, dim, keepdim);
            break;
        default:
            AT_ERROR("_mode_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_mode", "values")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>();
    return op.call(values, indices, self, dim, keepdim);
#endif
}

// aten::bucketize.Tensor(Tensor self, Tensor boundaries, *, bool out_int32=False, bool right=False) -> Tensor
Tensor bucketize(const Tensor & self, const Tensor & boundaries, bool out_int32, bool right) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, boundaries);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::bucketize_Tensor(self, boundaries, out_int32, right);
            break;
        default:
            AT_ERROR("bucketize not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bucketize", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &, bool, bool)>();
    return op.call(self, boundaries, out_int32, right);
#endif
}

// aten::bucketize.Tensor_out(Tensor self, Tensor boundaries, *, bool out_int32=False, bool right=False, Tensor(a!) out) -> Tensor(a!)
Tensor & bucketize_out(Tensor & out, const Tensor & self, const Tensor & boundaries, bool out_int32, bool right) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, boundaries);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::bucketize_out_Tensor_out(out, self, boundaries, out_int32, right);
            break;
        default:
            AT_ERROR("bucketize_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bucketize", "Tensor_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, bool, bool)>();
    return op.call(out, self, boundaries, out_int32, right);
#endif
}

// aten::bucketize.Scalar(Scalar self, Tensor boundaries, *, bool out_int32=False, bool right=False) -> Tensor
Tensor bucketize(Scalar self, const Tensor & boundaries, bool out_int32, bool right) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(boundaries);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::bucketize_Scalar(self, boundaries, out_int32, right);
            break;
        default:
            AT_ERROR("bucketize not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::bucketize", "Scalar")
        .typed<Tensor (Scalar, const Tensor &, bool, bool)>();
    return op.call(self, boundaries, out_int32, right);
#endif
}

// aten::searchsorted.Tensor(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False) -> Tensor
Tensor searchsorted(const Tensor & sorted_sequence, const Tensor & self, bool out_int32, bool right) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(sorted_sequence, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::searchsorted_Tensor(sorted_sequence, self, out_int32, right);
            break;
        default:
            AT_ERROR("searchsorted not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::searchsorted", "Tensor")
        .typed<Tensor (const Tensor &, const Tensor &, bool, bool)>();
    return op.call(sorted_sequence, self, out_int32, right);
#endif
}

// aten::searchsorted.Tensor_out(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False, Tensor(a!) out) -> Tensor(a!)
Tensor & searchsorted_out(Tensor & out, const Tensor & sorted_sequence, const Tensor & self, bool out_int32, bool right) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, sorted_sequence, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::searchsorted_out_Tensor_out(out, sorted_sequence, self, out_int32, right);
            break;
        default:
            AT_ERROR("searchsorted_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::searchsorted", "Tensor_out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, bool, bool)>();
    return op.call(out, sorted_sequence, self, out_int32, right);
#endif
}

// aten::searchsorted.Scalar(Tensor sorted_sequence, Scalar self, *, bool out_int32=False, bool right=False) -> Tensor
Tensor searchsorted(const Tensor & sorted_sequence, Scalar self, bool out_int32, bool right) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(sorted_sequence);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::searchsorted_Scalar(sorted_sequence, self, out_int32, right);
            break;
        default:
            AT_ERROR("searchsorted not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::searchsorted", "Scalar")
        .typed<Tensor (const Tensor &, Scalar, bool, bool)>();
    return op.call(sorted_sequence, self, out_int32, right);
#endif
}

// aten::mse_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
Tensor & mse_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::mse_loss_out_out(out, self, target, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mse_loss", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(out, self, target, reduction);
#endif
}

// aten::mse_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
Tensor mse_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::mse_loss(self, target, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mse_loss", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t)>();
    return op.call(self, target, reduction);
#endif
}

// aten::mse_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & mse_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, target);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::mse_loss_backward_out_grad_input(grad_input, grad_output, self, target, reduction);
            break;
        default:
            AT_ERROR("mse_loss_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mse_loss_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(grad_input, grad_output, self, target, reduction);
#endif
}

// aten::mse_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor
Tensor mse_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, target);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::mse_loss_backward(grad_output, self, target, reduction);
            break;
        default:
            AT_ERROR("mse_loss_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mse_loss_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(grad_output, self, target, reduction);
#endif
}

// aten::l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
Tensor & l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::l1_loss_out_out(out, self, target, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::l1_loss", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(out, self, target, reduction);
#endif
}

// aten::l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
Tensor l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::l1_loss(self, target, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::l1_loss", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t)>();
    return op.call(self, target, reduction);
#endif
}

// aten::l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, target);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::l1_loss_backward_out_grad_input(grad_input, grad_output, self, target, reduction);
            break;
        default:
            AT_ERROR("l1_loss_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::l1_loss_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(grad_input, grad_output, self, target, reduction);
#endif
}

// aten::l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor
Tensor l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::l1_loss_backward(grad_output, self, target, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::l1_loss_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(grad_output, self, target, reduction);
#endif
}

// aten::multi_margin_loss.out(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
Tensor & multi_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, target, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::multi_margin_loss_out_out(out, self, target, p, margin, weight, reduction);
            break;
        default:
            AT_ERROR("multi_margin_loss_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::multi_margin_loss", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &, int64_t)>();
    return op.call(out, self, target, p, margin, weight, reduction);
#endif
}

// aten::multi_margin_loss(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean) -> Tensor
Tensor multi_margin_loss(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, target, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::multi_margin_loss(self, target, p, margin, weight, reduction);
            break;
        default:
            AT_ERROR("multi_margin_loss not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::multi_margin_loss", "")
        .typed<Tensor (const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &, int64_t)>();
    return op.call(self, target, p, margin, weight, reduction);
#endif
}

// aten::multi_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & multi_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, target, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::multi_margin_loss_backward_out_grad_input(grad_input, grad_output, self, target, p, margin, weight, reduction);
            break;
        default:
            AT_ERROR("multi_margin_loss_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::multi_margin_loss_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &, int64_t)>();
    return op.call(grad_input, grad_output, self, target, p, margin, weight, reduction);
#endif
}

// aten::multi_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean) -> Tensor
Tensor multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, target, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::multi_margin_loss_backward(grad_output, self, target, p, margin, weight, reduction);
            break;
        default:
            AT_ERROR("multi_margin_loss_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::multi_margin_loss_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &, int64_t)>();
    return op.call(grad_output, self, target, p, margin, weight, reduction);
#endif
}

// aten::multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
Tensor & multilabel_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::multilabel_margin_loss_out_out(out, self, target, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::multilabel_margin_loss", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(out, self, target, reduction);
#endif
}

// aten::multilabel_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
Tensor multilabel_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::multilabel_margin_loss(self, target, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::multilabel_margin_loss", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t)>();
    return op.call(self, target, reduction);
#endif
}

// aten::multilabel_margin_loss_forward.output(Tensor self, Tensor target, int reduction, *, Tensor(a!) output, Tensor(b!) is_target) -> (Tensor(a!), Tensor(b!))
std::tuple<Tensor &,Tensor &> multilabel_margin_loss_forward_out(Tensor & output, Tensor & is_target, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(output, is_target, self, target);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::multilabel_margin_loss_forward_out_output(output, is_target, self, target, reduction);
            break;
        default:
            AT_ERROR("multilabel_margin_loss_forward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::multilabel_margin_loss_forward", "output")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(output, is_target, self, target, reduction);
#endif
}

// aten::multilabel_margin_loss_forward(Tensor self, Tensor target, int reduction) -> (Tensor output, Tensor is_target)
std::tuple<Tensor,Tensor> multilabel_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, target);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::multilabel_margin_loss_forward(self, target, reduction);
            break;
        default:
            AT_ERROR("multilabel_margin_loss_forward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::multilabel_margin_loss_forward", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, int64_t)>();
    return op.call(self, target, reduction);
#endif
}

// aten::multilabel_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & multilabel_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, target, is_target);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::multilabel_margin_loss_backward_out_grad_input(grad_input, grad_output, self, target, reduction, is_target);
            break;
        default:
            AT_ERROR("multilabel_margin_loss_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::multilabel_margin_loss_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, const Tensor &)>();
    return op.call(grad_input, grad_output, self, target, reduction, is_target);
#endif
}

// aten::multilabel_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target) -> Tensor
Tensor multilabel_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, target, is_target);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::multilabel_margin_loss_backward(grad_output, self, target, reduction, is_target);
            break;
        default:
            AT_ERROR("multilabel_margin_loss_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::multilabel_margin_loss_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t, const Tensor &)>();
    return op.call(grad_output, self, target, reduction, is_target);
#endif
}

// aten::nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)
Tensor & nll_loss_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::nll_loss_out_out(out, self, target, weight, reduction, ignore_index);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nll_loss", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>();
    return op.call(out, self, target, weight, reduction, ignore_index);
#endif
}

// aten::nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor
Tensor nll_loss(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::nll_loss(self, target, weight, reduction, ignore_index);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nll_loss", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>();
    return op.call(self, target, weight, reduction, ignore_index);
#endif
}

// aten::nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))
std::tuple<Tensor &,Tensor &> nll_loss_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(output, total_weight, self, target, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::nll_loss_forward_out_output(output, total_weight, self, target, weight, reduction, ignore_index);
            break;
        default:
            AT_ERROR("nll_loss_forward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nll_loss_forward", "output")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>();
    return op.call(output, total_weight, self, target, weight, reduction, ignore_index);
#endif
}

// aten::nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)
std::tuple<Tensor,Tensor> nll_loss_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, target, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::nll_loss_forward(self, target, weight, reduction, ignore_index);
            break;
        default:
            AT_ERROR("nll_loss_forward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nll_loss_forward", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>();
    return op.call(self, target, weight, reduction, ignore_index);
#endif
}

// aten::nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & nll_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, target, weight, total_weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::nll_loss_backward_out_grad_input(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);
            break;
        default:
            AT_ERROR("nll_loss_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nll_loss_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, const Tensor &)>();
    return op.call(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);
#endif
}

// aten::nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor
Tensor nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, target, weight, total_weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::nll_loss_backward(grad_output, self, target, weight, reduction, ignore_index, total_weight);
            break;
        default:
            AT_ERROR("nll_loss_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nll_loss_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, const Tensor &)>();
    return op.call(grad_output, self, target, weight, reduction, ignore_index, total_weight);
#endif
}

// aten::nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)
Tensor & nll_loss2d_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::nll_loss2d_out_out(out, self, target, weight, reduction, ignore_index);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nll_loss2d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>();
    return op.call(out, self, target, weight, reduction, ignore_index);
#endif
}

// aten::nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor
Tensor nll_loss2d(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::nll_loss2d(self, target, weight, reduction, ignore_index);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nll_loss2d", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>();
    return op.call(self, target, weight, reduction, ignore_index);
#endif
}

// aten::nll_loss2d_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))
std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(output, total_weight, self, target, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::nll_loss2d_forward_out_output(output, total_weight, self, target, weight, reduction, ignore_index);
            break;
        default:
            AT_ERROR("nll_loss2d_forward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nll_loss2d_forward", "output")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>();
    return op.call(output, total_weight, self, target, weight, reduction, ignore_index);
#endif
}

// aten::nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)
std::tuple<Tensor,Tensor> nll_loss2d_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, target, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::nll_loss2d_forward(self, target, weight, reduction, ignore_index);
            break;
        default:
            AT_ERROR("nll_loss2d_forward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nll_loss2d_forward", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>();
    return op.call(self, target, weight, reduction, ignore_index);
#endif
}

// aten::nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & nll_loss2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, target, weight, total_weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::nll_loss2d_backward_out_grad_input(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);
            break;
        default:
            AT_ERROR("nll_loss2d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nll_loss2d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, const Tensor &)>();
    return op.call(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);
#endif
}

// aten::nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor
Tensor nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, target, weight, total_weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::nll_loss2d_backward(grad_output, self, target, weight, reduction, ignore_index, total_weight);
            break;
        default:
            AT_ERROR("nll_loss2d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::nll_loss2d_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, const Tensor &)>();
    return op.call(grad_output, self, target, weight, reduction, ignore_index, total_weight);
#endif
}

// aten::smooth_l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
Tensor & smooth_l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, target);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::smooth_l1_loss_out_out(out, self, target, reduction);
            break;
        default:
            AT_ERROR("smooth_l1_loss_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::smooth_l1_loss", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(out, self, target, reduction);
#endif
}

// aten::smooth_l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
Tensor smooth_l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::smooth_l1_loss(self, target, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::smooth_l1_loss", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t)>();
    return op.call(self, target, reduction);
#endif
}

// aten::smooth_l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & smooth_l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, target);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::smooth_l1_loss_backward_out_grad_input(grad_input, grad_output, self, target, reduction);
            break;
        default:
            AT_ERROR("smooth_l1_loss_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::smooth_l1_loss_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(grad_input, grad_output, self, target, reduction);
#endif
}

// aten::smooth_l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor
Tensor smooth_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::smooth_l1_loss_backward(grad_output, self, target, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::smooth_l1_loss_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(grad_output, self, target, reduction);
#endif
}

// aten::soft_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
Tensor & soft_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::soft_margin_loss_out_out(out, self, target, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::soft_margin_loss", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(out, self, target, reduction);
#endif
}

// aten::soft_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
Tensor soft_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::soft_margin_loss(self, target, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::soft_margin_loss", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t)>();
    return op.call(self, target, reduction);
#endif
}

// aten::soft_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & soft_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::soft_margin_loss_backward_out_grad_input(grad_input, grad_output, self, target, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::soft_margin_loss_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(grad_input, grad_output, self, target, reduction);
#endif
}

// aten::soft_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor
Tensor soft_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::soft_margin_loss_backward(grad_output, self, target, reduction);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::soft_margin_loss_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(grad_output, self, target, reduction);
#endif
}

// aten::elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> Tensor(a!)
Tensor & elu_out(Tensor & out, const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::elu_out_out(out, self, alpha, scale, input_scale);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::elu", "out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar, Scalar, Scalar)>();
    return op.call(out, self, alpha, scale, input_scale);
#endif
}

// aten::elu(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor
Tensor elu(const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::elu(self, alpha, scale, input_scale);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::elu", "")
        .typed<Tensor (const Tensor &, Scalar, Scalar, Scalar)>();
    return op.call(self, alpha, scale, input_scale);
#endif
}

// aten::elu_backward.grad_input(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & elu_backward_out(Tensor & grad_input, const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::elu_backward_out_grad_input(grad_input, grad_output, alpha, scale, input_scale, output);
            break;
        default:
            AT_ERROR("elu_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::elu_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar, Scalar, Scalar, const Tensor &)>();
    return op.call(grad_input, grad_output, alpha, scale, input_scale, output);
#endif
}

// aten::elu_backward(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output) -> Tensor
Tensor elu_backward(const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::elu_backward(grad_output, alpha, scale, input_scale, output);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::elu_backward", "")
        .typed<Tensor (const Tensor &, Scalar, Scalar, Scalar, const Tensor &)>();
    return op.call(grad_output, alpha, scale, input_scale, output);
#endif
}

// aten::elu_(Tensor(a!) self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor(a!)
Tensor & elu_(Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::elu_(self, alpha, scale, input_scale);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::elu_", "")
        .typed<Tensor & (Tensor &, Scalar, Scalar, Scalar)>();
    return op.call(self, alpha, scale, input_scale);
#endif
}

// aten::glu.out(Tensor self, int dim=-1, *, Tensor(a!) out) -> Tensor(a!)
Tensor & glu_out(Tensor & out, const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::glu_out_out(out, self, dim);
            break;
        default:
            AT_ERROR("glu_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::glu", "out")
        .typed<Tensor & (Tensor &, const Tensor &, int64_t)>();
    return op.call(out, self, dim);
#endif
}

// aten::glu(Tensor self, int dim=-1) -> Tensor
Tensor glu(const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::glu(self, dim);
            break;
        default:
            AT_ERROR("glu not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::glu", "")
        .typed<Tensor (const Tensor &, int64_t)>();
    return op.call(self, dim);
#endif
}

// aten::glu_backward.grad_input(Tensor grad_output, Tensor self, int dim, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & glu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::glu_backward_out_grad_input(grad_input, grad_output, self, dim);
            break;
        default:
            AT_ERROR("glu_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::glu_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t)>();
    return op.call(grad_input, grad_output, self, dim);
#endif
}

// aten::glu_backward(Tensor grad_output, Tensor self, int dim) -> Tensor
Tensor glu_backward(const Tensor & grad_output, const Tensor & self, int64_t dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::glu_backward(grad_output, self, dim);
            break;
        default:
            AT_ERROR("glu_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::glu_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, int64_t)>();
    return op.call(grad_output, self, dim);
#endif
}

// aten::hardsigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & hardsigmoid_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::hardsigmoid_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hardsigmoid", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::hardsigmoid(Tensor self) -> Tensor
Tensor hardsigmoid(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::hardsigmoid(self);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::hardsigmoid(self);
            break;
        default:
            AT_ERROR("hardsigmoid not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hardsigmoid", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::hardsigmoid_(Tensor(a!) self) -> Tensor(a!)
Tensor & hardsigmoid_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::hardsigmoid_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hardsigmoid_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::hardsigmoid_backward(Tensor grad_output, Tensor self) -> Tensor
Tensor hardsigmoid_backward(const Tensor & grad_output, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::hardsigmoid_backward(grad_output, self);
            break;
        default:
            AT_ERROR("hardsigmoid_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hardsigmoid_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(grad_output, self);
#endif
}

// aten::hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> Tensor(a!)
Tensor & hardtanh_out(Tensor & out, const Tensor & self, Scalar min_val, Scalar max_val) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::hardtanh_out_out(out, self, min_val, max_val);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::hardtanh_out_out(out, self, min_val, max_val);
            break;
        default:
            AT_ERROR("hardtanh_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hardtanh", "out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(out, self, min_val, max_val);
#endif
}

// aten::hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1) -> Tensor
Tensor hardtanh(const Tensor & self, Scalar min_val, Scalar max_val) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::hardtanh(self, min_val, max_val);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::hardtanh(self, min_val, max_val);
            break;
        default:
            AT_ERROR("hardtanh not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hardtanh", "")
        .typed<Tensor (const Tensor &, Scalar, Scalar)>();
    return op.call(self, min_val, max_val);
#endif
}

// aten::hardtanh_backward.grad_input(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & hardtanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::hardtanh_backward_out_grad_input(grad_input, grad_output, self, min_val, max_val);
            break;
        default:
            AT_ERROR("hardtanh_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hardtanh_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(grad_input, grad_output, self, min_val, max_val);
#endif
}

// aten::hardtanh_backward(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val) -> Tensor
Tensor hardtanh_backward(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::hardtanh_backward(grad_output, self, min_val, max_val);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hardtanh_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(grad_output, self, min_val, max_val);
#endif
}

// aten::hardtanh_(Tensor(a!) self, Scalar min_val=-1, Scalar max_val=1) -> Tensor(a!)
Tensor & hardtanh_(Tensor & self, Scalar min_val, Scalar max_val) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::hardtanh_(self, min_val, max_val);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::hardtanh_(self, min_val, max_val);
            break;
        #ifdef USE_VULKAN
        case Backend::Vulkan:
            return VulkanType::hardtanh_(self, min_val, max_val);
            break;
        #endif
        default:
            AT_ERROR("hardtanh_ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hardtanh_", "")
        .typed<Tensor & (Tensor &, Scalar, Scalar)>();
    return op.call(self, min_val, max_val);
#endif
}

// aten::hardswish.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & hardswish_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::hardswish_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hardswish", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::hardswish(Tensor self) -> Tensor
Tensor hardswish(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::hardswish(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hardswish", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::hardswish_(Tensor(a!) self) -> Tensor(a!)
Tensor & hardswish_(Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::hardswish_(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hardswish_", "")
        .typed<Tensor & (Tensor &)>();
    return op.call(self);
#endif
}

// aten::hardswish_backward(Tensor grad_output, Tensor self) -> Tensor
Tensor hardswish_backward(const Tensor & grad_output, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::hardswish_backward(grad_output, self);
            break;
        default:
            AT_ERROR("hardswish_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::hardswish_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(grad_output, self);
#endif
}

// aten::leaky_relu.out(Tensor self, Scalar negative_slope=0.01, *, Tensor(a!) out) -> Tensor(a!)
Tensor & leaky_relu_out(Tensor & out, const Tensor & self, Scalar negative_slope) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::leaky_relu_out_out(out, self, negative_slope);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::leaky_relu_out_out(out, self, negative_slope);
            break;
        default:
            AT_ERROR("leaky_relu_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::leaky_relu", "out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, negative_slope);
#endif
}

// aten::leaky_relu(Tensor self, Scalar negative_slope=0.01) -> Tensor
Tensor leaky_relu(const Tensor & self, Scalar negative_slope) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::leaky_relu(self, negative_slope);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::leaky_relu(self, negative_slope);
            break;
        default:
            AT_ERROR("leaky_relu not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::leaky_relu", "")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, negative_slope);
#endif
}

// aten::leaky_relu_backward(Tensor grad_output, Tensor self, Scalar negative_slope, bool self_is_result) -> Tensor
Tensor leaky_relu_backward(const Tensor & grad_output, const Tensor & self, Scalar negative_slope, bool self_is_result) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::leaky_relu_backward(grad_output, self, negative_slope, self_is_result);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::leaky_relu_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, Scalar, bool)>();
    return op.call(grad_output, self, negative_slope, self_is_result);
#endif
}

// aten::leaky_relu_(Tensor(a!) self, Scalar negative_slope=0.01) -> Tensor(a!)
Tensor & leaky_relu_(Tensor & self, Scalar negative_slope) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::leaky_relu_(self, negative_slope);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::leaky_relu_(self, negative_slope);
            break;
        default:
            AT_ERROR("leaky_relu_ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::leaky_relu_", "")
        .typed<Tensor & (Tensor &, Scalar)>();
    return op.call(self, negative_slope);
#endif
}

// aten::log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
Tensor & log_sigmoid_out(Tensor & out, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::log_sigmoid_out_out(out, self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log_sigmoid", "out")
        .typed<Tensor & (Tensor &, const Tensor &)>();
    return op.call(out, self);
#endif
}

// aten::log_sigmoid(Tensor self) -> Tensor
Tensor log_sigmoid(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::log_sigmoid(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log_sigmoid", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::log_sigmoid_forward.output(Tensor self, *, Tensor(a!) output, Tensor(b!) buffer) -> (Tensor(a!), Tensor(b!))
std::tuple<Tensor &,Tensor &> log_sigmoid_forward_out(Tensor & output, Tensor & buffer, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(output, buffer, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::log_sigmoid_forward_out_output(output, buffer, self);
            break;
        default:
            AT_ERROR("log_sigmoid_forward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log_sigmoid_forward", "output")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &)>();
    return op.call(output, buffer, self);
#endif
}

// aten::log_sigmoid_forward(Tensor self) -> (Tensor output, Tensor buffer)
std::tuple<Tensor,Tensor> log_sigmoid_forward(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::log_sigmoid_forward(self);
            break;
        default:
            AT_ERROR("log_sigmoid_forward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log_sigmoid_forward", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::log_sigmoid_backward.grad_input(Tensor grad_output, Tensor self, Tensor buffer, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & log_sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & buffer) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, buffer);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::log_sigmoid_backward_out_grad_input(grad_input, grad_output, self, buffer);
            break;
        default:
            AT_ERROR("log_sigmoid_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log_sigmoid_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(grad_input, grad_output, self, buffer);
#endif
}

// aten::log_sigmoid_backward(Tensor grad_output, Tensor self, Tensor buffer) -> Tensor
Tensor log_sigmoid_backward(const Tensor & grad_output, const Tensor & self, const Tensor & buffer) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, buffer);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::log_sigmoid_backward(grad_output, self, buffer);
            break;
        default:
            AT_ERROR("log_sigmoid_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::log_sigmoid_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(grad_output, self, buffer);
#endif
}

// aten::rrelu_with_noise.out(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None, *, Tensor(a!) out) -> Tensor(a!)
Tensor & rrelu_with_noise_out(Tensor & out, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, noise);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::rrelu_with_noise_out_out(out, self, noise, lower, upper, training, generator);
            break;
        default:
            AT_ERROR("rrelu_with_noise_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rrelu_with_noise", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>)>();
    return op.call(out, self, noise, lower, upper, training, generator);
#endif
}

// aten::rrelu_with_noise(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor
Tensor rrelu_with_noise(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, noise);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::rrelu_with_noise(self, noise, lower, upper, training, generator);
            break;
        default:
            AT_ERROR("rrelu_with_noise not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rrelu_with_noise", "")
        .typed<Tensor (const Tensor &, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>)>();
    return op.call(self, noise, lower, upper, training, generator);
#endif
}

// aten::rrelu_with_noise_backward(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, bool self_is_result) -> Tensor
Tensor rrelu_with_noise_backward(const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, bool self_is_result) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::rrelu_with_noise_backward(grad_output, self, noise, lower, upper, training, self_is_result);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rrelu_with_noise_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, bool, bool)>();
    return op.call(grad_output, self, noise, lower, upper, training, self_is_result);
#endif
}

// aten::rrelu_with_noise_(Tensor(a!) self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)
Tensor & rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, c10::optional<Generator> generator) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, noise);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::rrelu_with_noise_(self, noise, lower, upper, training, generator);
            break;
        default:
            AT_ERROR("rrelu_with_noise_ not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::rrelu_with_noise_", "")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar, Scalar, bool, c10::optional<Generator>)>();
    return op.call(self, noise, lower, upper, training, generator);
#endif
}

// aten::softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> Tensor(a!)
Tensor & softplus_out(Tensor & out, const Tensor & self, Scalar beta, Scalar threshold) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::softplus_out_out(out, self, beta, threshold);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::softplus", "out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar, Scalar)>();
    return op.call(out, self, beta, threshold);
#endif
}

// aten::softplus(Tensor self, Scalar beta=1, Scalar threshold=20) -> Tensor
Tensor softplus(const Tensor & self, Scalar beta, Scalar threshold) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::softplus(self, beta, threshold);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::softplus", "")
        .typed<Tensor (const Tensor &, Scalar, Scalar)>();
    return op.call(self, beta, threshold);
#endif
}

// aten::softplus_backward.grad_input(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & softplus_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::softplus_backward_out_grad_input(grad_input, grad_output, self, beta, threshold, output);
            break;
        default:
            AT_ERROR("softplus_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::softplus_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &)>();
    return op.call(grad_input, grad_output, self, beta, threshold, output);
#endif
}

// aten::softplus_backward(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output) -> Tensor
Tensor softplus_backward(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::softplus_backward(grad_output, self, beta, threshold, output);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::softplus_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &)>();
    return op.call(grad_output, self, beta, threshold, output);
#endif
}

// aten::softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)
Tensor & softshrink_out(Tensor & out, const Tensor & self, Scalar lambd) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::softshrink_out_out(out, self, lambd);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::softshrink", "out")
        .typed<Tensor & (Tensor &, const Tensor &, Scalar)>();
    return op.call(out, self, lambd);
#endif
}

// aten::softshrink(Tensor self, Scalar lambd=0.5) -> Tensor
Tensor softshrink(const Tensor & self, Scalar lambd) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::softshrink(self, lambd);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::softshrink", "")
        .typed<Tensor (const Tensor &, Scalar)>();
    return op.call(self, lambd);
#endif
}

// aten::softshrink_backward.grad_input(Tensor grad_output, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & softshrink_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar lambd) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::softshrink_backward_out_grad_input(grad_input, grad_output, self, lambd);
            break;
        default:
            AT_ERROR("softshrink_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::softshrink_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar)>();
    return op.call(grad_input, grad_output, self, lambd);
#endif
}

// aten::softshrink_backward(Tensor grad_output, Tensor self, Scalar lambd) -> Tensor
Tensor softshrink_backward(const Tensor & grad_output, const Tensor & self, Scalar lambd) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::softshrink_backward(grad_output, self, lambd);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::softshrink_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, Scalar)>();
    return op.call(grad_output, self, lambd);
#endif
}

// aten::adaptive_avg_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)
Tensor & adaptive_avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::adaptive_avg_pool2d_out_out(out, self, output_size);
            break;
        default:
            AT_ERROR("adaptive_avg_pool2d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::adaptive_avg_pool2d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(out, self, output_size);
#endif
}

// aten::adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor
Tensor adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::adaptive_avg_pool2d(self, output_size);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::adaptive_avg_pool2d", "")
        .typed<Tensor (const Tensor &, IntArrayRef)>();
    return op.call(self, output_size);
#endif
}

// aten::mkldnn_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor
Tensor mkldnn_adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("mkldnn_adaptive_avg_pool2d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::mkldnn_adaptive_avg_pool2d", "")
        .typed<Tensor (const Tensor &, IntArrayRef)>();
    return op.call(self, output_size);
#endif
}

// aten::_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor
Tensor _adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_adaptive_avg_pool2d(self, output_size);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::_adaptive_avg_pool2d(self, output_size);
            break;
        default:
            AT_ERROR("_adaptive_avg_pool2d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_adaptive_avg_pool2d", "")
        .typed<Tensor (const Tensor &, IntArrayRef)>();
    return op.call(self, output_size);
#endif
}

// aten::_adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> Tensor
Tensor _adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_adaptive_avg_pool2d_backward(grad_output, self);
            break;
        default:
            AT_ERROR("_adaptive_avg_pool2d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_adaptive_avg_pool2d_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(grad_output, self);
#endif
}

// aten::adaptive_avg_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> Tensor(a!)
Tensor & adaptive_avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::adaptive_avg_pool3d_out_out(out, self, output_size);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::adaptive_avg_pool3d_out_out(out, self, output_size);
            break;
        default:
            AT_ERROR("adaptive_avg_pool3d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::adaptive_avg_pool3d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(out, self, output_size);
#endif
}

// aten::adaptive_avg_pool3d(Tensor self, int[3] output_size) -> Tensor
Tensor adaptive_avg_pool3d(const Tensor & self, IntArrayRef output_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::adaptive_avg_pool3d(self, output_size);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::adaptive_avg_pool3d(self, output_size);
            break;
        default:
            AT_ERROR("adaptive_avg_pool3d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::adaptive_avg_pool3d", "")
        .typed<Tensor (const Tensor &, IntArrayRef)>();
    return op.call(self, output_size);
#endif
}

// aten::adaptive_avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & adaptive_avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::adaptive_avg_pool3d_backward_out_grad_input(grad_input, grad_output, self);
            break;
        default:
            AT_ERROR("adaptive_avg_pool3d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::adaptive_avg_pool3d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(grad_input, grad_output, self);
#endif
}

// aten::adaptive_avg_pool3d_backward(Tensor grad_output, Tensor self) -> Tensor
Tensor adaptive_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::adaptive_avg_pool3d_backward(grad_output, self);
            break;
        default:
            AT_ERROR("adaptive_avg_pool3d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::adaptive_avg_pool3d_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(grad_output, self);
#endif
}

// aten::adaptive_max_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, indices, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::adaptive_max_pool2d_out_out(out, indices, self, output_size);
            break;
        default:
            AT_ERROR("adaptive_max_pool2d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::adaptive_max_pool2d", "out")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(out, indices, self, output_size);
#endif
}

// aten::adaptive_max_pool2d(Tensor self, int[2] output_size) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> adaptive_max_pool2d(const Tensor & self, IntArrayRef output_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::adaptive_max_pool2d(self, output_size);
            break;
        default:
            AT_ERROR("adaptive_max_pool2d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::adaptive_max_pool2d", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef)>();
    return op.call(self, output_size);
#endif
}

// aten::adaptive_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & adaptive_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::adaptive_max_pool2d_backward_out_grad_input(grad_input, grad_output, self, indices);
            break;
        default:
            AT_ERROR("adaptive_max_pool2d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::adaptive_max_pool2d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(grad_input, grad_output, self, indices);
#endif
}

// aten::adaptive_max_pool2d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor
Tensor adaptive_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::adaptive_max_pool2d_backward(grad_output, self, indices);
            break;
        default:
            AT_ERROR("adaptive_max_pool2d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::adaptive_max_pool2d_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(grad_output, self, indices);
#endif
}

// aten::adaptive_max_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, indices, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::adaptive_max_pool3d_out_out(out, indices, self, output_size);
            break;
        default:
            AT_ERROR("adaptive_max_pool3d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::adaptive_max_pool3d", "out")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(out, indices, self, output_size);
#endif
}

// aten::adaptive_max_pool3d(Tensor self, int[3] output_size) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> adaptive_max_pool3d(const Tensor & self, IntArrayRef output_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::adaptive_max_pool3d(self, output_size);
            break;
        default:
            AT_ERROR("adaptive_max_pool3d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::adaptive_max_pool3d", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef)>();
    return op.call(self, output_size);
#endif
}

// aten::adaptive_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & adaptive_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::adaptive_max_pool3d_backward_out_grad_input(grad_input, grad_output, self, indices);
            break;
        default:
            AT_ERROR("adaptive_max_pool3d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::adaptive_max_pool3d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(grad_input, grad_output, self, indices);
#endif
}

// aten::adaptive_max_pool3d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor
Tensor adaptive_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::adaptive_max_pool3d_backward(grad_output, self, indices);
            break;
        default:
            AT_ERROR("adaptive_max_pool3d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::adaptive_max_pool3d_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &)>();
    return op.call(grad_output, self, indices);
#endif
}

// aten::avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)
Tensor & avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::avg_pool2d_out_out(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
            break;
        default:
            AT_ERROR("avg_pool2d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::avg_pool2d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>();
    return op.call(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
#endif
}

// aten::avg_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor
Tensor avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::avg_pool2d(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::avg_pool2d(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
            break;
        default:
            AT_ERROR("avg_pool2d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::avg_pool2d", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>();
    return op.call(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
#endif
}

// aten::avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & avg_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::avg_pool2d_backward_out_grad_input(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
            break;
        default:
            AT_ERROR("avg_pool2d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::avg_pool2d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>();
    return op.call(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
#endif
}

// aten::avg_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor
Tensor avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::avg_pool2d_backward(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
            break;
        default:
            AT_ERROR("avg_pool2d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::avg_pool2d_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>();
    return op.call(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
#endif
}

// aten::avg_pool3d.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)
Tensor & avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::avg_pool3d_out_out(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
            break;
        default:
            AT_ERROR("avg_pool3d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::avg_pool3d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>();
    return op.call(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
#endif
}

// aten::avg_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor
Tensor avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::avg_pool3d(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::avg_pool3d(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
            break;
        default:
            AT_ERROR("avg_pool3d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::avg_pool3d", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>();
    return op.call(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
#endif
}

// aten::avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::avg_pool3d_backward_out_grad_input(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
            break;
        default:
            AT_ERROR("avg_pool3d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::avg_pool3d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>();
    return op.call(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
#endif
}

// aten::avg_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor
Tensor avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::avg_pool3d_backward(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
            break;
        default:
            AT_ERROR("avg_pool3d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::avg_pool3d_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>();
    return op.call(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
#endif
}

// aten::fractional_max_pool2d.output(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
std::tuple<Tensor &,Tensor &> fractional_max_pool2d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(output, indices, self, random_samples);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::fractional_max_pool2d_out_output(output, indices, self, kernel_size, output_size, random_samples);
            break;
        default:
            AT_ERROR("fractional_max_pool2d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fractional_max_pool2d", "output")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &)>();
    return op.call(output, indices, self, kernel_size, output_size, random_samples);
#endif
}

// aten::fractional_max_pool2d(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> fractional_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, random_samples);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::fractional_max_pool2d(self, kernel_size, output_size, random_samples);
            break;
        default:
            AT_ERROR("fractional_max_pool2d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fractional_max_pool2d", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, IntArrayRef, const Tensor &)>();
    return op.call(self, kernel_size, output_size, random_samples);
#endif
}

// aten::fractional_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & fractional_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::fractional_max_pool2d_backward_out_grad_input(grad_input, grad_output, self, kernel_size, output_size, indices);
            break;
        default:
            AT_ERROR("fractional_max_pool2d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fractional_max_pool2d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &)>();
    return op.call(grad_input, grad_output, self, kernel_size, output_size, indices);
#endif
}

// aten::fractional_max_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices) -> Tensor
Tensor fractional_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::fractional_max_pool2d_backward(grad_output, self, kernel_size, output_size, indices);
            break;
        default:
            AT_ERROR("fractional_max_pool2d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fractional_max_pool2d_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &)>();
    return op.call(grad_output, self, kernel_size, output_size, indices);
#endif
}

// aten::fractional_max_pool3d.output(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
std::tuple<Tensor &,Tensor &> fractional_max_pool3d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(output, indices, self, random_samples);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::fractional_max_pool3d_out_output(output, indices, self, kernel_size, output_size, random_samples);
            break;
        default:
            AT_ERROR("fractional_max_pool3d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fractional_max_pool3d", "output")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &)>();
    return op.call(output, indices, self, kernel_size, output_size, random_samples);
#endif
}

// aten::fractional_max_pool3d(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> fractional_max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, random_samples);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::fractional_max_pool3d(self, kernel_size, output_size, random_samples);
            break;
        default:
            AT_ERROR("fractional_max_pool3d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fractional_max_pool3d", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, IntArrayRef, const Tensor &)>();
    return op.call(self, kernel_size, output_size, random_samples);
#endif
}

// aten::fractional_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & fractional_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::fractional_max_pool3d_backward_out_grad_input(grad_input, grad_output, self, kernel_size, output_size, indices);
            break;
        default:
            AT_ERROR("fractional_max_pool3d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fractional_max_pool3d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &)>();
    return op.call(grad_input, grad_output, self, kernel_size, output_size, indices);
#endif
}

// aten::fractional_max_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices) -> Tensor
Tensor fractional_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::fractional_max_pool3d_backward(grad_output, self, kernel_size, output_size, indices);
            break;
        default:
            AT_ERROR("fractional_max_pool3d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::fractional_max_pool3d_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, const Tensor &)>();
    return op.call(grad_output, self, kernel_size, output_size, indices);
#endif
}

// aten::max_pool2d_with_indices.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, indices, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max_pool2d_with_indices_out_out(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);
            break;
        default:
            AT_ERROR("max_pool2d_with_indices_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_pool2d_with_indices", "out")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>();
    return op.call(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);
#endif
}

// aten::max_pool2d_with_indices(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> max_pool2d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max_pool2d_with_indices(self, kernel_size, stride, padding, dilation, ceil_mode);
            break;
        default:
            AT_ERROR("max_pool2d_with_indices not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_pool2d_with_indices", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>();
    return op.call(self, kernel_size, stride, padding, dilation, ceil_mode);
#endif
}

// aten::max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & max_pool2d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max_pool2d_with_indices_backward_out_grad_input(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
            break;
        default:
            AT_ERROR("max_pool2d_with_indices_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_pool2d_with_indices_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &)>();
    return op.call(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
#endif
}

// aten::max_pool2d_with_indices_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices) -> Tensor
Tensor max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max_pool2d_with_indices_backward(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
            break;
        default:
            AT_ERROR("max_pool2d_with_indices_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_pool2d_with_indices_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &)>();
    return op.call(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
#endif
}

// aten::max_pool3d_with_indices.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, indices, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max_pool3d_with_indices_out_out(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);
            break;
        default:
            AT_ERROR("max_pool3d_with_indices_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_pool3d_with_indices", "out")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>();
    return op.call(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);
#endif
}

// aten::max_pool3d_with_indices(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)
std::tuple<Tensor,Tensor> max_pool3d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max_pool3d_with_indices(self, kernel_size, stride, padding, dilation, ceil_mode);
            break;
        default:
            AT_ERROR("max_pool3d_with_indices not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_pool3d_with_indices", "")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>();
    return op.call(self, kernel_size, stride, padding, dilation, ceil_mode);
#endif
}

// aten::max_pool3d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & max_pool3d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max_pool3d_with_indices_backward_out_grad_input(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
            break;
        default:
            AT_ERROR("max_pool3d_with_indices_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_pool3d_with_indices_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &)>();
    return op.call(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
#endif
}

// aten::max_pool3d_with_indices_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices) -> Tensor
Tensor max_pool3d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max_pool3d_with_indices_backward(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
            break;
        default:
            AT_ERROR("max_pool3d_with_indices_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_pool3d_with_indices_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &)>();
    return op.call(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
#endif
}

// aten::max_unpool2d.out(Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)
Tensor & max_unpool2d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max_unpool2d_out_out(out, self, indices, output_size);
            break;
        default:
            AT_ERROR("max_unpool2d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_unpool2d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(out, self, indices, output_size);
#endif
}

// aten::max_unpool2d(Tensor self, Tensor indices, int[2] output_size) -> Tensor
Tensor max_unpool2d(const Tensor & self, const Tensor & indices, IntArrayRef output_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max_unpool2d(self, indices, output_size);
            break;
        default:
            AT_ERROR("max_unpool2d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_unpool2d", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(self, indices, output_size);
#endif
}

// aten::max_unpool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & max_unpool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max_unpool2d_backward_out_grad_input(grad_input, grad_output, self, indices, output_size);
            break;
        default:
            AT_ERROR("max_unpool2d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_unpool2d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(grad_input, grad_output, self, indices, output_size);
#endif
}

// aten::max_unpool2d_backward(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size) -> Tensor
Tensor max_unpool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max_unpool2d_backward(grad_output, self, indices, output_size);
            break;
        default:
            AT_ERROR("max_unpool2d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_unpool2d_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(grad_output, self, indices, output_size);
#endif
}

// aten::max_unpool3d.out(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> Tensor(a!)
Tensor & max_unpool3d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max_unpool3d_out_out(out, self, indices, output_size, stride, padding);
            break;
        default:
            AT_ERROR("max_unpool3d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_unpool3d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(out, self, indices, output_size, stride, padding);
#endif
}

// aten::max_unpool3d(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor
Tensor max_unpool3d(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max_unpool3d(self, indices, output_size, stride, padding);
            break;
        default:
            AT_ERROR("max_unpool3d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_unpool3d", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(self, indices, output_size, stride, padding);
#endif
}

// aten::max_unpool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & max_unpool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max_unpool3d_backward_out_grad_input(grad_input, grad_output, self, indices, output_size, stride, padding);
            break;
        default:
            AT_ERROR("max_unpool3d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_unpool3d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(grad_input, grad_output, self, indices, output_size, stride, padding);
#endif
}

// aten::max_unpool3d_backward(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor
Tensor max_unpool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, indices);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::max_unpool3d_backward(grad_output, self, indices, output_size, stride, padding);
            break;
        default:
            AT_ERROR("max_unpool3d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::max_unpool3d_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(grad_output, self, indices, output_size, stride, padding);
#endif
}

// aten::reflection_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)
Tensor & reflection_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::reflection_pad1d_out_out(out, self, padding);
            break;
        default:
            AT_ERROR("reflection_pad1d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::reflection_pad1d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(out, self, padding);
#endif
}

// aten::reflection_pad1d(Tensor self, int[2] padding) -> Tensor
Tensor reflection_pad1d(const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::reflection_pad1d(self, padding);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::reflection_pad1d(self, padding);
            break;
        default:
            AT_ERROR("reflection_pad1d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::reflection_pad1d", "")
        .typed<Tensor (const Tensor &, IntArrayRef)>();
    return op.call(self, padding);
#endif
}

// aten::reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & reflection_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::reflection_pad1d_backward_out_grad_input(grad_input, grad_output, self, padding);
            break;
        default:
            AT_ERROR("reflection_pad1d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::reflection_pad1d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(grad_input, grad_output, self, padding);
#endif
}

// aten::reflection_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor
Tensor reflection_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::reflection_pad1d_backward(grad_output, self, padding);
            break;
        default:
            AT_ERROR("reflection_pad1d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::reflection_pad1d_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(grad_output, self, padding);
#endif
}

// aten::reflection_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)
Tensor & reflection_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::reflection_pad2d_out_out(out, self, padding);
            break;
        default:
            AT_ERROR("reflection_pad2d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::reflection_pad2d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(out, self, padding);
#endif
}

// aten::reflection_pad2d(Tensor self, int[4] padding) -> Tensor
Tensor reflection_pad2d(const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::reflection_pad2d(self, padding);
            break;
        default:
            AT_ERROR("reflection_pad2d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::reflection_pad2d", "")
        .typed<Tensor (const Tensor &, IntArrayRef)>();
    return op.call(self, padding);
#endif
}

// aten::reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & reflection_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::reflection_pad2d_backward_out_grad_input(grad_input, grad_output, self, padding);
            break;
        default:
            AT_ERROR("reflection_pad2d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::reflection_pad2d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(grad_input, grad_output, self, padding);
#endif
}

// aten::reflection_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor
Tensor reflection_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::reflection_pad2d_backward(grad_output, self, padding);
            break;
        default:
            AT_ERROR("reflection_pad2d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::reflection_pad2d_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(grad_output, self, padding);
#endif
}

// aten::replication_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)
Tensor & replication_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::replication_pad1d_out_out(out, self, padding);
            break;
        default:
            AT_ERROR("replication_pad1d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::replication_pad1d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(out, self, padding);
#endif
}

// aten::replication_pad1d(Tensor self, int[2] padding) -> Tensor
Tensor replication_pad1d(const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::replication_pad1d(self, padding);
            break;
        default:
            AT_ERROR("replication_pad1d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::replication_pad1d", "")
        .typed<Tensor (const Tensor &, IntArrayRef)>();
    return op.call(self, padding);
#endif
}

// aten::replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & replication_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::replication_pad1d_backward_out_grad_input(grad_input, grad_output, self, padding);
            break;
        default:
            AT_ERROR("replication_pad1d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::replication_pad1d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(grad_input, grad_output, self, padding);
#endif
}

// aten::replication_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor
Tensor replication_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::replication_pad1d_backward(grad_output, self, padding);
            break;
        default:
            AT_ERROR("replication_pad1d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::replication_pad1d_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(grad_output, self, padding);
#endif
}

// aten::replication_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)
Tensor & replication_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::replication_pad2d_out_out(out, self, padding);
            break;
        default:
            AT_ERROR("replication_pad2d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::replication_pad2d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(out, self, padding);
#endif
}

// aten::replication_pad2d(Tensor self, int[4] padding) -> Tensor
Tensor replication_pad2d(const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::replication_pad2d(self, padding);
            break;
        default:
            AT_ERROR("replication_pad2d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::replication_pad2d", "")
        .typed<Tensor (const Tensor &, IntArrayRef)>();
    return op.call(self, padding);
#endif
}

// aten::replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & replication_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::replication_pad2d_backward_out_grad_input(grad_input, grad_output, self, padding);
            break;
        default:
            AT_ERROR("replication_pad2d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::replication_pad2d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(grad_input, grad_output, self, padding);
#endif
}

// aten::replication_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor
Tensor replication_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::replication_pad2d_backward(grad_output, self, padding);
            break;
        default:
            AT_ERROR("replication_pad2d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::replication_pad2d_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(grad_output, self, padding);
#endif
}

// aten::replication_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> Tensor(a!)
Tensor & replication_pad3d_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::replication_pad3d_out_out(out, self, padding);
            break;
        default:
            AT_ERROR("replication_pad3d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::replication_pad3d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(out, self, padding);
#endif
}

// aten::replication_pad3d(Tensor self, int[6] padding) -> Tensor
Tensor replication_pad3d(const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::replication_pad3d(self, padding);
            break;
        default:
            AT_ERROR("replication_pad3d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::replication_pad3d", "")
        .typed<Tensor (const Tensor &, IntArrayRef)>();
    return op.call(self, padding);
#endif
}

// aten::replication_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & replication_pad3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::replication_pad3d_backward_out_grad_input(grad_input, grad_output, self, padding);
            break;
        default:
            AT_ERROR("replication_pad3d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::replication_pad3d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(grad_input, grad_output, self, padding);
#endif
}

// aten::replication_pad3d_backward(Tensor grad_output, Tensor self, int[6] padding) -> Tensor
Tensor replication_pad3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::replication_pad3d_backward(grad_output, self, padding);
            break;
        default:
            AT_ERROR("replication_pad3d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::replication_pad3d_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef)>();
    return op.call(grad_output, self, padding);
#endif
}

// aten::upsample_linear1d.out(Tensor self, int[1] output_size, bool align_corners, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)
Tensor & upsample_linear1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_linear1d_out_out(out, self, output_size, align_corners, scales);
            break;
        default:
            AT_ERROR("upsample_linear1d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_linear1d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<double>)>();
    return op.call(out, self, output_size, align_corners, scales);
#endif
}

// aten::upsample_linear1d(Tensor self, int[1] output_size, bool align_corners, float? scales=None) -> Tensor
Tensor upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_linear1d(self, output_size, align_corners, scales);
            break;
        default:
            AT_ERROR("upsample_linear1d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_linear1d", "")
        .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<double>)>();
    return op.call(self, output_size, align_corners, scales);
#endif
}

// aten::upsample_linear1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & upsample_linear1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_linear1d_backward_out_grad_input(grad_input, grad_output, output_size, input_size, align_corners, scales);
            break;
        default:
            AT_ERROR("upsample_linear1d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_linear1d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>)>();
    return op.call(grad_input, grad_output, output_size, input_size, align_corners, scales);
#endif
}

// aten::upsample_linear1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, float? scales=None) -> Tensor
Tensor upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_linear1d_backward(grad_output, output_size, input_size, align_corners, scales);
            break;
        default:
            AT_ERROR("upsample_linear1d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_linear1d_backward", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>)>();
    return op.call(grad_output, output_size, input_size, align_corners, scales);
#endif
}

// aten::upsample_bilinear2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
Tensor & upsample_bilinear2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_bilinear2d_out_out(out, self, output_size, align_corners, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_bilinear2d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_bilinear2d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>)>();
    return op.call(out, self, output_size, align_corners, scales_h, scales_w);
#endif
}

// aten::upsample_bilinear2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
Tensor upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_bilinear2d(self, output_size, align_corners, scales_h, scales_w);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::upsample_bilinear2d(self, output_size, align_corners, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_bilinear2d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_bilinear2d", "")
        .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>)>();
    return op.call(self, output_size, align_corners, scales_h, scales_w);
#endif
}

// aten::upsample_bilinear2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & upsample_bilinear2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_bilinear2d_backward_out_grad_input(grad_input, grad_output, output_size, input_size, align_corners, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_bilinear2d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_bilinear2d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>)>();
    return op.call(grad_input, grad_output, output_size, input_size, align_corners, scales_h, scales_w);
#endif
}

// aten::upsample_bilinear2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
Tensor upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_bilinear2d_backward(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_bilinear2d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_bilinear2d_backward", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>)>();
    return op.call(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
#endif
}

// aten::upsample_bicubic2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
Tensor & upsample_bicubic2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_bicubic2d_out_out(out, self, output_size, align_corners, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_bicubic2d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_bicubic2d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>)>();
    return op.call(out, self, output_size, align_corners, scales_h, scales_w);
#endif
}

// aten::upsample_bicubic2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
Tensor upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_bicubic2d(self, output_size, align_corners, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_bicubic2d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_bicubic2d", "")
        .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>)>();
    return op.call(self, output_size, align_corners, scales_h, scales_w);
#endif
}

// aten::upsample_bicubic2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & upsample_bicubic2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_bicubic2d_backward_out_grad_input(grad_input, grad_output, output_size, input_size, align_corners, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_bicubic2d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_bicubic2d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>)>();
    return op.call(grad_input, grad_output, output_size, input_size, align_corners, scales_h, scales_w);
#endif
}

// aten::upsample_bicubic2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
Tensor upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_bicubic2d_backward(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_bicubic2d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_bicubic2d_backward", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>)>();
    return op.call(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
#endif
}

// aten::upsample_trilinear3d.out(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
Tensor & upsample_trilinear3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_trilinear3d_out_out(out, self, output_size, align_corners, scales_d, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_trilinear3d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_trilinear3d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
    return op.call(out, self, output_size, align_corners, scales_d, scales_h, scales_w);
#endif
}

// aten::upsample_trilinear3d(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
Tensor upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_trilinear3d(self, output_size, align_corners, scales_d, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_trilinear3d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_trilinear3d", "")
        .typed<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
    return op.call(self, output_size, align_corners, scales_d, scales_h, scales_w);
#endif
}

// aten::upsample_trilinear3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & upsample_trilinear3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_trilinear3d_backward_out_grad_input(grad_input, grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_trilinear3d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_trilinear3d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
    return op.call(grad_input, grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w);
#endif
}

// aten::upsample_trilinear3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
Tensor upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_trilinear3d_backward(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_trilinear3d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_trilinear3d_backward", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
    return op.call(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w);
#endif
}

// aten::upsample_nearest1d.out(Tensor self, int[1] output_size, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)
Tensor & upsample_nearest1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_nearest1d_out_out(out, self, output_size, scales);
            break;
        default:
            AT_ERROR("upsample_nearest1d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_nearest1d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, c10::optional<double>)>();
    return op.call(out, self, output_size, scales);
#endif
}

// aten::upsample_nearest1d(Tensor self, int[1] output_size, float? scales=None) -> Tensor
Tensor upsample_nearest1d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_nearest1d(self, output_size, scales);
            break;
        default:
            AT_ERROR("upsample_nearest1d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_nearest1d", "")
        .typed<Tensor (const Tensor &, IntArrayRef, c10::optional<double>)>();
    return op.call(self, output_size, scales);
#endif
}

// aten::upsample_nearest1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & upsample_nearest1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_nearest1d_backward_out_grad_input(grad_input, grad_output, output_size, input_size, scales);
            break;
        default:
            AT_ERROR("upsample_nearest1d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_nearest1d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>)>();
    return op.call(grad_input, grad_output, output_size, input_size, scales);
#endif
}

// aten::upsample_nearest1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None) -> Tensor
Tensor upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_nearest1d_backward(grad_output, output_size, input_size, scales);
            break;
        default:
            AT_ERROR("upsample_nearest1d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_nearest1d_backward", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>)>();
    return op.call(grad_output, output_size, input_size, scales);
#endif
}

// aten::upsample_nearest2d.out(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
Tensor & upsample_nearest2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_nearest2d_out_out(out, self, output_size, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_nearest2d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_nearest2d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>)>();
    return op.call(out, self, output_size, scales_h, scales_w);
#endif
}

// aten::upsample_nearest2d(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None) -> Tensor
Tensor upsample_nearest2d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_nearest2d(self, output_size, scales_h, scales_w);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::upsample_nearest2d(self, output_size, scales_h, scales_w);
            break;
        #ifdef USE_VULKAN
        case Backend::Vulkan:
            return VulkanType::upsample_nearest2d(self, output_size, scales_h, scales_w);
            break;
        #endif
        default:
            AT_ERROR("upsample_nearest2d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_nearest2d", "")
        .typed<Tensor (const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>)>();
    return op.call(self, output_size, scales_h, scales_w);
#endif
}

// aten::upsample_nearest2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & upsample_nearest2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_nearest2d_backward_out_grad_input(grad_input, grad_output, output_size, input_size, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_nearest2d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_nearest2d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>)>();
    return op.call(grad_input, grad_output, output_size, input_size, scales_h, scales_w);
#endif
}

// aten::upsample_nearest2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None) -> Tensor
Tensor upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_nearest2d_backward(grad_output, output_size, input_size, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_nearest2d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_nearest2d_backward", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>)>();
    return op.call(grad_output, output_size, input_size, scales_h, scales_w);
#endif
}

// aten::upsample_nearest3d.out(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
Tensor & upsample_nearest3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_nearest3d_out_out(out, self, output_size, scales_d, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_nearest3d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_nearest3d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
    return op.call(out, self, output_size, scales_d, scales_h, scales_w);
#endif
}

// aten::upsample_nearest3d(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
Tensor upsample_nearest3d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_nearest3d(self, output_size, scales_d, scales_h, scales_w);
            break;
        case Backend::QuantizedCPU:
            return QuantizedCPUType::upsample_nearest3d(self, output_size, scales_d, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_nearest3d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_nearest3d", "")
        .typed<Tensor (const Tensor &, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
    return op.call(self, output_size, scales_d, scales_h, scales_w);
#endif
}

// aten::upsample_nearest3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & upsample_nearest3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_nearest3d_backward_out_grad_input(grad_input, grad_output, output_size, input_size, scales_d, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_nearest3d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_nearest3d_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
    return op.call(grad_input, grad_output, output_size, input_size, scales_d, scales_h, scales_w);
#endif
}

// aten::upsample_nearest3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
Tensor upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::upsample_nearest3d_backward(grad_output, output_size, input_size, scales_d, scales_h, scales_w);
            break;
        default:
            AT_ERROR("upsample_nearest3d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::upsample_nearest3d_backward", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<double>, c10::optional<double>, c10::optional<double>)>();
    return op.call(grad_output, output_size, input_size, scales_d, scales_h, scales_w);
#endif
}

// aten::sigmoid_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::sigmoid_backward_out_grad_input(grad_input, grad_output, output);
            break;
        default:
            AT_ERROR("sigmoid_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sigmoid_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(grad_input, grad_output, output);
#endif
}

// aten::sigmoid_backward(Tensor grad_output, Tensor output) -> Tensor
Tensor sigmoid_backward(const Tensor & grad_output, const Tensor & output) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::sigmoid_backward(grad_output, output);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::sigmoid_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(grad_output, output);
#endif
}

// aten::tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & tanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output, output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::tanh_backward_out_grad_input(grad_input, grad_output, output);
            break;
        default:
            AT_ERROR("tanh_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::tanh_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &)>();
    return op.call(grad_input, grad_output, output);
#endif
}

// aten::tanh_backward(Tensor grad_output, Tensor output) -> Tensor
Tensor tanh_backward(const Tensor & grad_output, const Tensor & output) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::tanh_backward(grad_output, output);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::tanh_backward", "")
        .typed<Tensor (const Tensor &, const Tensor &)>();
    return op.call(grad_output, output);
#endif
}

// aten::slow_conv_transpose2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)
Tensor & slow_conv_transpose2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::slow_conv_transpose2d_out_out(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
            break;
        default:
            AT_ERROR("slow_conv_transpose2d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv_transpose2d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
#endif
}

// aten::slow_conv_transpose2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1) -> Tensor
Tensor slow_conv_transpose2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::slow_conv_transpose2d(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
            break;
        default:
            AT_ERROR("slow_conv_transpose2d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv_transpose2d", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
#endif
}

// aten::slow_conv_transpose2d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))
std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_weight, grad_bias, grad_output, self, weight, columns, ones);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::slow_conv_transpose2d_backward_out_grad_output(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones);
            break;
        default:
            AT_ERROR("slow_conv_transpose2d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv_transpose2d_backward", "grad_output")
        .typed<std::tuple<Tensor &,Tensor &,Tensor &> (Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &)>();
    return op.call(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones);
#endif
}

// aten::slow_conv_transpose2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, weight, columns, ones);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::slow_conv_transpose2d_backward_output_mask(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, output_mask);
            break;
        default:
            AT_ERROR("slow_conv_transpose2d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv_transpose2d_backward", "output_mask")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>)>();
    return op.call(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, output_mask);
#endif
}

// aten::slow_conv_transpose3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1, *, Tensor(a!) out) -> Tensor(a!)
Tensor & slow_conv_transpose3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::slow_conv_transpose3d_out_out(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
            break;
        default:
            AT_ERROR("slow_conv_transpose3d_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv_transpose3d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
#endif
}

// aten::slow_conv_transpose3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1) -> Tensor
Tensor slow_conv_transpose3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::slow_conv_transpose3d(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
            break;
        default:
            AT_ERROR("slow_conv_transpose3d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv_transpose3d", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
#endif
}

// aten::slow_conv_transpose3d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))
std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_weight, grad_bias, grad_output, self, weight, finput, fgrad_input);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::slow_conv_transpose3d_backward_out_grad_output(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input);
            break;
        default:
            AT_ERROR("slow_conv_transpose3d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv_transpose3d_backward", "grad_output")
        .typed<std::tuple<Tensor &,Tensor &,Tensor &> (Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &)>();
    return op.call(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input);
#endif
}

// aten::slow_conv_transpose3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, weight, finput, fgrad_input);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::slow_conv_transpose3d_backward_output_mask(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, output_mask);
            break;
        default:
            AT_ERROR("slow_conv_transpose3d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv_transpose3d_backward", "output_mask")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>)>();
    return op.call(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, output_mask);
#endif
}

// aten::thnn_conv2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, *, Tensor(a!) out) -> Tensor(a!)
Tensor & thnn_conv2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::thnn_conv2d_out_out(out, self, weight, kernel_size, bias, stride, padding);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::thnn_conv2d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef)>();
    return op.call(out, self, weight, kernel_size, bias, stride, padding);
#endif
}

// aten::thnn_conv2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0) -> Tensor
Tensor thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::thnn_conv2d(self, weight, kernel_size, bias, stride, padding);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::thnn_conv2d", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef)>();
    return op.call(self, weight, kernel_size, bias, stride, padding);
#endif
}

// aten::thnn_conv2d_forward.output(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))
std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(output, finput, fgrad_input, self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::thnn_conv2d_forward_out_output(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding);
            break;
        default:
            AT_ERROR("thnn_conv2d_forward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::thnn_conv2d_forward", "output")
        .typed<std::tuple<Tensor &,Tensor &,Tensor &> (Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef)>();
    return op.call(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding);
#endif
}

// aten::thnn_conv2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)
std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::thnn_conv2d_forward(self, weight, kernel_size, bias, stride, padding);
            break;
        default:
            AT_ERROR("thnn_conv2d_forward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::thnn_conv2d_forward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef)>();
    return op.call(self, weight, kernel_size, bias, stride, padding);
#endif
}

// aten::thnn_conv2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))
std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_weight, grad_bias, grad_output, self, weight, finput, fgrad_input);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::thnn_conv2d_backward_out_grad_input(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input);
            break;
        default:
            AT_ERROR("thnn_conv2d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::thnn_conv2d_backward", "grad_input")
        .typed<std::tuple<Tensor &,Tensor &,Tensor &> (Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &)>();
    return op.call(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input);
#endif
}

// aten::thnn_conv2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, weight, finput, fgrad_input);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::thnn_conv2d_backward_output_mask(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
            break;
        default:
            AT_ERROR("thnn_conv2d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::thnn_conv2d_backward", "output_mask")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>)>();
    return op.call(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
#endif
}

// aten::thnn_conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)
Tensor & thnn_conv_depthwise2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::thnn_conv_depthwise2d_out_out(out, self, weight, kernel_size, bias, stride, padding, dilation);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::thnn_conv_depthwise2d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(out, self, weight, kernel_size, bias, stride, padding, dilation);
#endif
}

// aten::thnn_conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor
Tensor thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::thnn_conv_depthwise2d(self, weight, kernel_size, bias, stride, padding, dilation);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::thnn_conv_depthwise2d", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(self, weight, kernel_size, bias, stride, padding, dilation);
#endif
}

// aten::thnn_conv_depthwise2d_forward.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!) out) -> Tensor(a!)
Tensor & thnn_conv_depthwise2d_forward_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("thnn_conv_depthwise2d_forward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::thnn_conv_depthwise2d_forward", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(out, self, weight, kernel_size, bias, stride, padding, dilation);
#endif
}

// aten::thnn_conv_depthwise2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation) -> Tensor
Tensor thnn_conv_depthwise2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("thnn_conv_depthwise2d_forward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::thnn_conv_depthwise2d_forward", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(self, weight, kernel_size, bias, stride, padding, dilation);
#endif
}

// aten::thnn_conv_depthwise2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight) -> (Tensor(a!), Tensor(b!))
std::tuple<Tensor &,Tensor &> thnn_conv_depthwise2d_backward_out(Tensor & grad_input, Tensor & grad_weight, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_weight, grad_output, self, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("thnn_conv_depthwise2d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::thnn_conv_depthwise2d_backward", "grad_input")
        .typed<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(grad_input, grad_weight, grad_output, self, weight, kernel_size, stride, padding, dilation);
#endif
}

// aten::thnn_conv_depthwise2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[2] output_mask) -> (Tensor grad_input, Tensor grad_weight)
std::tuple<Tensor,Tensor> thnn_conv_depthwise2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,2> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
    
        default:
            AT_ERROR("thnn_conv_depthwise2d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::thnn_conv_depthwise2d_backward", "output_mask")
        .typed<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, std::array<bool,2>)>();
    return op.call(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
#endif
}

// aten::slow_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, *, Tensor(a!) out) -> Tensor(a!)
Tensor & slow_conv3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::slow_conv3d_out_out(out, self, weight, kernel_size, bias, stride, padding);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv3d", "out")
        .typed<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef)>();
    return op.call(out, self, weight, kernel_size, bias, stride, padding);
#endif
}

// aten::slow_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0) -> Tensor
Tensor slow_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::slow_conv3d(self, weight, kernel_size, bias, stride, padding);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv3d", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef)>();
    return op.call(self, weight, kernel_size, bias, stride, padding);
#endif
}

// aten::slow_conv3d_forward.output(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))
std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(output, finput, fgrad_input, self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::slow_conv3d_forward_out_output(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding);
            break;
        default:
            AT_ERROR("slow_conv3d_forward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv3d_forward", "output")
        .typed<std::tuple<Tensor &,Tensor &,Tensor &> (Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef)>();
    return op.call(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding);
#endif
}

// aten::slow_conv3d_forward(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)
std::tuple<Tensor,Tensor,Tensor> slow_conv3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::slow_conv3d_forward(self, weight, kernel_size, bias, stride, padding);
            break;
        default:
            AT_ERROR("slow_conv3d_forward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv3d_forward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef)>();
    return op.call(self, weight, kernel_size, bias, stride, padding);
#endif
}

// aten::slow_conv3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))
std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_weight, grad_bias, grad_output, self, weight, finput, fgrad_input);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::slow_conv3d_backward_out_grad_input(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input);
            break;
        default:
            AT_ERROR("slow_conv3d_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv3d_backward", "grad_input")
        .typed<std::tuple<Tensor &,Tensor &,Tensor &> (Tensor &, Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &)>();
    return op.call(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input);
#endif
}

// aten::slow_conv3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
std::tuple<Tensor,Tensor,Tensor> slow_conv3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, weight, finput, fgrad_input);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::slow_conv3d_backward_output_mask(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
            break;
        default:
            AT_ERROR("slow_conv3d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv3d_backward", "output_mask")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, const Tensor &, const Tensor &, std::array<bool,3>)>();
    return op.call(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
#endif
}

// aten::slow_conv_dilated2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor
Tensor slow_conv_dilated2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::slow_conv_dilated2d(self, weight, kernel_size, bias, stride, padding, dilation);
            break;
        default:
            AT_ERROR("slow_conv_dilated2d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv_dilated2d", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(self, weight, kernel_size, bias, stride, padding, dilation);
#endif
}

// aten::slow_conv_dilated2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::slow_conv_dilated2d_backward(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
            break;
        default:
            AT_ERROR("slow_conv_dilated2d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv_dilated2d_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, std::array<bool,3>)>();
    return op.call(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
#endif
}

// aten::slow_conv_dilated3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1) -> Tensor
Tensor slow_conv_dilated3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self, weight, bias);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::slow_conv_dilated3d(self, weight, kernel_size, bias, stride, padding, dilation);
            break;
        default:
            AT_ERROR("slow_conv_dilated3d not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv_dilated3d", "")
        .typed<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(self, weight, kernel_size, bias, stride, padding, dilation);
#endif
}

// aten::slow_conv_dilated3d_backward(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output, self, weight);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::slow_conv_dilated3d_backward(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
            break;
        default:
            AT_ERROR("slow_conv_dilated3d_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::slow_conv_dilated3d_backward", "")
        .typed<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, std::array<bool,3>)>();
    return op.call(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
#endif
}

// aten::col2im.out(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)
Tensor & col2im_out(Tensor & out, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::col2im_out_out(out, self, output_size, kernel_size, dilation, padding, stride);
            break;
        default:
            AT_ERROR("col2im_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::col2im", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(out, self, output_size, kernel_size, dilation, padding, stride);
#endif
}

// aten::col2im(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
Tensor col2im(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::col2im(self, output_size, kernel_size, dilation, padding, stride);
            break;
        default:
            AT_ERROR("col2im not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::col2im", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(self, output_size, kernel_size, dilation, padding, stride);
#endif
}

// aten::col2im_backward.grad_input(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & col2im_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::col2im_backward_out_grad_input(grad_input, grad_output, kernel_size, dilation, padding, stride);
            break;
        default:
            AT_ERROR("col2im_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::col2im_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(grad_input, grad_output, kernel_size, dilation, padding, stride);
#endif
}

// aten::col2im_backward(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
Tensor col2im_backward(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::col2im_backward(grad_output, kernel_size, dilation, padding, stride);
            break;
        default:
            AT_ERROR("col2im_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::col2im_backward", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(grad_output, kernel_size, dilation, padding, stride);
#endif
}

// aten::im2col.out(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)
Tensor & im2col_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(out, self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::im2col_out_out(out, self, kernel_size, dilation, padding, stride);
            break;
        default:
            AT_ERROR("im2col_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::im2col", "out")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(out, self, kernel_size, dilation, padding, stride);
#endif
}

// aten::im2col(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
Tensor im2col(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(self);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::im2col(self, kernel_size, dilation, padding, stride);
            break;
        default:
            AT_ERROR("im2col not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::im2col", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(self, kernel_size, dilation, padding, stride);
#endif
}

// aten::im2col_backward.grad_input(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)
Tensor & im2col_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_input, grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::im2col_backward_out_grad_input(grad_input, grad_output, input_size, kernel_size, dilation, padding, stride);
            break;
        default:
            AT_ERROR("im2col_backward_out not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::im2col_backward", "grad_input")
        .typed<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(grad_input, grad_output, input_size, kernel_size, dilation, padding, stride);
#endif
}

// aten::im2col_backward(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
Tensor im2col_backward(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(grad_output);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::im2col_backward(grad_output, input_size, kernel_size, dilation, padding, stride);
            break;
        default:
            AT_ERROR("im2col_backward not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::im2col_backward", "")
        .typed<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef)>();
    return op.call(grad_output, input_size, kernel_size, dilation, padding, stride);
#endif
}

// aten::isfinite(Tensor self) -> Tensor
Tensor isfinite(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::isfinite(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::isfinite", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::isinf(Tensor self) -> Tensor
Tensor isinf(const Tensor & self) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::isinf(self);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::isinf", "")
        .typed<Tensor (const Tensor &)>();
    return op.call(self);
#endif
}

// aten::_add_batch_dim(Tensor self, int batch_dim, int level) -> Tensor
Tensor _add_batch_dim(const Tensor & self, int64_t batch_dim, int64_t level) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_add_batch_dim(self, batch_dim, level);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_add_batch_dim", "")
        .typed<Tensor (const Tensor &, int64_t, int64_t)>();
    return op.call(self, batch_dim, level);
#endif
}

// aten::_remove_batch_dim(Tensor self, int level, int batch_size, int out_dim) -> Tensor
Tensor _remove_batch_dim(const Tensor & self, int64_t level, int64_t batch_size, int64_t out_dim) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_remove_batch_dim(self, level, batch_size, out_dim);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_remove_batch_dim", "")
        .typed<Tensor (const Tensor &, int64_t, int64_t, int64_t)>();
    return op.call(self, level, batch_size, out_dim);
#endif
}

// aten::_test_serialization_subcmul(Tensor self, Tensor other, Scalar alpha=1) -> Tensor
Tensor _test_serialization_subcmul(const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    return TypeDefault::_test_serialization_subcmul(self, other, alpha);
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_test_serialization_subcmul", "")
        .typed<Tensor (const Tensor &, const Tensor &, Scalar)>();
    return op.call(self, other, alpha);
#endif
}

// aten::_test_optional_intlist(Tensor values, int[]? addends) -> Tensor
Tensor _test_optional_intlist(const Tensor & values, c10::optional<IntArrayRef> addends) {
#ifdef USE_STATIC_DISPATCH
    at::AutoNonVariableTypeMode _var_guard(true);
    DispatchKeySet _dk_set = c10::detail::multi_dispatch_key_set(values);
    DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
    DispatchKey _dk = c10::impl::dispatchTypeId(_dk_set, _dk_mask);
    switch (dispatchKeyToBackend(_dk)) {
        case Backend::CPU:
            return CPUType::_test_optional_intlist(values, addends);
            break;
        default:
            AT_ERROR("_test_optional_intlist not implemented for ", at::toString(_dk));
    }
#else
    static auto op = c10::Dispatcher::singleton()
        .findSchemaOrThrow("aten::_test_optional_intlist", "")
        .typed<Tensor (const Tensor &, c10::optional<IntArrayRef>)>();
    return op.call(values, addends);
#endif
}

}
